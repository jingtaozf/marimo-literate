 -*- Mode: POLY-ORG ;  indent-tabs-mode: nil; lsp-diagnostics-provider: :none -*- ---
#+Title: ast
#+OPTIONS: tex:verbatim toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: literate-lang python
#+PROPERTY: literate-load yes
#+PROPERTY: literate-insert-header no
#+PROPERTY: header-args :results silent :session
#+PROPERTY: LITERATE_ORG_LANGUAGE python
#+PROPERTY: LITERATE_ORG_ROOT_MODULE marimo._smoke_tests
#+PROPERTY: LITERATE_ORG_ROOT_MODULE_PATH ~/projects/marimo
#+PROPERTY: LITERATE_ORG_MODULE_CREATE_METHOD import
* 2d-cells
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.2d-cells
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/2d-cells.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.9.0"
#+BEGIN_SRC python
__generated_with = "0.9.0"

#+END_SRC
** Assignment app = marimo.App(width="columns")
#+BEGIN_SRC python
app = marimo.App(width="columns")

#+END_SRC
** @app.cell(column=0): Function __
#+BEGIN_SRC python
@app.cell(column=0)
def __():
    import marimo as mo
    import altair as alt
    from vega_datasets import data
    return alt, data, mo

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dataset, mo, plot, x, y):
    mo.vstack([dataset, x, y, plot])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(selected_dataset):
    df = selected_dataset()
    df
    return (df,)

#+END_SRC
** @app.cell(column=1): Function __
#+BEGIN_SRC python
@app.cell(column=1)
def __(plot_type, x, y):
    plot_type().encode(
        x=x.value,
        y=y.value,
    ).interactive()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    dataset = mo.ui.dropdown(
        label="Choose dataset", options=data.list_datasets(), value="iris"
    )
    return (dataset,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    x = mo.ui.dropdown(
        label="Choose X value", options=df.columns.to_list(), value=df.columns[0]
    )
    y = mo.ui.dropdown(
        label="Choose Y value", options=df.columns.to_list(), value=df.columns[1]
    )
    plot = mo.ui.dropdown(
        label="Choose plot type",
        options=["mark_bar", "mark_circle"],
        value="mark_bar",
    )
    return plot, x, y

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, dataset):
    selected_dataset = getattr(data, dataset.value)
    return (selected_dataset,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df, plot):
    plot_type = getattr(alt.Chart(df), plot.value)
    return (plot_type,)

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* admonitions
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.admonitions
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/admonitions.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    kinds = [
        # ---
        "info",
        "note",
        # ---
        "danger",
        "error",
        "caution",
        # ---
        "hint",
        # ---
        "important",
        # ---
        "tip",
        # ---
        "attention",
        "warning",
    ]


    def create(kind):
        return mo.md(
            rf"""

            !!! {kind} "{kind} admonition"
                This is an admonition for {kind}
            """
        )


    mo.vstack([create(kind) for kind in kinds])
    return create, kinds

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Misc""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        rf"""
        !!! important ""
            This is an admonition box without a title.
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        !!! tip ""
            Importa recordar as seguintes regras de diferenciação de matrizes:
        
            $$\frac{\partial\, u'v}{\partial\, v} = \frac{\partial\, v'u}{\partial\, v} = u$$
        
            sendo $u$ e $v$ dois vetores.
        
            $$\frac{\partial\, v'Av}{\partial\, v}=2Av=2v'A$$
        
            em que $A$ é uma matriz simétrica. No nosso caso, $A=X'X$ e $v=\hat{\boldsymbol{\beta}}$.import marimo as mo
        """
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* ansi
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.ansi
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/ansi.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    print(
        "".join(
            "\x1b[{}m{}\n\x1b[0m".format(31 + i, "Hello, World!") for i in range(8)
        )
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    txt = "\n\n\x1B[1;33;40m 33;40  \x1B[1;33;41m 33;41  \x1B[1;33;42m 33;42  \x1B[1;33;43m 33;43  \x1B[1;33;44m 33;44  \x1B[1;33;45m 33;45  \x1B[1;33;46m 33;46  \x1B[1m\x1B[0\n\n\x1B[1;33;42m >> Tests OK\n\n"

    print(txt)
    return txt,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import sys

    print("Hello world", file=sys.stderr)
    return sys,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # No ANSI conversion when not stdout or stderr
    "".join("\x1b[{}m{}\n\x1b[0m".format(31 + i, "Hello, World!") for i in range(8))
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # Colors input()
    input("\x1b[34mPress Enter to continue\x1b[0m")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import logging

    # ANSI escape codes for colors
    class AnsiColorFormatter(logging.Formatter):
        COLOR_CODES = {
            'DEBUG': '\033[94m',    # Blue
            'INFO': '\033[92m',     # Green
            'WARNING': '\033[93m',  # Yellow
            'ERROR': '\033[91m',    # Red
            'CRITICAL': '\033[95m', # Magenta
        }
        RESET_CODE = '\033[0m'

        def format(self, record):
            color = self.COLOR_CODES.get(record.levelname, self.RESET_CODE)
            return f"{color}{super().format(record)}{self.RESET_CODE}"

    # Configure the logging
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    # Add a new handler
    handler = logging.StreamHandler()
    formatter = AnsiColorFormatter('%(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Example log messages
    logging.error(f"\033[1;32mDirectory created at /path/to/dir\033[0m")
    logger.debug("This is a debug message")
    logger.info("This is an info message")
    logger.warning("This is a warning message")
    logger.error("This is an error message")
    logger.critical("This is a critical message")
    return AnsiColorFormatter, formatter, handler, logger, logging

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* anywidget_compat
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.anywidget_compat
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/anywidget_compat.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "traitlets",
#     "anywidget",
#     "pandas",
#     "altair",
#     "drawdata",
# ]
# ///
import marimo

#+END_SRC
** Assignment __generated_with = "0.2.13"
#+BEGIN_SRC python
__generated_with = "0.2.13"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import anywidget
    import traitlets


    class CounterWidget(anywidget.AnyWidget):
        # Widget front-end JavaScript code
        _esm = """
        function render({ model, el }) {
          let getCount = () => model.get("count");
          let button = document.createElement("button");
          button.innerHTML = `count is ${getCount()}`;
          button.addEventListener("click", () => {
            model.set("count", getCount() + 1);
            model.save_changes();
          });
          model.on("change:count", () => {
            button.innerHTML = `count is ${getCount()}`;
          });
          el.appendChild(button);
        }
    	export default { render };
        """
        _css = """
        button {
          padding: 5px !important;
          border-radius: 5px !important;
          background-color: #f0f0f0 !important;

          &:hover {
            background-color: lightblue !important;
            color: white !important;
          }
        }
        """

        # Stateful property that can be accessed by JavaScript & Python
        count = traitlets.Int(0).tag(sync=True)
    return CounterWidget, anywidget, traitlets

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(CounterWidget):
    # Non-reactive
    w = CounterWidget()
    w
    return w,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(w):
    # Non-reactive, but class is cached
    w
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(w):
    w.trait_values()["count"]
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(CounterWidget, mo):
    w_reactive = mo.ui.anywidget(CounterWidget())
    w_reactive
    return w_reactive,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(w_reactive):
    w_reactive
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(w_reactive):
    w_reactive.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(w_reactive):
    w_reactive.widget.trait_values()["count"]
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    import pandas as pd
    return alt, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    from drawdata import ScatterWidget

    dd_widget = mo.ui.anywidget(ScatterWidget())
    dd_widget
    return ScatterWidget, dd_widget

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(alt, dd_widget, mo, pd):
    mo.stop(not dd_widget.value["data"])
    df = pd.DataFrame(dd_widget.value["data"])
    chart = alt.Chart(df).mark_point().encode(x="x", y="y", color="color")
    mo.ui.altair_chart(chart)
    return chart, df

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* arrays_and_dicts
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.arrays_and_dicts
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/arrays_and_dicts.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.2.3"
#+BEGIN_SRC python
__generated_with = "0.2.3"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    items = mo.ui.array(
        [
            mo.ui.text("name", "Name"),
            mo.ui.text("age", "Age"),
            mo.ui.text("email", "Email"),
            mo.ui.text("phone", "Phone"),
            mo.ui.text("address", "Address"),
            mo.ui.text("memo", "Memo"),
        ]
    )
    return items,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(items):
    items
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(items):
    items.hstack(gap=2)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    dictionary = mo.ui.dictionary(
        {
            "name": mo.ui.text("name", "Name"),
            "age": mo.ui.text("age", "Age"),
            "email": mo.ui.text("email", "Email"),
            "phone": mo.ui.text("phone", "Phone"),
            "address": mo.ui.text("address", "Address"),
            "memo": mo.ui.text("memo", "Memo"),
        }
    )
    return dictionary,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dictionary):
    dictionary
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dictionary):
    dictionary.vstack()
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* buttons
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.buttons
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/buttons.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.2"
#+BEGIN_SRC python
__generated_with = "0.1.2"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    kinds = ["neutral", "success", "warn", "danger"]

    mo.vstack([mo.ui.button(label=kind, kind=kind) for kind in kinds])
    return kinds,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(kinds, mo):
    mo.vstack([mo.ui.button(label=kind, kind=kind, disabled=True) for kind in kinds])
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* carousel
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.carousel
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/carousel.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "altair",
#     "pandas",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.2.13"
#+BEGIN_SRC python
__generated_with = "0.2.13"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import altair as alt
    return alt, mo, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.read_csv(
        "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"
    )
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    table = mo.ui.table(df, label="Iris Data in a table")
    return table,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df, mo):
    chart = mo.ui.altair_chart(
        alt.Chart(df)
        .mark_point()
        .encode(x="sepal_length", y="sepal_width", color="species"),
        label="Iris Data in chart",
    )
    return chart,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart, mo, table):
    mo.carousel(
        [
            mo.md("# A Presentation on Iris Data"),
            "By the marimo team",
            table,
            chart,
            mo.md("# Thank you!"),
        ]
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* cli_args
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.cli_args
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/cli_args.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        Re-run this with notebook with the following command line:

        ```bash
        marimo edit marimo/_smoke_tests/cli_args.py -- -a foo --b=bar -d 10 -d 20 -d false
        ```
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.cli_args().to_dict()
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* code_editor
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.code_editor
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/code_editor.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.76"
#+BEGIN_SRC python
__generated_with = "0.1.76"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.code_editor("print(2 + 2)", min_height=50)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.code_editor("SELECT * FROM table;", language="sql", theme="light")
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(languages, mo):
    language_select = mo.ui.dropdown(
        languages,
        value="javascript",
        label="Language",
        full_width=True,
    )
    theme_select = mo.ui.radio(["light", "dark"], value="dark", label="Theme")
    mo.hstack([language_select, theme_select], justify="start", gap=2)
    return language_select, theme_select

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(language_select, mo, samples, theme_select):
    mo.ui.code_editor(
        samples[language_select.value],
        language=language_select.value,
        theme=theme_select.value,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    languages = ["sql", "python", "javascript", "ruby", "c", "java", "go"]
    samples = {
        "sql": "SELECT * FROM table;",
        "python": "print(2 + 2)",
        "javascript": "console.log(2 + 2)",
        "ruby": "puts 2 + 2",
        "c": 'printf("%d", 2 + 2);',
        "c++": "cout << 2 + 2 << endl;",
        "c#": "Console.WriteLine(2 + 2);",
        "java": "System.out.println(2 + 2);",
        "go": "fmt.Println(2 + 2)",
    }
    return languages, samples

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* data_explorer
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.data_explorer
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/data_explorer.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.2.2"
#+BEGIN_SRC python
__generated_with = "0.2.2"

#+END_SRC
** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    return data, mo

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    options = data.list_datasets()
    dataset_dropdown = mo.ui.dropdown(options, label="Datasets", value="cars")
    dataset_dropdown
    return dataset_dropdown, options

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, dataset_dropdown, mo):
    mo.stop(not dataset_dropdown.value)
    selected_dataset = dataset_dropdown.value
    df = data.__call__(selected_dataset)
    return df, selected_dataset

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    v = mo.ui.data_explorer(df)
    v
    return v,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(v):
    v.value
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* dataframe
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.dataframe
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/dataframe.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "dask",
#     "vega-datasets",
#     "polars",
#     "altair",
#     "pyarrow",
#     "marimo",
#     "pandas",
#     "ibis",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.9.10"
#+BEGIN_SRC python
__generated_with = "0.9.10"

#+END_SRC
** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""# 🤖 Lists/Dicts""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _data = [
        {"Name": "John", "Age": 30, "City": "New York"},
        {"Name": "Alice", "Age": 24, "City": "San Francisco"},
    ]
    as_list = mo.ui.table(_data)
    as_list
    return (as_list,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(as_list):
    as_list.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _data = {
        "Name": ["John", "Alice"],
        "Age": [30, 24],
        "City": ["New York", "San Francisco"],
    }
    as_dict = mo.ui.table(_data)
    as_dict
    return (as_dict,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(as_dict):
    as_dict.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _data = [1, 2, "hello", False]
    as_primitives = mo.ui.table(_data)
    as_primitives
    return (as_primitives,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(as_primitives):
    as_primitives.value
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""# 🐼 Pandas""")
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## mo.ui.dataframe""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    dataframe = mo.ui.dataframe(cars)
    dataframe
    return (dataframe,)

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## mo.ui.table""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dataframe, mo):
    mo.ui.table(dataframe.value, selection=None)
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## .value""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dataframe):
    dataframe.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dataframe):
    dataframe.value["Cylinders"]
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## mo.ui.data_explorer""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pl_dataframe):
    mo.ui.data_explorer(pl_dataframe)
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""# 🐻‍❄️ Polars""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""## mo.ui.dataframe""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pl_dataframe):
    pl_dataframe_prime = mo.ui.dataframe(pl_dataframe)
    pl_dataframe_prime
    return (pl_dataframe_prime,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pl_dataframe_prime):
    pl_dataframe_prime.value
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## mo.ui.table""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo, pl):
    pl_dataframe = pl.DataFrame(cars)
    mo.ui.table(pl_dataframe, selection=None)
    return (pl_dataframe,)

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## mo.ui.data_explorer""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pl_dataframe):
    mo.ui.data_explorer(pl_dataframe)
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""# 🏹 Arrow""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo, pa):
    arrow_table = pa.Table.from_pandas(cars)
    mo.accordion({"Details": mo.plain_text(arrow_table)})
    return (arrow_table,)

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## mo.ui.table""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(arrow_table, mo):
    arrow_table_el = mo.ui.table(arrow_table)
    arrow_table_el
    return (arrow_table_el,)

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## .value""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(arrow_table_el):
    arrow_table_el.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(arrow_table, mo):
    mo.ui.data_explorer(arrow_table)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        rf"""
        # 💽 Dataframe protocol
        > See the [API](https://data-apis.org/dataframe-protocol/latest/API.html)
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import dask.dataframe as dd
    import requests

    dask_df = dd.read_csv(
        "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"
    )
    dask_df
    return dask_df, dd, requests

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import ibis

    ibis.options.interactive = True

    ibis_data = ibis.read_csv(
        "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/penguins.csv",
        table_name="penguins",
    )
    ibis_data
    return ibis, ibis_data

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(rf"## mo.ui.table")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis_data, mo):
    ibis_penguins = mo.ui.table(ibis_data)
    ibis_penguins
    return (ibis_penguins,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis_penguins):
    ibis_penguins.value
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(rf"## mo.ui.data_explorer")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis_data, mo):
    mo.ui.data_explorer(ibis_data)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import polars as pl
    import pyarrow as pa
    import vega_datasets
    import altair as alt

    cars = vega_datasets.data.cars()
    return alt, cars, mo, pa, pd, pl, vega_datasets

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    _df = mo.sql(
        f"""
        SELECT * FROM cars WHERE Cylinders > 6;
        """
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* datasources
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.datasources
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/datasources.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "vega-datasets",
#     "marimo",
#     "polars",
#     "pyarrow",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.13"
#+BEGIN_SRC python
__generated_with = "0.8.13"

#+END_SRC
** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    import pandas as pd
    return data, mo, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    editable_table = pd.DataFrame({"a": [2, 2, 12], "b": [2, 5, 6]})
    return editable_table,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df_with_list = pd.DataFrame([{"a": [1, 2, 3]}])
    return df_with_list,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    options = data.list_datasets()
    dropdown = mo.ui.dropdown(options)
    dropdown
    return dropdown, options

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, dropdown, mo):
    mo.stop(not dropdown.value)
    df = data.__call__(dropdown.value)
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    import polars as pl

    polars_df = pl.DataFrame(df)
    return pl, polars_df

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    import pyarrow as pa

    pyarrow_df = pa.Table.from_pandas(df)
    return pa, pyarrow_df

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.table(polars_df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pyarrow_df):
    mo.ui.table(pyarrow_df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    _df = mo.sql(
        f"""
        SELECT * FROM polars_df
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.table({"a": [2, 2, 12], "b": [2, 5, 6]})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.plain(polars_df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    date_range = pd.date_range(start="2023-01-01", periods=10, freq="D")
    date_indexed_df = pd.DataFrame({"Data": range(10)}, index=date_range)
    date_indexed_df
    return date_indexed_df, date_range

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* dates
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.dates
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/dates.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.7"
#+BEGIN_SRC python
__generated_with = "0.8.7"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    import datetime

    start_date = mo.ui.date(
        label="Start date",
        start=datetime.date(2020, 1, 1),
        stop=datetime.date(2020, 12, 31),
    )
    end_date = mo.ui.date(
        label="End date",
        start=datetime.date(2020, 1, 1),
        stop=datetime.date(2020, 12, 31),
    )
    return datetime, end_date, start_date

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(end_date, mo, start_date):
    mo.hstack(
        [
            mo.hstack([start_date, "➡️", end_date]).left(),
            mo.md(f"From {start_date.value} to {end_date.value}"),
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(datetime, mo):
    start_datetime = mo.ui.datetime(
        label="Start datetime",
        start=datetime.datetime(2021, 1, 1),
        stop=datetime.datetime(2021, 12, 31),
    )
    end_datetime = mo.ui.datetime(
        label="End datetime",
        start=datetime.datetime(2021, 1, 1),
        stop=datetime.datetime(2021, 12, 31),
    )
    return end_datetime, start_datetime

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(end_datetime, mo, start_datetime):
    mo.hstack(
        [
            mo.hstack([start_datetime, "➡️", end_datetime]).left(),
            mo.md(f"From {start_datetime.value} to {end_datetime.value}"),
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(datetime, mo):
    date_range_input = mo.ui.date_range(
        label="Date_range",
        start=datetime.date(2021, 1, 1),
        stop=datetime.date(2021, 12, 31),
    )
    return date_range_input,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(date_range_input, mo):
    mo.hstack([date_range_input, date_range_input.value])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _date = mo.ui.date(label="Input")
    _datetime = mo.ui.datetime(label="Input")
    _date_range = mo.ui.date_range(label="Input")
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* debounce
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.debounce
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/debounce.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.3"
#+BEGIN_SRC python
__generated_with = "0.1.3"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    slider = mo.ui.slider(1, 10, label="Slider")
    debounced_slider = mo.ui.slider(1, 10, debounce=True, label="Debounced Slider")

    number = mo.ui.number(1, 10, label="Number")
    debounced_number = mo.ui.number(1, 10, debounce=True, label="Debounced Number")
    return debounced_number, debounced_slider, number, slider

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(debounced_number, debounced_slider, mo, number, slider):
    mo.md(f"""
        Controls:

        {slider}

        {debounced_slider}

        {number}

        {debounced_number}
    """)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(debounced_number, debounced_slider, mo, number, slider):
    # Values
    mo.md(f"""    
        slider: {slider.value}

        debounced slider: {debounced_slider.value}

        number: {number.value}

        debounced number: {debounced_number.value}
    """)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(debounced_number, debounced_slider, mo, number, slider):
    mo.md(f"""
        Controls and Values:

        {slider} -> {slider.value}

        {debounced_slider} -> {debounced_slider.value}

        {number} -> {number.value}

        {debounced_number} -> {debounced_number.value}
    """)
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* debounce_input
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.debounce_input
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/debounce_input.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.8.15"
#+BEGIN_SRC python
__generated_with = "0.8.15"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""[Debounce mo.ui.text and mo.ui.text_area #2218](https://github.com/marimo-team/marimo/issues/2218)""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(debounce, debounce_options, mo):
    name_input = mo.ui.text(
        label="Enter your name for the greeting of a lifetime:", debounce=debounce
    )
    mo.vstack([debounce_options, name_input, name_input])
    return name_input,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(name_input):
    if len(name_input.value) > 0:
        print(f"Hello {name_input.value}!")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(debounce, debounce_options, mo):
    story_input = mo.ui.text_area(
        label="Now tell me a story from your childhood:", debounce=debounce
    )
    mo.vstack([debounce_options, mo.hstack([story_input, story_input])])
    return story_input,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(story_input):
    if (len(story_input.value) > 0):
        print(story_input.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    debounce_options = mo.ui.dropdown(
        label="Choose debounce option",
        options=["True", "500", "1000", "False"],
        value="True",
    )
    return debounce_options,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(debounce_options):
    debounce = debounce_options.value
    debounce = (
        int(debounce) if debounce != "True" and debounce != "False" else debounce
    )
    debounce = debounce == "True" if isinstance(debounce, str) else debounce
    return debounce,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* df_index
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.df_index
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/df_index.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.9.15"
#+BEGIN_SRC python
__generated_with = "0.9.15"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import numpy as np
    return mo, np, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np):
    data = np.random.randn(100, 2)
    columns = ["A", "B"]
    return columns, data

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, data, pd):
    df_no_index = pd.DataFrame(data, columns=columns)
    df_no_index
    return (df_no_index,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, data, pd):
    _dates = pd.date_range(start="2023-01-01", periods=100, freq="D")
    df_date_index = pd.DataFrame(data, index=_dates, columns=columns)
    df_date_index
    return (df_date_index,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, data, pd):
    _dates = pd.date_range(start="2023-01-01", periods=100, freq="D")
    df_date_index_with_name = pd.DataFrame(
        data, index=pd.DatetimeIndex(_dates, name="date"), columns=columns
    )
    df_date_index_with_name
    return (df_date_index_with_name,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, data, pd):
    _dates = pd.date_range(start="2023-01-01", periods=100, freq="D")
    df_category_index = pd.DataFrame(
        data, index=pd.CategoricalIndex(_dates), columns=columns
    )
    df_category_index
    return (df_category_index,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, data, pd):
    index = pd.MultiIndex.from_tuples(
        [(i, j) for i in range(5) for j in range(2)], names=["Level1", "Level2"]
    )
    df_multi_index = pd.DataFrame(data[:10], index=index, columns=columns)
    df_multi_index
    return df_multi_index, index

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* doctests
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.doctests
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/doctests.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.8.17"
#+BEGIN_SRC python
__generated_with = "0.8.17"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    def euclid_mcd(a: int, b: int) -> int:
        """Return the MCD between positive a, b.

        >>> euclid_mcd(42, 24)
        6
        >>> euclid_mcd(24, 42)
        6
        >>> euclid_mcd(42, 42)
        42
        """
        assert a > 0
        assert b > 0
        if a < b:
            a, b = b, a
        if (a != b):
            r = a - b
            return euclid_mcd(b, r)
        return a
    return euclid_mcd,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(euclid_mcd):
    euclid_mcd(42, 42)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    def bad_multiply_by_2(a: int) -> int:
        """Multiply a by 2 and return the result.

        >>> bad_multiply_by_2(2)
        4
        >>> bad_multiply_by_2(3)
        6
        """
        return a + 2
    return bad_multiply_by_2,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(bad_multiply_by_2, euclid_mcd, mo):
    # Including these make this doctest reactive
    euclid_mcd
    bad_multiply_by_2

    import doctest
    failures, success = doctest.testmod(verbose=True)
    mo.md(f"Success: {success}, Failures: {failures}")
    return doctest, failures, success

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* editable_df
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.editable_df
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/editable_df.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.9.9"
#+BEGIN_SRC python
__generated_with = "0.9.9"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    import pandas as pd
    import marimo as mo

    params = [
        "Weight",
        "Torque",
        "Width",
        "Height",
        "Efficiency",
        "Power",
        "Displacement",
    ]
    return mo, params, pd, pl

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(params, pd, pl):
    row_oriented = [
        dict(Model=i, **{param: 0 for param in params}) for i in range(1, 5)
    ]
    column_oriented = {param: [0 for _ in range(1, 5)] for param in params}
    polars_df = pl.DataFrame(row_oriented)
    pandas_df = pd.DataFrame(row_oriented)
    return column_oriented, pandas_df, polars_df, row_oriented

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Editing different inputs (dicts, lists, polars, pandas)""")
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(column_oriented, mo, pandas_df, polars_df, row_oriented):
    df = mo.ui.dropdown(
        {
            "polars": polars_df,
            "pandas": pandas_df,
            "row": row_oriented,
            "column": column_oriented,
        },
        value="polars",
        label="Table",
    )
    df
    return (df,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    edited = mo.ui.experimental_data_editor(df.value)
    edited
    return (edited,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(edited, flatten_edits, mo):
    mo.vstack(
        [
            mo.ui.table(edited.value, selection=None),
            flatten_edits(edited._edits["edits"]),
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    def flatten_edits(edits):
        return [
            f"{edit['rowIdx']}.{edit['columnId']} -> {edit['value']}"
            for edit in edits
        ]
    return (flatten_edits,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Editing different data types""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    import datetime

    large_text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

    varying_data = {
        "strings": ["a", "b", "c", large_text],
        "numbers": [1, 2, 3, 4],
        "bools": [True, False, True, False],
        "timestamps": [pd.Timestamp("2021-01-01") for _ in range(4)],
        "dates": [datetime.date(2021, 1, 1) for _ in range(4)],
        "datetimes": [datetime.datetime(2021, 1, 1, 1, 1, 1) for _ in range(4)],
        "duration": [datetime.timedelta(days=2, seconds=13500) for _ in range(4)],
        "none": [None for _ in range(4)],
        "lists": [[1, 2], [3, 4], [5, 6], [7, 8]],
    }
    return datetime, large_text, varying_data

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pl, varying_data):
    pl.DataFrame(varying_data).schema
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pl, varying_data):
    edited_df = mo.ui.experimental_data_editor(pl.DataFrame(varying_data))
    edited_df
    return (edited_df,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(edited_df):
    edited_df.value
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* errors
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.errors
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/errors.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.0"
#+BEGIN_SRC python
__generated_with = "0.1.0"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(y):
    x = y
    return x,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(z):
    y = z
    return y,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x):
    z = x
    c = 0
    return c, z

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(b):
    a = 0
    del b
    c = 0
    return a, c

#+END_SRC
** Call app._unparsable_cell(     r"""     a =     """,     name="__" )
#+BEGIN_SRC python
app._unparsable_cell(
    r"""
    a =
    """,
    name="__"
)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    a = 1
    b = 0
    c = 0
    return a, b, c

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* forms
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.forms
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/forms.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.79"
#+BEGIN_SRC python
__generated_with = "0.1.79"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import random

    return mo, random

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Basic form")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    clear_on_submit_input = mo.ui.checkbox(True, label="Clear on submit")
    bordered_input = mo.ui.checkbox(False, label="Bordered")
    show_clear_button_input = mo.ui.checkbox(False, label="Show clear button")
    mo.hstack([clear_on_submit_input, bordered_input, show_clear_button_input])
    return bordered_input, clear_on_submit_input, show_clear_button_input

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(bordered_input, clear_on_submit_input, mo, show_clear_button_input):
    form_1 = mo.ui.text_area(
        label="Form label", full_width=True, placeholder="Type..."
    ).form(
        submit_button_label="Go!",
        clear_on_submit=clear_on_submit_input.value,
        submit_button_tooltip="Click me",
        bordered=bordered_input.value,
        show_clear_button=show_clear_button_input.value,
    )
    form_1
    return (form_1,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(form_1, mo, random):
    random_number = random.randint(1, 100)
    mo.vstack(
        [
            mo.md("## Basic form value"),
            mo.md(
                f"Random number (to monitor re-renders) **{random_number}**"
            ),
            form_1.value,
        ]
    )
    return (random_number,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
    -------

    # Validating forms"""
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    years_experience = mo.ui.slider(1, 10, value=3)
    fn = mo.ui.text()
    ln = mo.ui.text()

    def validate(value):
        if "first_name" not in value or len(value["first_name"]) == 0:
            return "Missing first name"
        if "last_name" not in value or len(value["last_name"]) == 0:
            return "Missing last name"
        if value["years_experience"] < 4:
            return "Must have at least 4 years experience"

    form_2 = (
        mo.md(
            """
        First name: {first_name}

        Last name: {last_name}

        Years Experience: {years_experience}
        """
        )
        .batch(
            first_name=fn,
            last_name=ln,
            years_experience=years_experience,
        )
        .form(
            bordered=False,
            validate=validate,
            show_clear_button=True,
        )
    )

    form_2
    return fn, form_2, ln, validate, years_experience

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(form_2, mo, random):
    _random_number = random.randint(1, 100)
    mo.vstack(
        [
            mo.md("### Validate form value"),
            mo.md(f"Random number **{_random_number}**"),
            form_2.value,
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
    ------
    # Dictionary"""
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    dict = mo.ui.dictionary(
        {
            "slider": mo.ui.slider(1, 10),
            "text": mo.ui.text("type something!"),
            "array": mo.ui.array(
                [
                    mo.ui.button(value=0, on_click=lambda v: v + 1)
                    for _ in range(3)
                ],
                label="buttons",
            ),
        }
    )
    dict
    return (dict,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dict, mo):
    mo.vstack(
        [
            mo.md("## Dictionary Value"),
            dict.value,
        ]
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* from_series
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.from_series
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/from_series.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "marimo",
#     "polars",
# ]
# ///
import marimo

#+END_SRC
** Assignment __generated_with = "0.6.23"
#+BEGIN_SRC python
__generated_with = "0.6.23"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    return data, mo

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    import polars as pl
    polars_df = pl.from_pandas(data.cars())
    return pl, polars_df

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.slider.from_series(polars_df["Cylinders"])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.number.from_series(polars_df["Cylinders"])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.radio.from_series(polars_df["Origin"])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.dropdown.from_series(polars_df["Origin"])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.multiselect.from_series(polars_df["Origin"])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, polars_df):
    mo.ui.date.from_series(polars_df["Year"])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    pandas_df = data.cars()
    [
        mo.ui.slider.from_series(pandas_df["Cylinders"]),
        mo.ui.number.from_series(pandas_df["Cylinders"]),
        mo.ui.radio.from_series(pandas_df["Origin"]),
        mo.ui.dropdown.from_series(pandas_df["Origin"]),
        mo.ui.multiselect.from_series(pandas_df["Origin"]),
        mo.ui.date.from_series(pandas_df["Year"])
    ]
    return pandas_df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* full_width
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.full_width
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/full_width.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.22"
#+BEGIN_SRC python
__generated_with = "0.1.22"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    checkbox = mo.ui.checkbox(label="Full width")
    checkbox.callout()
    return checkbox,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.text(label="Text", full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.text_area(label="Text area", full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.number(0, 10, label="Number", full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.dropdown(label="Dropdown", options=["A", "B", "C"], full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.multiselect(label="Multiselect", options=["A", "B", "C"], full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.date(label="Date", full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.ui.button(label="Button", full_width=checkbox.value)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    # Is this the behavior we want?
    mo.hstack([
        mo.ui.text(label="Input A", full_width=checkbox.value),
        mo.ui.text(label="Input B", full_width=checkbox.value)
    ])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkbox, mo):
    mo.vstack([
        mo.ui.text(label="Input A", full_width=checkbox.value),
        mo.ui.text(label="Input B", full_width=checkbox.value)
    ])
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* grid
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.grid
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/grid.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App(layout_file="layouts/grid.grid.json")
#+BEGIN_SRC python
app = marimo.App(layout_file="layouts/grid.grid.json")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    align = mo.ui.dropdown(
        label="Align", options=["start", "end", "center", "stretch"]
    )
    justify = mo.ui.dropdown(
        label="Justify",
        options=["start", "center", "end", "space-between", "space-around"],
    )
    gap = mo.ui.number(label="Gap", start=0, stop=100, value=1)
    size = mo.ui.slider(label="Size", start=60, stop=500)
    wrap = mo.ui.checkbox(label="Wrap")

    mo.hstack([align, justify, gap, size, wrap], gap=0.25)
    return align, gap, justify, size, wrap

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Horizontal Stack: `hstack`""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(align, boxes, gap, justify, mo, wrap):
    mo.hstack(
        boxes,
        align=align.value,
        justify=justify.value,
        gap=gap.value,
        wrap=wrap.value,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Vertical Stack: `vstack`""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(align, boxes, gap, mo):
    mo.vstack(
        boxes,
        align=align.value,
        gap=gap.value,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, size):
    def create_box(num):
        box_size = size.value + num * 10
        return mo.Html(
            f"<div style='min-width: {box_size}px; min-height: {box_size}px; background-color: orange; text-align: center; line-height: {box_size}px'>{str(num)}</div>"
        )


    boxes = [create_box(i) for i in range(1, 5)]
    return boxes, create_box

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* ibis_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.ibis_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/ibis_example.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.7"
#+BEGIN_SRC python
__generated_with = "0.8.7"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import ibis
    return ibis, mo

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis):
    df = ibis.read_csv(
        "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/penguins.csv",
        table_name="penguins",
    )
    df
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    # Print Ibis data in a pretty table
    df.to_polars()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    # Transform using the python API
    _res = df.group_by("species", "island").agg(count=df.count()).order_by("count")
    df.to_polars()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    # Transform using SQL
    _res = df.sql(
        "SELECT species, island, count(*) AS count FROM penguins GROUP BY 1, 2"
    )
    _res.to_polars()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    # Transform using the ui.dataframe GUI
    mo.ui.dataframe(df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis):
    # Unnest
    ibis.memtable(
        {
            "x": [[0, 1, 2], [], [], [3, 4]],
            "y": [["a", "b", "c"], [], [], ["d", "e"]],
        }
    ).unnest("x").to_polars()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis):
    # Unpack
    ibis.memtable({"A": [{"foo": 1, "bar": "hello"}], "B": [1]}).unpack(
        "A"
    ).to_polars()
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* icons
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.icons
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/icons.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.9.7"
#+BEGIN_SRC python
__generated_with = "0.9.7"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""::lucide:alarm-clock::""")
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.hstack(
        [
            mo.md("Color"),
            mo.icon("lucide:leaf", size=20),
            mo.icon("lucide:leaf", size=20, color="blue"),
            mo.icon("lucide:leaf", size=20, color="tomato"),
            mo.icon("lucide:leaf", size=20, color="green"),
            mo.icon("lucide:leaf", size=20, color="navy"),
        ],
        justify="start",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.hstack(
        [
            mo.md("Flip"),
            mo.icon("lucide:leaf", size=20),
            mo.icon("lucide:leaf", size=20, flip="vertical"),
            mo.icon("lucide:leaf", size=20, flip="horizontal"),
            mo.icon("lucide:leaf", size=20, flip="vertical,horizontal"),
        ],
        justify="start",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.hstack(
        [
            mo.md("Rotate"),
            mo.icon("lucide:leaf", size=20),
            mo.icon("lucide:leaf", size=20, rotate="90deg"),
            mo.icon("lucide:leaf", size=20, rotate="180deg"),
            mo.icon("lucide:leaf", size=20, rotate="270deg"),
        ],
        justify="start",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.hstack(
        [
            mo.md("In buttons"),
            mo.ui.button(
                label=f"{mo.icon('material-symbols:rocket-launch')} Launch"
            ),
            mo.ui.button(label=f"::material-symbols:rocket-launch:: Launch"),
            mo.ui.button(label=f"Clear ::material-symbols:close-rounded::"),
            # Left and right
            mo.ui.button(
                label=f"::material-symbols:download:: Download ::material-symbols:csv::"
            ),
        ],
        justify="start",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        f"""
    ## {mo.icon('material-symbols:edit')} Icons in markdown
    """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.tabs(
        {
            f"{mo.icon('material-symbols:group')} Overview": mo.md("Tab 1"),
            f"{mo.icon('material-symbols:group-add')} Add": mo.md("Tab 2"),
            f"{mo.icon('material-symbols:group-remove')} Remove": mo.md("Tab 3"),
        }
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* import_named_cells
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.import_named_cells
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/import_named_cells.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from named_cells import display_slider, display_element
    return display_element, display_slider

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""**A cell that creates and shows a slider**""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(display_slider):
    slider_output, slider_defs = display_slider.run()
    slider_output
    return slider_defs, slider_output

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""_Notice that set-ui-element value requests make it into the defs_""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(slider_defs):
    slider_defs
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(slider_defs):
    slider_defs["slider"].value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""**A cell that shows a parametrizable UI element**""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(display_element, mo):
    text = mo.ui.text(placeholder="custom input")
    _o, _ = display_element.run(element=text)
    _o
    return text,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(text):
    text.value
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* initial_table
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.initial_table
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/initial_table.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.8"
#+BEGIN_SRC python
__generated_with = "0.8.8"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd

    sample_df = pd.DataFrame(
        {
            "Name": ["Alice", "Bob", "Charlie"],
            "Age": [25, 30, 35],
            "City": ["New York", "Los Angeles", "Chicago"],
        }
    )
    return pd, sample_df

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, sample_df):
    import time

    mo.output.replace(sample_df)
    time.sleep(5)
    return time,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* inputs
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.inputs
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/inputs.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.2.8"
#+BEGIN_SRC python
__generated_with = "0.2.8"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    disabled = mo.ui.switch(label="Disabled")
    mo.hstack([disabled])
    return disabled,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(disabled, mo):
    mo.vstack(
        [
            mo.ui.text(label="Your name", disabled=disabled.value),
            mo.ui.text(
                label="Your tagline", max_length=30, disabled=disabled.value
            ),
            mo.ui.text_area(
                label="Your bio", max_length=180, disabled=disabled.value
            ),
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    options = ["red", "green", "blue"]

    mo.vstack(
        [
            mo.ui.dropdown(options, label="Dropdown"),
            mo.ui.multiselect(options, label="Multi-select"),
        ]
    )
    return options,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, options):
    mo.ui.radio(options, label="Radio buttons")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, options):
    mo.ui.radio(options, label="Radio buttons", inline=True)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    slider = mo.ui.slider(0, 10, label="Horizontal slider")
    vslider = mo.ui.slider(0, 10, orientation="vertical", label="Vertical slider")
    mo.hstack([slider, vslider])
    return slider, vslider

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _slider = mo.ui.slider(0, 100, label="Horizontal slider", show_value=True)
    _vslider = mo.ui.slider(
        0, 100, orientation="vertical", label="Vertical slider", show_value=True
    )
    mo.hstack([_slider, _vslider])
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* iplot
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.iplot
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/iplot.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.18"
#+BEGIN_SRC python
__generated_with = "0.1.18"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import numpy as np
    import matplotlib.pyplot as plt
    return mo, np, plt

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, np, plt):
    def interactive_plot(seed = 42, size=100):
        # Generating random data
        np.random.seed(seed)
        x = np.random.randint(0, 100, size=size)
        y = np.random.randint(0, 100, size=size)
        z = np.random.randint(0, 100, size=size)

        # Creating a 3D scatter plot
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(x, y, z, c='r', marker='o')

        ax.set_xlabel('X Label')
        ax.set_ylabel('Y Label')
        ax.set_zlabel('Z Label')

        return mo.mpl.interactive(fig)
    return interactive_plot,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(interactive_plot):
    interactive_plot(size=10)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(interactive_plot):
    b = interactive_plot(size=20)
    b
    return b,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plt):
    plt.plot([1, 2])
    mo.mpl.interactive(plt.gca())
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(plt):
    plt.plot([3, 4])
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* latex
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.latex
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/latex.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.2.1"
#+BEGIN_SRC python
__generated_with = "0.2.1"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        # Incrementing functions
        Bug from [#704](https://github.com/marimo-team/marimo/discussions/704)
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        \begin{align}
            B' &=-\nabla \times E,\\
            E' &=\nabla \times B - 4\pi j\\
            e^{\pi i} + 1 = 0
        \end{align}
        """
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* layout
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.layout
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/layout.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    align = mo.ui.dropdown(
        label="Align", options=["start", "end", "center", "stretch"]
    )
    justify = mo.ui.dropdown(
        label="Justify",
        options=["start", "center", "end", "space-between", "space-around"],
    )
    gap = mo.ui.number(label="Gap", start=0, stop=100, value=1)
    size = mo.ui.slider(label="Size", start=60, stop=500)
    wrap = mo.ui.checkbox(label="Wrap")

    mo.hstack([align, justify, gap, size, wrap], gap=0.25)
    return align, gap, justify, size, wrap

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Horizontal Stack: `hstack`""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(align, boxes, gap, justify, mo, wrap):
    mo.hstack(
        boxes,
        align=align.value,
        justify=justify.value,
        gap=gap.value,
        wrap=wrap.value,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Vertical Stack: `vstack`""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(align, boxes, gap, mo):
    mo.vstack(
        boxes,
        align=align.value,
        gap=gap.value,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, size):
    def create_box(num):
        box_size = size.value + num * 10
        return mo.Html(
            f"<div style='min-width: {box_size}px; min-height: {box_size}px; background-color: orange; text-align: center; line-height: {box_size}px'>{str(num)}</div>"
        )


    boxes = [create_box(i) for i in range(1, 5)]
    return boxes, create_box

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* lazy
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.lazy
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/lazy.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.5.2"
#+BEGIN_SRC python
__generated_with = "0.5.2"

#+END_SRC
** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    slider = mo.ui.slider(0, 10)
    return slider,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(generate_number, mo, slider, table):
    tabs = mo.ui.tabs(
        {
            "First": [slider, slider.value],
            "Second": mo.lazy(table),
            "Third": mo.lazy(generate_number, show_loading_indicator=True),
        }
    )
    tabs
    return tabs,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(generate_number, mo, slider, table):
    auto_lazy_tabs = mo.ui.tabs(
        {
            "First": [slider, slider.value],
            "Second": table,
            "Third": generate_number,
        },
        lazy=True,
    )
    auto_lazy_tabs
    return auto_lazy_tabs,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(generate_number, mo):
    mo.accordion({"Open me": mo.lazy(generate_number, show_loading_indicator=True)})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(generate_number, mo):
    mo.accordion({"Open me": generate_number}, lazy=True)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(generate_number_async, mo):
    mo.accordion({"Lazy async function": mo.lazy(generate_number_async, show_loading_indicator=True)})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(random):
    import asyncio
    async def generate_number_async():
        print("Loading...")
        await asyncio.sleep(1)
        print("Loaded!")
        num = random.randint(0, 100)
        return num
    return asyncio, generate_number_async

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(random, time):
    def generate_number():
        print("Loading...")
        time.sleep(1)
        print("Loaded!")
        num = random.randint(0, 100)
        return num
    return generate_number,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import random
    import time
    import vega_datasets

    cars = vega_datasets.data.cars()
    table = mo.ui.table(cars)
    return cars, mo, pd, random, table, time, vega_datasets

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* lens_test
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.lens_test
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/lens_test.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.85"
#+BEGIN_SRC python
__generated_with = "0.1.85"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    from functools import partial

    data = []


    def append(v, i):
        del v
        data.append(i)


    dict_template = {
        str(i): mo.ui.button(
            value=i,
            label=str(i),
            on_click=lambda v: v + 1,
            on_change=partial(append, i=i),
        )
        for i in range(3)
    }


    x = mo.ui.dictionary(
        {
            str(i): mo.ui.button(
                value=i,
                label=str(i),
                on_click=lambda v: v + 1,
                on_change=partial(append, i=i),
            )
            for i in range(3)
        }
    )
    # x
    return append, data, dict_template, partial, x

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, x):
    mo.ui.table([{"data": "foo", "button": btn} for btn in x.values()])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, x):
    # x.value counts how many times each button has been clicked
    # data is a log of button clicks
    x.value, data
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dict_template, mo):
    composite = mo.ui.array(
        [
            mo.ui.slider(1, 10),
            mo.ui.array([mo.ui.checkbox(False), mo.ui.slider(10, 20)]),
            mo.ui.dictionary(dict_template),
        ]
    )
    return composite,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    10
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(composite):
    composite[0], composite[1], composite[2]
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(composite, mo):
    mo.accordion({"Push a button": composite[2]["0"]})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(composite):
    composite.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    def change_printer(v):
        print("changed ", v)
    return change_printer,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(checkboxes):
    [_item for _item in checkboxes]
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(change_printer, mo):
    checkboxes = mo.ui.array(
        [mo.ui.checkbox(False, on_change=change_printer) for i in range(5)]
    )
    return checkboxes,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* markdown_quotes
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.markdown_quotes
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/markdown_quotes.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.7.9"
#+BEGIN_SRC python
__generated_with = "0.7.9"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""Markdown""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""Markdown with an escaped \"""quote\"""!!""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        Markdown with a trailing "quote"
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        "Markdown" with a leading quote
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""Markdown with a trailing 'single quote'""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""'Markdown' with a leading single quote""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""Markdown with an triple-single '''quote'''!!""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* markdown_size
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.markdown_size
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/markdown_size.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.7.12"
#+BEGIN_SRC python
__generated_with = "0.7.12"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from vega_datasets import data

    cars = data.cars()
    return cars, data

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    size = mo.ui.slider(
        steps=[0, 1, 2, 3],
        value=1,
        label="Size",
    )
    sizes = ["sm", "base", "lg", "2xl"]
    return size, sizes

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, size, sizes):
    mo.md(f"{size} **{sizes[size.value]}**")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    mo.md(
        f"""
    # kitchen sink

    ## table

    | col 1 | col 2 | col 3 |
    | --- | --- | --- |
    | 1 | 2 | 3 |
    | 4 | 5 | 6 |

    {mo.as_html(mo.plain(cars))}


    ## code

    ```python
    print("hello world")
    ```


    ## math

    $$
    a^2 + b^2 = c^2
    $$


    ## image

    ![alt text](https://picsum.photos/200/300)

    ## bullets

    - item 1
    - item 2


    ## ordered list

    1. item 1
    2. item 2


    ## blockquote

    > blockquote


    ## link

    [link](https://google.com)

    ## inline code

    `inline code`
    """,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    {
        "string": "hello",
        "int": 10,
        "float": 10.5,
    }
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* md
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.md
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/md.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Tables""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        First Header  | Second Header
        ------------- | -------------
        Content Cell  | Content Cell
        $f(x)$        | Content Cell
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        | Tables        | Are           | Cool  |
        | ------------- |:-------------:| -----:|
        | col 3 is      | right-aligned | $1600 |
        | col 2 is      | centered      |   $12 |
        | zebra stripes | are neat      |    $1 |
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Footnotes""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        Here's a short footnote,[^1] and here's a longer one.[^longnote]

        [^1]: This is a short footnote.

        [^longnote]: This is a longer footnote with paragraphs, and code.

            Indent paragraphs to include them in the footnote.

            `{ my code }` add some code, if you like.

            Add as many paragraphs as you need.
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# External links""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        This is [an example](http://example.com/ "Title") inline link.

        [This link](http://example.net/) has no title attribute.
        """
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* media
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.media
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/media.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.33"
#+BEGIN_SRC python
__generated_with = "0.1.33"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import requests
    from io import BytesIO
    import base64
    return BytesIO, base64, mo, requests

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mic = mo.ui.microphone(label="What is your name?")
    mic
    return mic,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mic, mo):
    mo.hstack(
        [mo.audio(mic.value), mo.download(data=mic.value, mimetype="audio/x-wav")]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    # Note, chrome does not support cross-origin download, so this wont auto download until we proxy the download through the backend
    _src = "https://samplelib.com/lib/preview/mp3/sample-3s.mp3"
    mo.hstack(
        [
            mo.audio(src=_src),
            mo.download(data=_src, label=""),
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(BytesIO, base64, mo, requests):
    _src = (
        "https://images.pexels.com/photos/86596/owl-bird-eyes-eagle-owl-86596.jpeg"
    )
    _response = requests.get(_src)
    image_data = BytesIO(_response.content)
    base64str = (
        f"data:image/jpeg;base64,{base64.b64encode(_response.content).decode()}"
    )

    mo.vstack(
        [
            mo.image(src=_src, rounded=True, height=100),
            # Note, chrome does not support cross-origin download, so this wont auto download until we proxy the download through the backend
            mo.download(data=_src, label="Download via URL"),
            mo.image(src=image_data, rounded=True, height=100),
            mo.download(
                data=image_data,
                label="Download via BytesIO",
                mimetype="image/jpeg",
            ),
            mo.image(src=base64str, rounded=True, height=100),
            mo.download(
                data=base64str,
                label="Download via bytes",
                mimetype="image/jpeg",
            ),
        ]
    )
    return base64str, image_data

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    import os

    with open(os.path.realpath("docs/_static/array.png"), "rb") as f:
        _image = mo.image(src=f)
        _download = mo.download(
            data=f,
            label="Download local file",
        )

    mo.hstack([_image, _download])
    return f, os

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.video(
        src="https://v3.cdnpk.net/videvo_files/video/free/2013-08/large_watermarked/hd0992_preview.mp4",
        rounded=True,
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.video(
        src="https://v3.cdnpk.net/videvo_files/video/free/2013-08/large_watermarked/hd0992_preview.mp4",
        rounded=True,
        autoplay=True,
        muted=True,
        controls=False,
        width=300,
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* mimes
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.mimes
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/mimes.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "vegafusion",
#     "pandas",
#     "altair",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class HTMLMime:
        def _mime_(self):
            return (
                "text/html",
                "<h1>Hello, World!</h1>",
            )


    HTMLMime()
    return HTMLMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class SvgMime:
        def _mime_(self):
            return (
                "image/svg+xml",
                '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" /></svg>',
            )


    SvgMime()
    return SvgMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class JSONMime:
        def _mime_(self):
            return (
                "application/json",
                '{"message": "Hello, World!"}',
            )


    JSONMime()
    return JSONMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class PngMime:
        def _mime_(self):
            import matplotlib.pyplot as plt
            import io
            import base64

            # Create a figure
            fig, ax = plt.subplots()
            ax.plot([1, 2, 3, 4, 5], [1, 4, 9, 16, 25])

            # Save the plot to a BytesIO object
            buf = io.BytesIO()
            plt.savefig(buf, format="png")
            plt.close(fig)
            buf.seek(0)

            # Read as bytes
            data = buf.read()
            return ("image/png", data)


    PngMime()
    return PngMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class CSVMime:
        def _mime_(self):
            return (
                "text/csv",
                "name,age\nAlice,30\nBob,25",
            )


    CSVMime()
    return CSVMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class TextMarkdownMime:
        def _mime_(self):
            return (
                "text/markdown",
                "# Markdown Title\n\n*This text will be italic*\n\n**This text will be bold**",
            )


    TextMarkdownMime()
    return TextMarkdownMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    import pandas as pd


    class VegaLiteMime:
        def _mime_(self):
            # Create a sample dataframe
            data = pd.DataFrame({"x": range(10), "y": [x**2 for x in range(10)]})

            # Create a chart
            chart = alt.Chart(data).mark_line().encode(x="x", y="y")

            # Return the Vega-Lite specification
            # return ("application/json", chart.to_json())
            return ("application/vnd.vegalite.v5+json", chart.to_json())


    VegaLiteMime()
    return VegaLiteMime, alt, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class UnknownMime:
        def _mime_(self):
            return (
                "application/octet-stream",
                "This is a binary file without a specific format.",
            )


    UnknownMime()
    return UnknownMime,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(
    CSVMime,
    HTMLMime,
    JSONMime,
    SvgMime,
    TextMarkdownMime,
    UnknownMime,
    VegaLiteMime,
):
    class ReprMimeBundle:
        def __init__(self, *mimes):
            self.mimes = mimes

        def _repr_mimebundle_(self):
            bundle = {}
            for mime in self.mimes:
                mime_type, data = mime._mime_()
                bundle[mime_type] = data
            return bundle


    # Example usage with multiple MIME types
    ReprMimeBundle(
        VegaLiteMime(),
        HTMLMime(),
        SvgMime(),
        JSONMime(),
        CSVMime(),
        TextMarkdownMime(),
        UnknownMime(),
    )
    return ReprMimeBundle,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(HTMLMime, ReprMimeBundle):
    ReprMimeBundle(HTMLMime())
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* named_cells
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.named_cells
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/named_cells.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.2.8"
#+BEGIN_SRC python
__generated_with = "0.2.8"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function display_slider
#+BEGIN_SRC python
@app.cell
def display_slider(mo):
    slider = mo.ui.slider(1, 10)
    mo.md(f"Here is a slider: {slider}")
    return slider,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    element = mo.ui.checkbox(False)
    return element,

#+END_SRC
** @app.cell: Function display_element
#+BEGIN_SRC python
@app.cell
def display_element(element, mo):
    mo.md(f"Here is an element: {element}")
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* nav_menus
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.nav_menus
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/nav_menus.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Horizontal""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.nav_menu(
        {
            "#overview": "Overview",
            "#sales": f"{mo.icon('lucide:shopping-cart')} Sales",
            "#products": f"{mo.icon('lucide:package')} Products",
        }
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""-----""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.nav_menu(
        {
            "#overview": "Overview",
            f"{mo.icon('lucide:shopping-cart')} Sales": {
                "/sales-today": "Sales today",
                "/sales-yesterday": "Sales yesterday",
                "/sales-custom": {
                    "label": "Custom",
                    "description": "Create custom filters to query sales",
                },
            },
            f"{mo.icon('lucide:package')} Products": {
                "#products-today": "Products today",
                "#products-yesterday": "Products yesterday",
                "#products-custom": {
                    "label": "Custom",
                    "description": "Create custom filters to query products",
                },
            },
        }
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Vertical""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.nav_menu(
        {
            "#overview": "Overview",
            "#sales": f"{mo.icon('lucide:shopping-cart')} Sales",
            "#products": f"{mo.icon('lucide:package')} Products",
        },
        orientation="vertical",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""-----""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.nav_menu(
        {
            "#overview": "Overview",
            "Sales": {
                "#sales-today": "Sales today",
                "#sales-yesterday": "Sales yesterday",
                "#sales-custom": {
                    "label": "Custom",
                    "description": "Create custom filters to query sales",
                },
            },
            "Products": {
                "#products-today": "Products today",
                "#products-yesterday": "Products yesterday",
                "#products-custom": {
                    "label": "Custom",
                    "description": "Create custom filters to query products",
                },
            },
        },
        orientation="vertical",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* nb_dir
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.nb_dir
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/nb_dir.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.8.22"
#+BEGIN_SRC python
__generated_with = "0.8.22"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(__file__):
    print("__file__", __file__)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    print("mo.notebook_dir()", mo.notebook_dir())
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* no_mutating
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.no_mutating
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/no_mutating.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.6.17"
#+BEGIN_SRC python
__generated_with = "0.6.17"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    text = mo.ui.text(on_change=print)
    return text,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(text):
    text.on_change
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(text):
    text.value = ""
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(text):
    text.on_change = ""
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* outline
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.outline
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/outline.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo

    return (mo,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Heading 1")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.carousel([mo.md("# Carousel Heading")])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Heading 2 \n\n Headings between carousel and tabs are detected")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.tabs({"Tab 1": mo.md("# Tabs Heading")})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Heading 3 \n\n Headings between tabs and accordion are detected")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion({"Accordion 1": mo.md("# Accordion Heading")})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Heading 4")
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* output
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.output
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/output.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import time
    return time,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, time):
    def loop_replace():
        for i in range(5):
            mo.output.replace(mo.md(f"Loading {i}/5"))
            time.sleep(.01)

    def loop_append():
        for i in range(5):
            mo.output.append(mo.md(f"Loading {i}/5"))
            time.sleep(.01)
    return loop_append, loop_replace

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""### Replace""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(loop_replace, mo):
    loop_replace()
    mo.md("Done!")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(loop_replace, mo):
    loop_replace()
    mo.output.replace(mo.md(f"Done"))
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""### Append""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(loop_append, mo):
    loop_append()
    mo.md("Done!")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(loop_append, mo):
    loop_append()
    mo.output.append(mo.md("Done!"))
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""### Clear""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(loop_append, mo):
    loop_append()
    mo.output.append(mo.md("Done!"))
    mo.output.clear()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(loop_append, mo):
    loop_append()
    mo.output.append(mo.md("Done!"))
    mo.output.replace(None)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""### Sleep (stale)""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(time):
    time.sleep(2)
    "hello"
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.output.append(mo.md("To be replaced."))
    mo.output.replace_at_index(mo.md("Replaced at index"), 0)
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* pdb_test
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.pdb_test
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/pdb_test.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.77"
#+BEGIN_SRC python
__generated_with = "0.1.77"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    # import pdb; pdb.set_trace()
    mo.pdb.set_trace()
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* pdf
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.pdf
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/pdf.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.21"
#+BEGIN_SRC python
__generated_with = "0.1.21"

#+END_SRC
** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import requests
    import io
    return io, mo, requests

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# PDFs")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    page = mo.ui.number(1, 10, label="Starting page number")
    page
    return page,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, page):
    mo.pdf(
        src="https://arxiv.org/pdf/2104.00282.pdf",
        initial_page=page.value,
        width="100%",
        height="60vh",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(io, mo, page, requests):
    downloaded = requests.get("https://arxiv.org/pdf/2104.00282.pdf")
    # This is still performant as it does not pass the full PDF to the frontend,
    # and instead creates a VirtualFile
    pdf = mo.pdf(
        src=io.BytesIO(downloaded.content),
        initial_page=page.value,
        width="100%",
        height="60vh",
    )
    pdf
    return downloaded, pdf

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pdf):
    pdf
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* plain
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.plain
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/plain.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "marimo",
#     "polars",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.6.23"
#+BEGIN_SRC python
__generated_with = "0.6.23"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    import polars as pl
    return data, mo, pl

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, pl):
    df = pl.from_pandas(data.cars())
    df
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.plain(df)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.hstack(["hstack", mo.vstack(["vstack", df])])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.hstack(["hstack", mo.vstack(["vstack", mo.plain(df)])])
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* pyg_walker
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.pyg_walker
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/pyg_walker.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "pygwalker",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import pygwalker as pyg

    import marimo as mo
    return mo, pd, pyg

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.read_csv(
        "https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv"
    )
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo, pyg):
    walker = pyg.walk(df, kernel_computation=True)
    mo.Html(walker.to_html())
    return walker,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* pygwalker_test
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.pygwalker_test
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/pygwalker_test.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.9.14"
#+BEGIN_SRC python
__generated_with = "0.9.14"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pygwalker

    from vega_datasets import data
    return data, pygwalker

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, pygwalker):
    df = data.iris()
    pygwalker.walk(df)
    return (df,)

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* quak-demo
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.quak-demo
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/quak-demo.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "polars==1.5.0",
#     "quak==0.1.8",
#     "vega-datasets==0.9.0",
# ]
# ///

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.2"
#+BEGIN_SRC python
__generated_with = "0.8.2"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl
    import quak
    from vega_datasets import data
    return data, mo, pl, quak

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    df = data.cars()
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo, quak):
    qwidget = quak.Widget(df)
    w = mo.ui.anywidget(qwidget)
    w
    return qwidget, w

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # w.value
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* query_params
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.query_params
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/query_params.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    query_params = mo.query_params()
    return query_params,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, query_params):
    # In another cell
    search = mo.ui.text(
        value=query_params["search"] or "",
        on_change=lambda v: query_params.set("search", v),
    )
    search
    return search,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    toggle = mo.ui.switch(label="Toggle me")
    toggle
    return toggle,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(query_params, toggle):
    # change the value of a query param, and watch the next cell run automatically
    query_params["has_run"] = toggle.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    new_value = mo.ui.text(label="Text to add")
    return new_value,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, new_value, query_params):
    append_button = mo.ui.button(
        label="Add to query param",
        on_click=lambda _: query_params.append("list", new_value.value),
    )
    replace_button = mo.ui.button(
        label="Replace in query param",
        on_click=lambda _: query_params.set("list", new_value.value),
    )
    mo.hstack([new_value, append_button, replace_button])
    return append_button, replace_button

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, query_params):
    items = [
        {"key": key, "value": str(value)}
        for key, value in query_params.to_dict().items()
    ]
    mo.ui.table(items, selection=None, label="Query params")
    return items,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""You can also initialized with query params. Open this URL [/?foo=1&bar=2&bar=3&baz=4](/?foo=1&bar=2&bar=3&baz=4) and restart the kernel""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import random
    return mo, random

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* raise_error_on_output
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.raise_error_on_output
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/raise_error_on_output.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.0"
#+BEGIN_SRC python
__generated_with = "0.1.0"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class Mischief:
        def _mime_(self):
            raise ValueError("error!")
    return Mischief,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(Mischief):
    mischief = Mischief()
    return mischief,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mischief):
    mischief
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* raise_exception_on_change
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.raise_exception_on_change
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/raise_exception_on_change.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.5"
#+BEGIN_SRC python
__generated_with = "0.1.5"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    def error(v):
        raise ValueError(str(v))
    return error,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(error, mo):
    s = mo.ui.slider(1, 10, on_change=lambda v: error(v))
    s
    return s,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* refresh
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.refresh
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/refresh.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.2.8"
#+BEGIN_SRC python
__generated_with = "0.2.8"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import random
    return mo, random

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    reset_button = mo.ui.button(label="Reset")
    reset_button
    return reset_button,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, random, reset_button):
    reset_button
    my_pick = random.randint(0, 10)
    mo.accordion({"My pick": my_pick})
    return my_pick,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    refresh = mo.ui.refresh(options=["1s", "10s", "1m", "100ms"])
    mo.md(f"Choose an interval to guess {refresh}")
    return refresh,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, my_pick, random, refresh):
    refresh
    guess = random.randint(0, 10)
    mo.stop(
        guess == my_pick,
        mo.md(f"That is correct: {my_pick}").callout(kind="success"),
    )

    mo.md(f"Not correct, your guess was {random.randint(0, 10)}").callout(
        kind="warn"
    )
    return guess,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* routes
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.routes
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/routes.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.5.2"
#+BEGIN_SRC python
__generated_with = "0.5.2"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.sidebar(
        [
            mo.md("# marimo"),
            mo.nav_menu(
                {
                    "#/home": f"{mo.icon('lucide:home')} Home",
                    "#/about": f"{mo.icon('lucide:user')} About",
                    "#/sales": f"{mo.icon('lucide:bar-chart')} Sales",
                },
                orientation="vertical",
            ),
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    def render_home():
        return mo.md("""
         <p align="center">
          <img src="https://github.com/marimo-team/marimo/raw/main/docs/_static/marimo-logotype-thick.svg">
        </p>

        <p align="center">
          <em>A reactive Python notebook that's reproducible, git-friendly, and deployable as scripts or apps.</em>

        <p align="center">
          <a href="https://docs.marimo.io" target="_blank"><strong>Docs</strong></a> ·
          <a href="https://marimo.io/discord" target="_blank"><strong>Discord</strong></a> ·
          <a href="https://github.com/marimo-team/marimo/tree/main/examples" target="_blank"><strong>Examples</strong></a>
        </p>

        <p align="center">
        <a href="https://pypi.org/project/marimo/"><img src="https://img.shields.io/pypi/v/marimo?color=%2334D058&label=pypi" /></a>
        <a href="https://anaconda.org/conda-forge/marimo"/img><img src="https://img.shields.io/conda/vn/conda-forge/marimo.svg"></img></a>
        <a href="https://github.com/marimo-team/marimo/blob/main/LICENSE"><img src="https://img.shields.io/pypi/l/marimo"></img></a>
        </p>

        """)
    return render_home,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    def render_about():
        return mo.md(
            """
        # About

        **marimo** is a reactive Python notebook: run a cell or interact with a UI
        element, and marimo automatically runs dependent cells, keeping code and outputs
        consistent. marimo notebooks are stored as pure Python, executable as scripts,
        and deployable as apps.

        **Highlights**.

        - **reactive**: run a cell, and marimo automatically runs all dependent cells
        - **interactive**: bind sliders, tables, plots, and more to Python — no callbacks required
        - **reproducible**: no hidden state, deterministic execution
        - **executable**: execute as a Python script, parameterized by CLI args
        - **shareable**: deploy as an interactive web app, or run in the browser via WASM
        - **git-friendly**: stored as `.py` files


        ## Community

        We're building a community. Come hang out with us!

        - 🌟 [Star us on GitHub](https://github.com/marimo-team/marimo)
        - 💬 [Chat with us on Discord](https://marimo.io/discord)
        - 📧 [Subscribe to our Newsletter](https://marimo.io/newsletter)
        - ☁️ [Join our Cloud Waitlist](https://marimo.io/cloud)
        - ✏️ [Start a GitHub Discussion](https://github.com/marimo-team/marimo/discussions)
        - 🐦 [Follow us on Twitter](https://twitter.com/marimo_io)
        - 🕴️ [Follow us on LinkedIn](https://www.linkedin.com/company/marimo-io)

        """
        )
    return render_about,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    slider = mo.ui.slider(0, 100, value=20)
    return slider,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, slider):
    def render_sales():
        import altair as alt
        import pandas as pd
        import numpy as np

        num = slider.value
        x = np.arange(num)
        y = np.random.randint(0, 100, num)
        df = pd.DataFrame({"x": x, "y": y})

        chart = (
            alt.Chart(df)
            .mark_bar()
            .encode(
                x="x",
                y="y",
            )
        )

        return mo.md(
            f"""
        # Sales

        Number of points: {slider}

        {mo.as_html(mo.ui.altair_chart(chart))}
        """
        )
    return render_sales,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, render_about, render_home, render_sales):
    mo.routes(
        {
            "#/home": render_home,
            "#/about": render_about,
            "#/sales": render_sales,
            mo.routes.CATCH_ALL: render_home,
        }
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* run_button
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.run_button
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/run_button.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.6.11"
#+BEGIN_SRC python
__generated_with = "0.6.11"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    b = mo.ui.run_button()
    b
    return b,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    s = mo.ui.slider(1, 10)
    s
    return s,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(b, mo, s):
    mo.stop(not b.value, "Click `run` to submit the slider's value")

    s.value
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(b, mo):
    mo.stop(not b.value)

    import random
    random.randint(0, 1000)
    return random,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* scale
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.scale
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/scale.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Scale""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    s = mo.ui.slider(1, 10)
    s
    return s,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, s):
    sliders_as_md = mo.md(f"""{s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} """)

    sliders_as_tree = (s,) * 10 + (mo.ui.slider(1, 10),) + (s,) * 10


    sliders_as_nested_tree = mo.as_html(
        [
            mo.as_html([s, s.value]),
            mo.as_html([s, s.value]),
            mo.as_html(
                [
                    mo.as_html([s, s.value]),
                    mo.as_html([s, s.value]),
                    mo.as_html(
                        [
                            mo.as_html([s, s.value]),
                            mo.as_html([s, s.value]),
                        ]
                    ),
                ]
            ),
        ]
    )

    mo.tabs({
        "As MD": sliders_as_md,
        "As Flat Tree": sliders_as_tree,
        "As Nested Tree": sliders_as_nested_tree,
    })
    return sliders_as_md, sliders_as_nested_tree, sliders_as_tree

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    b = mo.ui.button()

    button_as_md = mo.md(
        f"""{b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b} {b}"""
    )

    button_as_tree = (b,) * 10

    mo.tabs(
        {
            "As MD": button_as_md,
            "As Tree": button_as_tree,
        }
    )
    return b, button_as_md, button_as_tree

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(s):
    [s, s.value]
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    t = mo.ui.text()

    distinct = mo.ui.array(
        [
            mo.ui.text(),
            mo.ui.text(),
            mo.ui.array(
                [
                    mo.ui.text(),
                    mo.ui.text(),
                    mo.ui.array(
                        [
                            mo.ui.text(),
                            mo.ui.text(),
                            mo.ui.array([mo.ui.text(), mo.ui.text()]),
                        ]
                    ),
                ]
            ),
        ]
    )

    same = mo.ui.array(
        [
            t,
            t,
            mo.ui.array(
                [
                    t,
                    t,
                    mo.ui.array(
                        [
                            t,
                            t,
                            mo.ui.array([t, t]),
                        ]
                    ),
                ]
            ),
        ]
    )

    mo.hstack([same, distinct])
    return distinct, same, t

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        ---

        # h1 Heading
        ## h2 Heading
        ### h3 Heading
        #### h4 Heading
        ##### h5 Heading
        ###### h6 Heading


        ## Emphasis

        **This is bold text**

        __This is bold text__

        *This is italic text*

        _This is italic text_

        ~~Strikethrough~~


        ## Blockquotes


        > Blockquotes can also be nested...
        >> ...by using additional greater-than signs right next to each other...
        > > > ...or with spaces between arrows.
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* scripting
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.scripting
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/scripting.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""hello""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.Html("<script>console.log(document.querySelectorAll('p')[0].textContent)</script>")
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* sidebar
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sidebar
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/sidebar.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.5.2"
#+BEGIN_SRC python
__generated_with = "0.5.2"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.sidebar(
        [
            mo.md("# marimo"),
            mo.nav_menu(
                {
                    "#home": f"{mo.icon('lucide:home')} Home",
                    "#about": f"{mo.icon('lucide:user')} About",
                    "#contact": f"{mo.icon('lucide:phone')} Contact",
                    "Links": {
                        "https://twitter.com/marimo_io": "Twitter",
                        "https://github.com/marimo-team/marimo": "GitHub",
                    },
                },
                orientation="vertical",
            ),
        ],
        footer=[
            mo.md(
                """

        ### Footer

        - [Twitter](https://twitter.com/marimo_io)
        - [GitHub](https://github.com/marimo-team/marimo)    
        """
            )
        ],
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    [
        mo.ui.button(
            label=f"{mo.icon('lucide:home')} Home",
        ),
        mo.ui.button(
            label=f"{mo.icon('lucide:home')} Home {mo.icon('lucide:external-link')}",
        ),
    ]
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.nav_menu(
        {
            "#home": f"{mo.icon('lucide:home')} Home",
            "#about": f"{mo.icon('lucide:user')} About",
            "#contact": f"{mo.icon('lucide:phone')} Contact",
        },
        orientation="vertical",
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.nav_menu(
        {
            "#home": f"{mo.icon('lucide:home')} Home",
            "#about": f"{mo.icon('lucide:user')} About",
            "#contact": f"{mo.icon('lucide:phone')} Contact",
        }
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* slides
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.slides
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/slides.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "altair",
#     "pandas",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.11"
#+BEGIN_SRC python
__generated_with = "0.8.11"

#+END_SRC
** Assignment app = marimo.App(layout_file="layouts/slides.slides.json")
#+BEGIN_SRC python
app = marimo.App(layout_file="layouts/slides.slides.json")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# A Presentation on `Iris` Data""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""## By the marimo team (`@marimo_io`)""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import altair as alt
    return alt, mo, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.read_csv(
        "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"
    )
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    table = mo.ui.table(df, label="Iris Data in a table")
    table
    return table,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df, mo):
    chart = mo.ui.altair_chart(
        alt.Chart(df)
        .mark_point()
        .encode(x="sepal_length", y="sepal_width", color="species"),
        label="Iris Data in chart",
    )
    chart
    return chart,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Thank you!""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # Some markdown testing
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        # H1 (`H1`)
        ## H2 (`H2`)
        ### H3 (`H3`)
        #### H4 (`H4`)
        ##### H5 (`H5`)
        ###### H6 (`H6`)
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        - Item 1
        - `Item 2`
        - **Item 3**
        - _Item 4_
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        !!! note "Callouts"
            This is a callout
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.callout("""
    This is another callout
    """)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Items that don't quite work in slides""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion({"Accodrions too small": mo.md("Content")})
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.tabs({"Tabs to small": mo.md("Content")})
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* sql
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sql
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/sql.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "duckdb",
#     "vega-datasets",
#     "marimo",
#     "altair",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    from vega_datasets import data
    import duckdb
    import marimo as mo
    return alt, data, duckdb, mo

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## Cars""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    # Create a slider with the range of car cylinders
    cars = data.cars()
    cylinders = mo.ui.slider.from_series(cars["Cylinders"])
    cylinders
    return cars, cylinders

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, cylinders, mo):
    df = mo.sql(
        f"""
        SELECT "Name", "Miles_per_Gallon", "Cylinders", "Horsepower"
        FROM cars
        WHERE "Cylinders" = {cylinders.value}
        """
    )
    return df,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df, mo):
    # Chart the filtered cars
    mo.ui.altair_chart(
        alt.Chart(df)
        .mark_point()
        .encode(x="Miles_per_Gallon", y="Horsepower")
        .properties(height=200)
    )
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""## Airports""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    airports = data.airports()
    return airports,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(airports, mo):
    less_airports = mo.sql(
        f"""
        select * from airports limit 2
        """
    )
    return less_airports,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(less_airports):
    len(less_airports)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""## Google Sheets""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    sheet = "https://docs.google.com/spreadsheets/export?format=csv&id=1GuEPkwjdICgJ31Ji3iUoarirZNDbPxQj_kf7fd4h4Ro"
    return sheet,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, sheet):
    job_types = mo.sql(
        f"""
        SELECT DISTINCT current_job_title
        FROM read_csv_auto('{sheet}', normalize_names=True)
        """
    )
    return job_types,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(job_types, mo):
    job_title = mo.ui.dropdown.from_series(job_types["current_job_title"])
    job_title
    return job_title,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(job_title, mo, sheet):
    _df = mo.sql(
        f"""
        SELECT *
        FROM read_csv_auto('{sheet}', normalize_names=True)
        WHERE current_job_title == '{job_title.value}'
        """
    )
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""Debug""")
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(duckdb):
    duckdb.get_table_names(
        f"""
        SELECT "Name", "Miles_per_Gallon", "Cylinders", "Horsepower"
        FROM cars
        """
    )
    return

#+END_SRC
** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(duckdb, job_title, sheet):
    duckdb.get_table_names(
        f"""
        SELECT *
        FROM read_csv_auto('{sheet}', normalize_names=True)
        WHERE current_job_title == '{job_title.value}'
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    grouped_cars_by_origin = mo.sql(
        """
        SELECT "Origin", COUNT(*) AS "Count"
        FROM cars
        GROUP BY "Origin"
        LIMIT 100
        """
    )
    return grouped_cars_by_origin,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* state
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.state
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/state.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.4"
#+BEGIN_SRC python
__generated_with = "0.1.4"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import math
    return math,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import random
    return random,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import time
    return time,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    get_state, set_state = mo.state(0)
    return get_state, set_state

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_state, set_state):
    # No self-loops: shouldn't be a cycle
    set_state(get_state())
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_state):
    get_state()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, set_state):
    _on_click = lambda _: set_state(lambda v: v + 1)
    button = mo.ui.button(
        value=0, on_click=_on_click
    )
    button
    return button,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    # tie two number components together
    get_angle, set_angle = mo.state(0)
    return get_angle, set_angle

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_angle, mo, set_angle):
    degrees = mo.ui.number(
        0, 360, step=1, value=get_angle(), on_change=set_angle, label="degrees"
    )
    return degrees,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_angle, math, mo, set_angle):
    radians = mo.ui.number(
        0,
        2*math.pi,
        step=0.01,
        value=get_angle() * math.pi / 180,
        on_change=lambda v: set_angle(v * 180 / math.pi),
        label="radians"
    )
    return radians,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(degrees, radians):
    degrees, radians
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* stats
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.stats
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/stats.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.29"
#+BEGIN_SRC python
__generated_with = "0.1.29"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _stats = [
        mo.stat("$100", label="Revenue", caption="+ 10%", direction="increase"),
        mo.stat(
            "$20", label="Marketing spend", caption="+ 10%", direction="increase"
        ),
        mo.stat("$80", label="Profit", caption="+ 10%", direction="increase"),
        mo.stat("2%", label="Churn", caption="- 2%", direction="decrease"),
    ]
    mo.hstack(_stats)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _stats = [
        mo.stat(
            "$100",
            label="Revenue",
            caption="+ 10%",
            direction="increase",
            bordered=True,
        ),
        mo.stat(
            "$20",
            label="Marketing spend",
            caption="+ 10%",
            direction="increase",
            bordered=True,
        ),
        mo.stat(
            "$80",
            label="Profit",
            caption="+ 10%",
            direction="increase",
            bordered=True,
        ),
        mo.stat(
            "2%",
            label="Churn",
            caption="- 2%",
            direction="decrease",
            bordered=True,
        ),
    ]
    mo.hstack(_stats, widths="equal", gap=1)
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* status
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.status
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/status.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
** Assignment __generated_with = "0.8.11"
#+BEGIN_SRC python
__generated_with = "0.8.11"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import time
    return mo, time

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    sleep_time_radio = mo.ui.radio(
        [".01", ".1", "1"], label="Sleep time", value=".01"
    )
    sleep_time_radio
    return sleep_time_radio,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(sleep_time_radio):
    sleep_time = float(sleep_time_radio.value)
    return sleep_time,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    disabled_switch = mo.ui.switch(label="Disable progress bar")
    disabled_switch
    return disabled_switch,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(disabled_switch, mo, sleep_time, time):
    for _ in mo.status.progress_bar(
        range(10),
        title="Loading",
        subtitle="Please wait",
        disabled=disabled_switch.value,
    ):
        time.sleep(sleep_time)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(disabled_switch, mo, sleep_time, time):
    for _ in mo.status.progress_bar(
        range(10),
        title="Loading",
        subtitle="Please wait",
        show_eta=True,
        show_rate=True,
        disabled=disabled_switch.value,
    ):
        time.sleep(sleep_time)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(disabled_switch, mo, sleep_time, time):
    with mo.status.progress_bar(
        title="Loading",
        subtitle="Please wait",
        total=10,
        disabled=disabled_switch.value,
    ) as bar:
        for _ in range(10):
            time.sleep(sleep_time)
            bar.update()
    return bar,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, sleep_time, time):
    with mo.status.spinner(title="Loading...", remove_on_exit=True) as _spinner:
        time.sleep(0.1)
        _spinner.update("Almost done")
        time.sleep(sleep_time)
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, sleep_time, time):
    with mo.status.spinner(title="Loading...", remove_on_exit=True) as _spinner:
        time.sleep(sleep_time)
        _spinner.update("Almost done")
        time.sleep(sleep_time)
    mo.ui.table([1, 2, 3])
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(disabled_switch, mo, sleep_time, time):
    # Fast updates should be debounced for performance
    for i in mo.status.progress_bar(
        range(1000),
        disabled=disabled_switch.value,
    ):
        time.sleep(sleep_time / 10)
    return i,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* stdin
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.stdin
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/stdin.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.77"
#+BEGIN_SRC python
__generated_with = "0.1.77"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    value = input("what is your name?")
    return value,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, value):
    mo.md(f"## 👋 Hi {value}")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    print('hi')
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    print('there')
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* stop
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.stop
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/stop.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.1"
#+BEGIN_SRC python
__generated_with = "0.1.1"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import time
    return mo, time

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    secret = mo.ui.text(label="Type a valid password: ")
    secret
    return secret,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, secret):
    # Validation 1
    # This cell just depends on the secret
    mo.stop(
        len(secret.value) < 8, mo.md("Must have length 8").callout(kind="warn")
    )

    success_1 = True
    return success_1,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, secret):
    # Validation 2
    # This cell just depends on the secret
    mo.stop(
        "$" not in secret.value, mo.md("Must contain a **$**").callout(kind="warn")
    )

    success_2 = True
    return success_2,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, secret, success_1):
    # Validation 3
    # This cell depends on the secret and first validation
    mo.stop(
        "7" not in secret.value and success_1,
        mo.md("Must contain the number 7").callout(kind="warn"),
    )

    success_3 = True
    return success_3,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, success_1, success_2, success_3):
    # This depends on all the validations, and not the secret
    _success = success_1 and success_2 and success_3
    mo.stop(not _success)

    mo.md("Secret is correct!").callout(kind="success")
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* table_urls
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.table_urls
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/table_urls.py
:END:
** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.7.20"
#+BEGIN_SRC python
__generated_with = "0.7.20"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.table(
        [
            {
                "title": "New York",
                "url": "https://en.wikipedia.org/wiki/New_York_City",
            },
            {
                "title": "London",
                "url": "https://en.wikipedia.org/wiki/London",
            },
            {
                "title": "Paris",
                "url": "https://en.wikipedia.org/wiki/Paris",
            },
        ],
    )
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* threads
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.threads
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/threads.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.9.10"
#+BEGIN_SRC python
__generated_with = "0.9.10"

#+END_SRC
** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    def foo():
        print("hi")
    return (foo,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import threading
    return (threading,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(foo, mo, threading):
    with mo.redirect_stdout():
        threading.Thread(target=foo).start()
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(foo, mo):
    with mo.redirect_stdout():
        mo.Thread(target=foo).start()
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* timezones
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.timezones
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/timezones.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.9.14"
#+BEGIN_SRC python
__generated_with = "0.9.14"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    from datetime import datetime, date, time
    import marimo as mo

    df = pl.DataFrame(
        {
            "price": [40, 50],
            "datetime": [datetime(2020, 1, 1), datetime(2020, 1, 2)],
        }
    )
    df
    return date, datetime, df, mo, pl, time

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, pl):
    df.with_columns(pl.col("datetime").dt.replace_time_zone("Asia/Kathmandu"))
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(date, pl):
    df2 = pl.DataFrame(
        {
            "price": [40, 50],
            "date": [date(2020, 1, 1), date(2020, 1, 2)],
        }
    )
    df2
    return (df2,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pl, time):
    df3 = pl.DataFrame(
        {
            "price": [40, 50],
            "time": [time(1, 30), time(2, 30)],
        }
    )
    df3
    return (df3,)

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* toast
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.toast
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/toast.py
:END:
** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
** Assignment __generated_with = "0.8.17"
#+BEGIN_SRC python
__generated_with = "0.8.17"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo

    return (mo,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Toast Notification Test""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    def show_toast(title, description="", kind=None):
        mo.status.toast(title, description, kind)
        return None

    return (show_toast,)

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    simple_toast = mo.ui.checkbox(label="Simple Toast")
    html_toast = mo.ui.checkbox(label="Toast with HTML description")
    danger_toast = mo.ui.checkbox(label="Danger Toast")
    return danger_toast, html_toast, simple_toast

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""Select a checkbox to trigger a toast notification:""")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(danger_toast, html_toast, mo, simple_toast):
    mo.vstack(
        [
            simple_toast,
            html_toast,
            danger_toast,
        ]
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(danger_toast, html_toast, show_toast, simple_toast):
    if simple_toast.value:
        show_toast("Simple Toast", "This is a basic toast notification")

    if html_toast.value:
        show_toast(
            "HTML Toast", "<b>Bold</b> and <i>italic</i> text in description"
        )

    if danger_toast.value:
        show_toast("Error Occurred", "Something went wrong!", kind="danger")
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* tooltips
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tooltips
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tooltips.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        # Tooltips 

        <span data-tooltip="Hello world!">Hover me</span>
        """
    )
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.button(label="<span data-tooltip='I said dont press'>Don't press</span>")
    return

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* tqdm_notebook
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tqdm_notebook
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tqdm_notebook.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.7.13"
#+BEGIN_SRC python
__generated_with = "0.7.13"

#+END_SRC
** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from tqdm.notebook import tqdm

    import time
    return time, tqdm

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(time, tqdm):
    for i in tqdm(range(10)):
        time.sleep(0.1)
    return i,

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* ws
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.ws
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/ws.py
:END:
** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
** Assignment __generated_with = "0.1.39"
#+BEGIN_SRC python
__generated_with = "0.1.39"

#+END_SRC
** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, os):
    env_api_key = os.environ.get("COINBASE_API_KEY")
    env_api_secret = os.environ.get("COINBASE_API_SECRET")

    api_key_input = mo.ui.text(value=env_api_key or "", label="YOUR_API_KEY")
    api_secret_input = mo.ui.text(
        value=env_api_secret or "",
        label="YOUR_API_SECRET",
        kind="password",
    )


    mo.accordion(
        {
            "💻 Configuration": mo.vstack(
                [
                    api_key_input,
                    api_secret_input,
                ]
            )
        }
    )
    return api_key_input, api_secret_input, env_api_key, env_api_secret

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pd):
    get_df, set_df = mo.state(
        pd.DataFrame(
            columns=[
                "timestamp",
                "type",
                "product_id",
                "price",
                "volume_24_h",
                "low_24_h",
                "high_24_h",
                "low_52_w",
                "high_52_w",
                "price_percent_chg_24_h",
            ]
        )
    )
    return get_df, set_df

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    def output_stats(df):
        if len(df) == 0:
            return mo.callout("Waiting for data...")

        lastupdate = df["timestamp"].iloc[-1]

        high24 = df["high_24_h"].iloc[-1]
        low24 = df["low_24_h"].iloc[-1]
        diff_high24_to_now = float(high24) - float(df["price"].iloc[-1])
        diff_high24_to_now_percent = (
            diff_high24_to_now / float(df["price"].iloc[-1]) * 100
        )
        diff_low24_to_now = float(low24) - float(df["price"].iloc[-1])
        diff_low24_to_now_percent = (
            diff_low24_to_now / float(df["price"].iloc[-1]) * 100
        )

        return mo.hstack(
            [
                mo.stat(
                    label="Ticker",
                    value=df["product_id"].iloc[-1],
                    caption=f"Last updated: {lastupdate}",
                    bordered=True,
                ),
                mo.stat(
                    label="Price",
                    value=df["price"].iloc[-1],
                    caption=f"24h change: {df['price_percent_chg_24_h'].iloc[-1]:.05}%",
                    bordered=True,
                    direction="increase"
                    if float(df["price_percent_chg_24_h"].iloc[-1]) > 0
                    else "decrease",
                ),
                mo.stat(
                    label="Volume",
                    value=df["volume_24_h"].iloc[-1],
                    caption="In the past 24 hours",
                    bordered=True,
                ),
                mo.stat(
                    label="24h high",
                    value=high24,
                    caption=f"Diff: {diff_high24_to_now:.2f} ({diff_high24_to_now_percent:.2f}%)",
                    bordered=True,
                ),
                mo.stat(
                    label="24h low",
                    value=low24,
                    caption=f"Diff: {diff_low24_to_now:.2f} ({diff_low24_to_now_percent:.2f}%)",
                    bordered=True,
                ),
            ],
            justify="space-between",
            widths=[1, 1, 1, 1, 1, 1],
            gap=2,
        )
    return output_stats,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo):
    def output_chart(df):
        _chart = (
            alt.Chart(df)
            .mark_line()
            .encode(
                x="timestamp:T",
                y=alt.Y("price:Q").scale(zero=False),
                color="product_id:N",
                tooltip=["timestamp:T", "price:Q", "product_id:N"],
            )
        )
        return mo.ui.altair_chart(_chart)
    return output_chart,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    def output_table(df):
        return mo.ui.table(df[::-1], selection=None)
    return output_table,

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(
    WebSocketConnectionClosedException,
    api_key_input,
    api_secret_input,
    create_connection,
    e,
    get_df,
    hashlib,
    hmac,
    json,
    mo,
    output_chart,
    output_stats,
    output_table,
    set_df,
    time,
):
    mo.stop(
        not api_key_input.value or not api_secret_input.value,
        mo.md(
            f"""
            API key and secret required. 

            You can create one from Coinbase following [these instructions](https://help.coinbase.com/en/exchange/managing-my-account/how-to-create-an-api-key).
            """
        ).callout(),
    )

    ws = None
    thread = None
    thread_running = False
    thread_keepalive = None


    def add_signature_ws(message: dict, secret: str):
        nonce = int(time.time())
        to_sign = f"{nonce}{message['channel']}{','.join(message['product_ids'])}"
        signature = hmac.new(
            secret.encode("utf-8"), to_sign.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        message["signature"] = signature
        message["timestamp"] = str(nonce)
        return message


    def handle_new_ticker(data):
        print(data)
        if data["channel"] == "ticker":
            datum = data["events"][0]["tickers"][0]
            current = get_df()
            current.loc[len(current)] = [
                data["timestamp"],
                datum["type"],
                datum["product_id"],
                datum["price"],
                datum["volume_24_h"],
                datum["low_24_h"],
                datum["high_24_h"],
                datum["low_52_w"],
                datum["high_52_w"],
                datum["price_percent_chg_24_h"],
            ]
            set_df(current)
            mo.output.replace(
                mo.vstack(
                    [
                        mo.md(
                            f"""
                        Since marimo does not let other cells runt until the current cell has completed,
                        we must output the UI in the same cell as the websocket thread.

                        This cell runs a websocket indefinitely, until manually interrupted.

                        Ideally we can run this cell async, not blocking other cells, or run in a thread
                        and have the data be updated in the UI.
                        """
                        ),
                        output_stats(current),
                        output_chart(current),
                        output_table(current),
                    ]
                )
            )


    def websocket_thread():
        api_key = api_key_input.value
        api_secret = api_secret_input.value

        ticker_batch = {
            "type": "subscribe",
            "product_ids": ["ETH-USD"],
            "channel": "ticker",
            "api_key": api_key,
        }

        ws = create_connection("wss://advanced-trade-ws.coinbase.com")
        msg = add_signature_ws(ticker_batch, api_secret)
        ws.send(json.dumps(msg))

        # thread_keepalive.start()
        while not thread_running:
            try:
                data = ws.recv()
                if data != "":
                    msg = json.loads(data)
                else:
                    msg = {}
            except ValueError as e:
                print(e)
                print("{} - data: {}".format(e, data))
            except Exception as e:
                print(e)
                print("{} - data: {}".format(e, data))
            else:
                if "result" not in msg:
                    handle_new_ticker(msg)

        try:
            if ws:
                ws.close()
        except WebSocketConnectionClosedException:
            pass
        finally:
            thread_keepalive.join()


    def websocket_keepalive(interval=30):
        while ws.connected:
            ws.ping("keepalive")
            time.sleep(interval)


    # thread = Thread(target=websocket_thread)
    # thread_keepalive = Thread(target=websocket_keepalive)
    # thread.start()
    websocket_thread()
    return (
        add_signature_ws,
        handle_new_ticker,
        thread,
        thread_keepalive,
        thread_running,
        websocket_keepalive,
        websocket_thread,
        ws,
    )

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import altair as alt
    import os
    return alt, mo, os, pd

#+END_SRC
** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import json
    import time
    import hmac
    import hashlib
    from threading import Thread
    from websocket import create_connection, WebSocketConnectionClosedException
    return (
        Thread,
        WebSocketConnectionClosedException,
        create_connection,
        hashlib,
        hmac,
        json,
        time,
    )

#+END_SRC
** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* _polars
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests._polars
:END:
** polars_date_column
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests._polars.polars_date_column
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/_polars/polars_date_column.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.15"
#+BEGIN_SRC python
__generated_with = "0.9.15"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    from datetime import date

    df = (
        pl.date_range(date(2001, 1, 1), date(2001, 1, 3), eager=True)
        .alias("date")
        .to_frame()
    )
    df.with_columns(
        pl.col("date").dt.timestamp().alias("timestamp_us"),
        pl.col("date").dt.timestamp("ms").alias("timestamp_ms"),
        pl.lit(None).cast(pl.Datetime).alias("test"),
    )
    return date, df, pl

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** polars_to_csv
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests._polars.polars_to_csv
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/_polars/polars_to_csv.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "polars",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.8"
#+BEGIN_SRC python
__generated_with = "0.7.8"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import datetime
    import marimo as mo
    import polars as pl

    complex_data = pl.DataFrame(
        {
            "strings": ["a", "b", "c"],
            "bool": [True, False, True],
            "int": [1, 2, 3],
            "float": [1.0, 2.0, 3.0],
            "datetime": [
                datetime.datetime(2021, 1, 1),
                datetime.datetime(2021, 1, 2),
                datetime.datetime(2021, 1, 3),
            ],
            "date": [
                datetime.date(2021, 1, 1),
                datetime.date(2021, 1, 2),
                datetime.date(2021, 1, 3),
            ],
            "struct": [
                {"a": 1, "b": 2},
                {"a": 3, "b": 4},
                {"a": 5, "b": 6},
            ],
            "list": [[1, 2], [3, 4], [5, 6]],
            "array": [[1, 2, 3], [4], []],
            "nulls": [None, "data", None],
            "categorical": pl.Series(["cat", "dog", "mouse"]).cast(pl.Categorical),
            "time": [
                datetime.time(12, 30),
                datetime.time(13, 45),
                datetime.time(14, 15),
            ],
            "duration": [
                datetime.timedelta(days=1),
                datetime.timedelta(days=2),
                datetime.timedelta(days=3),
            ],
            "mixed_list": [
                [1, "two"],
                [3.0, False],
                [None, datetime.datetime(2021, 1, 1)],
            ],
        },
        strict=False,
    )
    return complex_data, datetime, mo, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(complex_data, mo):
    mo.plain(complex_data)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(complex_data):
    complex_data
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* altair
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair
:END:
** altair_brush
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.altair_brush
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/altair_brush.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "altair",
#     "marimo",
#     "numpy",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.20"
#+BEGIN_SRC python
__generated_with = "0.7.20"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Data""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import numpy as np
    import altair as alt
    import marimo as mo


    data = {
        "index": np.tile(np.arange(100), 3),
        "value": np.random.randn(300),
        "traces": np.repeat(["Trace 1", "Trace 2", "Trace 3"], 100),
    }

    traces = pd.DataFrame(data)

    print(traces.head())
    return alt, data, mo, np, pd, traces

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Plain Altair""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, traces):
    _brush = alt.selection_interval(encodings=["x"])

    _chart_overview = (
        alt.Chart(traces, height=150, width=550)
        .mark_line()
        .encode(x="index:Q", y="value:Q", color="traces:N")
        .add_params(_brush)
    )

    _chart_detail = (
        alt.Chart(traces)
        .mark_line()
        .encode(x="index:Q", y="value:Q", color="traces:N")
        .transform_filter(_brush)
    )

    _chart_overview | _chart_detail
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Example of the Or ( | ) operator""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, traces):
    _brush = alt.selection_interval(encodings=["x"])

    chart_overview = mo.ui.altair_chart(
        alt.Chart(traces, height=150, width=550)
        .mark_line()
        .encode(x="index:Q", y="value:Q", color="traces:N")
        .add_params(_brush),
        chart_selection=False,
        legend_selection=False,
    )

    chart_detail = mo.ui.altair_chart(
        alt.Chart(traces)
        .mark_line()
        .encode(x="index:Q", y="value:Q", color="traces:N")
        .transform_filter(_brush),
    )

    chart_overview | chart_detail
    return chart_detail, chart_overview

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Example of the Or ( | ) operator with selection""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart_detail, chart_overview):
    combined = chart_overview | chart_detail
    combined
    return combined,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(combined):
    combined.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** altair_charts
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.altair_charts
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/altair_charts.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "pandas",
#     "numpy",
#     "vega-datasets",
#     "altair",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import marimo as mo
    from vega_datasets import data
    import json
    import pandas as pd
    import numpy as np
    return data, json, mo, np, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    # data
    cars = data.cars()
    employment = data.unemployment_across_industries.url
    iris = data.iris()
    return cars, employment, iris

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    chart_selection_type = mo.ui.radio(
        ["default", "point", "interval"],
        label="Selection Type",
        value="default",
    )
    theme = mo.ui.radio(
        ["default", "dark", "latimes"], label="Theme", value="default"
    )
    legend_selection_type = mo.ui.radio(
        ["all", "none"], label="Legend Selection Type", value="all"
    )

    mo.hstack([chart_selection_type, legend_selection_type, theme]).callout()
    return chart_selection_type, legend_selection_type, theme

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart_selection_type, legend_selection_type, theme):
    import altair as alt

    alt.themes.enable(theme.value)
    chart_selection_value = (
        True
        if chart_selection_type.value == "default"
        else chart_selection_type.value
    )
    legend_selection_value = legend_selection_type.value == "all"
    None
    return alt, chart_selection_value, legend_selection_value

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, cars, chart_selection_value, legend_selection_value, mo):
    _chart = (
        alt.Chart(cars)
        .mark_point()
        .encode(
            x="Horsepower",
            y="Miles_per_Gallon",
            color="Origin",
        )
    )
    chart1 = mo.ui.altair_chart(
        _chart,
        chart_selection=chart_selection_value,
        legend_selection=legend_selection_value,
        label="Cars",
    )
    return chart1,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Basic Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, chart1, chart_selection_value, legend_selection_value, mo):
    mo.vstack(
        [
            chart1,
            (
                mo.ui.altair_chart(
                    alt.Chart(chart1.value)
                    .mark_bar()
                    .encode(
                        x="Origin",
                        y="count()",
                        color="Origin",
                    ),
                    chart_selection=chart_selection_value,
                    legend_selection=legend_selection_value,
                )
                if not chart1.value.empty
                else mo.md("No selection")
            ),
            chart1.value.head(),
        ]
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, chart_selection_value, employment, legend_selection_value, mo):
    # _selection = alt.selection_point(fields=["series"], bind="legend")

    _chart = (
        alt.Chart(employment)
        .mark_area()
        .encode(
            alt.X("yearmonth(date):T").axis(domain=False, format="%Y", tickSize=0),
            alt.Y("sum(count):Q").stack("center").axis(None),
            alt.Color("series:N").scale(scheme="category20b"),
            # opacity=alt.condition(_selection, alt.value(1), alt.value(0.9)),
        )
    )
    # ).add_params(_selection)
    chart2 = mo.ui.altair_chart(
        _chart,
        chart_selection=chart_selection_value,
        legend_selection=legend_selection_value,
    )
    return chart2,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Another Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart2, mo):
    mo.vstack([chart2, chart2.value.head(10)])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Defined Width + Height""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, iris, mo):
    _chart = (
        alt.Chart(iris)
        .mark_circle()
        .properties(width=600, height=400)
        .encode(
            alt.X("sepalLength", scale=alt.Scale(zero=False)),
            alt.Y("sepalWidth", scale=alt.Scale(zero=False)),
            color="species",
            size="petalWidth",
        )
    )

    mo.ui.altair_chart(
        _chart,
        chart_selection=None,
        legend_selection=None,
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, chart_selection_value, iris, legend_selection_value, mo):
    # _color_sel = alt.selection_point(fields=["species"], bind="legend")
    # _size_sel = alt.selection_point(fields=["petalWidth"], bind="legend")

    _chart = (
        alt.Chart(iris)
        .mark_circle(opacity=0.7)
        .encode(
            alt.X("sepalLength", scale=alt.Scale(zero=False)),
            alt.Y("sepalWidth", scale=alt.Scale(zero=False, padding=1)),
            color="species",
            size="petalWidth",
            # opacity=alt.condition(
            #     _color_sel & _size_sel, alt.value(1), alt.value(0.2)
            # ),
        )
        # .add_params(_color_sel, _size_sel)
    )

    chart3 = mo.ui.altair_chart(
        _chart,
        chart_selection=chart_selection_value,
        legend_selection=legend_selection_value,
    )
    return chart3,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Chart + Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart3, mo):
    mo.hstack([chart3, chart3])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Chart + Table""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart3, mo):
    mo.hstack([chart3, chart3.value.head(10)], widths="equal")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Chart + Table returned as an array""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart3):
    [chart3, chart3.value.head(10)]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, cars, chart_selection_value, legend_selection_value, mo):
    brush = alt.selection_interval()
    points = (
        alt.Chart(cars)
        .mark_point()
        .encode(
            x="Horsepower:Q",
            y="Miles_per_Gallon:Q",
            color=alt.condition(brush, "Origin:N", alt.value("lightgray")),
        )
        .add_params(brush)
    )
    bars = (
        alt.Chart(cars)
        .mark_bar()
        .encode(y="Origin:N", color="Origin:N", x="count(Origin):Q")
        .transform_filter(brush)
    )
    plot = points & bars
    chart4 = mo.ui.altair_chart(
        plot,
        chart_selection=chart_selection_value,
        legend_selection=legend_selection_value,
    )
    return bars, brush, chart4, plot, points

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Chart with transform""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart4, mo):
    mo.vstack([chart4, chart4.value.head(10)])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Bar chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, mo):
    binned = mo.ui.altair_chart(
        alt.Chart(data.cars())
        .mark_bar()
        .encode(x=alt.X("Miles_per_Gallon:Q", bin=True), y="count()")
    )
    return binned,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, cars, mo):
    mean = mo.ui.altair_chart(
        alt.Chart(cars)
        .mark_bar()
        .encode(
            x="Cylinders:O",
            y="mean(Acceleration):Q",
        )
    )
    return mean,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mean, mo):
    mo.vstack([mean, mean.value])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, mo):
    hist = (
        alt.Chart(data.cars())
        .mark_bar()
        .encode(x=alt.X("Miles_per_Gallon:Q"), y="count()")
    )
    hist = mo.ui.altair_chart(hist)
    return hist,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(hist, mo):
    mo.vstack([hist, hist.value])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Pivot and horizontal bar chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, pd):
    df = pd.DataFrame.from_records(
        [
            {"country": "Norway", "type": "gold", "count": 14},
            {"country": "Norway", "type": "silver", "count": 14},
            {"country": "Norway", "type": "bronze", "count": 11},
            {"country": "Germany", "type": "gold", "count": 14},
            {"country": "Germany", "type": "silver", "count": 10},
            {"country": "Germany", "type": "bronze", "count": 7},
            {"country": "Canada", "type": "gold", "count": 11},
            {"country": "Canada", "type": "silver", "count": 8},
            {"country": "Canada", "type": "bronze", "count": 10},
        ]
    )

    pivot = mo.ui.altair_chart(
        alt.Chart(df)
        .transform_pivot("type", groupby=["country"], value="count")
        .mark_bar()
        .encode(
            x="gold:Q",
            y="country:N",
        )
    )
    return df, pivot

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pivot):
    mo.vstack([pivot, pivot.value.head()])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, mo):
    _source = data.population.url

    horizontal_bar = mo.ui.altair_chart(
        alt.Chart(_source)
        .mark_bar()
        .encode(
            alt.X("sum(people):Q").title("Population"),
            alt.Y("age:O"),
        )
        .transform_filter(alt.datum.year == 2000)
        .properties(height=alt.Step(20))
    )
    return horizontal_bar,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(horizontal_bar, mo):
    mo.vstack([horizontal_bar, horizontal_bar.value.head()])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, pd):
    _source = pd.DataFrame(
        {"category": [1, 2, 3, 4, 5, 6], "value": [4, 6, 10, 3, 7, 8]}
    )

    pie = mo.ui.altair_chart(
        alt.Chart(_source)
        .mark_arc(innerRadius=50)
        .encode(
            theta="value",
            color="category:N",
        )
    )
    return pie,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pie):
    mo.vstack([pie, pie.value])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Line Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, np, pd):
    x = np.arange(100)
    source = pd.DataFrame({"x": x, "f(x)": np.sin(x / 5)})

    line_chart = mo.ui.altair_chart(
        alt.Chart(source).mark_line().encode(x="x", y="f(x)"),
        chart_selection="interval",
    )
    line_chart
    return line_chart, source, x

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(line_chart, mo):
    mo.hstack([line_chart.value, line_chart.selections])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Multi-Line Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, mo):
    _source = data.stocks()

    alt.Chart(_source).mark_line().encode(
        x="date:T",
        y="price:Q",
        color="symbol:N",
    )

    multiline_chart = mo.ui.altair_chart(
        alt.Chart(_source)
        .mark_line()
        .encode(
            x="date:T",
            y="price:Q",
            color="symbol:N",
        ),
    )
    multiline_chart
    return multiline_chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, multiline_chart):
    mo.hstack([multiline_chart.value, multiline_chart.selections])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, np, pd):
    # Example dataset
    _data = pd.DataFrame(
        {
            "date": pd.date_range(start="2021-01-01", periods=90, freq="D"),
            "value": np.random.randn(90).cumsum(),
            "category": ["A", "B", "C"] * 30,
            "color": ["red", "green", "blue"] * 30,
        }
    )

    # Create a base chart
    facet_chart = (
        alt.Chart(_data)
        .mark_line()
        .encode(
            x="date:T",  # T indicates temporal (time-based) data
            y="value:Q",  # Q indicates a quantitative field
            row="category:N",  # N indicates a nominal field
        )
        .properties(title="Faceted Time Series Chart")
        .configure_facet(spacing=10)  # Adjust spacing between facets
    )

    facet_chart = mo.ui.altair_chart(facet_chart, chart_selection="interval")
    facet_chart
    return facet_chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(facet_chart, mo):
    mo.hstack([facet_chart.value, facet_chart.selections])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        # With `transform_filter`
        > Bug https://github.com/marimo-team/marimo/issues/727
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, mo):
    from altair import datum

    _chart = (
        alt.Chart(data.cars())
        .mark_point()
        .encode(
            x="Horsepower",
            y="Miles_per_Gallon",
            color="Origin",
        )
        .transform_filter(datum.Origin == "Europe")
    )
    with_transform = mo.ui.altair_chart(_chart)
    return datum, with_transform

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, with_transform):
    mo.vstack([with_transform, with_transform.value])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Layers""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, pd):
    _source = pd.DataFrame(
        {
            "yield_error": [7.5522, 6.9775, 3.9167, 11.9732],
            "yield_center": [32.4, 30.96667, 33.966665, 30.45],
            "variety": ["Glabron", "Manchuria", "No. 457", "No. 462"],
        }
    )

    bar = (
        alt.Chart(_source)
        .mark_errorbar(ticks=True)
        .encode(
            x=alt.X("yield_center:Q").scale(zero=False).title("yield"),
            xError=("yield_error:Q"),
            y=alt.Y("variety:N"),
        )
        .properties(width="container")
    )

    point = (
        alt.Chart(_source)
        .mark_point(filled=True, color="black")
        .encode(
            alt.X("yield_center:Q"),
            alt.Y("variety:N"),
        )
    )

    _chart = bar + point
    # layered_chart = mo.ui.altair_chart(_chart, chart_selection="point")
    layered_chart = mo.ui.altair_chart(_chart, chart_selection="interval")
    return bar, layered_chart, point

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(layered_chart, mo):
    mo.vstack(
        [layered_chart, mo.hstack([layered_chart.value, layered_chart.selections])]
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# layered""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, datum, mo):
    stocks = data.stocks.url

    base = (
        alt.Chart(stocks)
        .encode(x="date:T", y="price:Q", color="symbol:N")
        .transform_filter(datum.symbol == "GOOG")
    )

    t = mo.ui.altair_chart(base.mark_line() + base.mark_point())
    t
    return base, stocks, t

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# hconcat""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(base, mo):
    mo.ui.altair_chart(base.mark_line() | base.mark_point())
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# vconcat""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(base, mo):
    mo.ui.altair_chart(base.mark_line() & base.mark_point())
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** altair_geoshape
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.altair_geoshape
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/altair_geoshape.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "altair",
#     "vega-datasets",
#     "geopandas",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    from vega_datasets import data
    import geopandas as gpd

    url = "https://naciscdn.org/naturalearth/110m/cultural/ne_110m_admin_0_countries.zip"
    gdf_ne = gpd.read_file(url)  # zipped shapefile
    gdf_ne = gdf_ne[["NAME", "CONTINENT", "POP_EST", "geometry"]]
    return alt, data, gdf_ne, gpd, url

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(gdf_ne):
    gdf_sel = gdf_ne.query("CONTINENT == 'Africa'")
    return gdf_sel,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, gdf_sel):
    chart = (
        alt.Chart(gdf_sel)
        .mark_geoshape(stroke="white", strokeWidth=1.5)
        .encode(fill="NAME:N")
    )
    return chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.mark.type
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart, mo):
    mo_chart = mo.ui.altair_chart(chart)
    mo_chart
    return mo_chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, mo_chart):
    mo.ui.table(mo_chart.value)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart, mo):
    mo.ui.altair_chart(chart, chart_selection=None)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** altair_polars
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.altair_polars
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/altair_polars.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "altair",
#     "polars",
# ]
# ///
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.2"
#+BEGIN_SRC python
__generated_with = "0.8.2"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import altair as alt
    return alt, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl


    df = pl.DataFrame(
        {"year": [2020, 2021, 2022], "population": [1000, 2000, 3000]}
    )
    df
    return df, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df, mo):
    chart = mo.ui.altair_chart(
        alt.Chart(df)
        .mark_bar()
        .encode(
            x=alt.X("year:N", axis=alt.Axis(title="Year")),
            y=alt.Y("sum(population):Q", axis=alt.Axis(title="Population")),
        )
    )
    chart
    return chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** embed_options
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.embed_options
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/embed_options.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import altair as alt
    import pandas as pd

    data = pd.DataFrame({"x": range(10), "y": range(10)})

    alt.renderers.set_embed_options(actions=False)
    # altair.renderers.set_embed_options(actions=True)

    # Plain chart
    chart = alt.Chart(data).mark_line().encode(x="x", y="y")
    chart
    return alt, chart, data, mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart, mo):
    # Wrapped chart
    mo.ui.altair_chart(chart)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** layered_charts
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.layered_charts
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/layered_charts.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.21"
#+BEGIN_SRC python
__generated_with = "0.9.21"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import altair as alt
    import pandas as pd

    # data
    test_counts = pd.DataFrame(
        [
            {"Level1": "a", "count": 1, "stage": "france"},
            {"Level1": "b", "count": 2, "stage": "france"},
            {"Level1": "c", "count": 3, "stage": "england"},
        ]
    )
    return alt, mo, pd, test_counts

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Layered""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, test_counts):
    # Base
    _base = alt.Chart(test_counts)

    # Params
    _point = alt.selection_point(encodings=["x"])
    _brush = alt.selection_interval(encodings=["x"])

    # Chart 1
    chart = (
        _base.mark_bar()
        .encode(
            x=alt.X("Level1").sort(order="descending").title("Subpillar"),
            y=alt.Y("count").title("Number of Companies"),
            color=alt.condition(_point, "stage", alt.value("lightgray")),
        )
        .add_params(_point, _brush)
    )

    # Chart 2
    rule = _base.mark_rule(strokeDash=[2, 2]).encode(
        y=alt.datum(2), color=alt.datum("england")
    )

    # Layered
    layered_chart = mo.ui.altair_chart(alt.layer(chart, rule))
    layered_chart
    return chart, layered_chart, rule

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(layered_chart):
    layered_chart.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Warnings""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, chart, mo, rule):
    mo.ui.altair_chart(alt.layer(chart, rule), chart_selection="point")
    None
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** narwhals_compat
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.narwhals_compat
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/narwhals_compat.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.9"
#+BEGIN_SRC python
__generated_with = "0.9.9"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    import pandas as pd
    import altair as alt
    import marimo as mo
    return alt, mo, pd, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pd, pl):
    url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"

    df_selection = mo.ui.dropdown(
        {"pandas": pd.read_csv(url), "polars": pl.read_csv(url), "url": url},
        value="polars",
    )
    df_selection
    return df_selection, url

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df_selection, mo):
    df = df_selection.value
    chart = mo.ui.altair_chart(
        alt.Chart(df).mark_point().encode(x="sepal_length:Q", y="sepal_width:Q")
    )
    chart
    return chart, df

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.data
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart, df):
    ["Types", type(df), type(chart.dataframe), type(chart.value)]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.dataframe
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** vegafusion_nb
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.altair.vegafusion_nb
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/altair/vegafusion_nb.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "altair",
#     "marimo",
#     "vegafusion",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# Basic examples""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import altair as alt
    import vegafusion as vf

    # Comment out to disable duckdb connection
    vf.runtime.set_connection("duckdb")

    flights = pd.read_parquet(
        "https://vegafusion-datasets.s3.amazonaws.com/vega/flights_1m.parquet"
    )
    return alt, flights, pd, vf

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, mo):
    delay_hist = (
        alt.Chart(flights)
        .mark_bar()
        .encode(alt.X("delay", bin=alt.Bin(maxbins=30)), alt.Y("count()"))
    )

    with alt.data_transformers.enable("vegafusion"):
        mo.output.replace(delay_hist)
    return delay_hist,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, delay_hist, mo):
    alt.data_transformers.enable("vegafusion")
    mo.as_html(delay_hist)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, delay_hist):
    alt.data_transformers.enable("vegafusion")
    delay_hist
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, delay_hist, mo):
    alt.data_transformers.enable("vegafusion")
    mo.ui.altair_chart(delay_hist)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, delay_hist, mo):
    # This should throw an error
    try:
        alt.data_transformers.enable("default")
        mo.output.replace(delay_hist)
        mo.output.replace("No error found")
    except Exception as e:
        print(e)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        # Examples from vegafusion

        The examples below still hit `MARIMO_OUTPUT_MAX_BYTES` limitations, and require increasing this before running this notebook:

        ```
        export MARIMO_OUTPUT_MAX_BYTES=100_000_000
        ```
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Interactive Cross-filter""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt):
    def make_cross_filter_chart(source):
        brush = alt.selection_interval(encodings=["x"])

        # Define the base chart, with the common parts of the
        # background and highlights
        base = (
            alt.Chart()
            .mark_bar()
            .encode(
                x=alt.X(
                    alt.repeat("column"),
                    type="quantitative",
                    bin=alt.Bin(maxbins=20),
                ),
                y="count()",
            )
            .properties(width=160, height=130)
        )

        # gray background with selection
        background = base.encode(color=alt.value("#ddd")).add_params(brush)

        # blue highlights on the transformed data
        highlight = base.transform_filter(brush)

        # layer the two charts & repeat
        return (
            alt.layer(background, highlight, data=source)
            .transform_calculate("time", "hours(datum.date)")
            .repeat(column=["distance", "delay", "time"])
        )
    return make_cross_filter_chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, make_cross_filter_chart, pd):
    alt.data_transformers.enable("vegafusion")
    source_data = pd.read_parquet(
        "https://vegafusion-datasets.s3.amazonaws.com/vega/flights_200k.parquet"
    )
    make_cross_filter_chart(source_data)
    return source_data,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Interactive average""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt):
    def make_average_chart(source):
        brush = alt.selection_interval(encodings=["x"])

        bars = (
            alt.Chart()
            .mark_bar()
            .encode(
                x="utcmonth(date):O",
                y="mean(precipitation):Q",
                opacity=alt.condition(
                    brush, alt.OpacityValue(1), alt.OpacityValue(0.7)
                ),
            )
            .add_params(brush)
        )

        line = (
            alt.Chart()
            .mark_rule(color="firebrick")
            .encode(y="mean(precipitation):Q", size=alt.SizeValue(3))
            .transform_filter(brush)
        )

        return alt.layer(bars, line, data=source).properties(height=200)
    return make_average_chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, make_average_chart, pd):
    alt.data_transformers.enable("vegafusion")
    _source_data = pd.read_parquet(
        "https://vegafusion-datasets.s3.amazonaws.com/vega/seattle_weather_200k.parquet"
    )
    make_average_chart(_source_data)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Interactive Chart with Cross-Highlight""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt):
    def make_movie_chart(data_source):
        pts = alt.selection_point(encodings=["x"])

        rect = (
            alt.Chart(data_source)
            .mark_rect()
            .encode(
                alt.X("IMDB_Rating:Q", bin=True),
                alt.Y("Rotten_Tomatoes_Rating:Q", bin=True),
                alt.Color(
                    "count()",
                    scale=alt.Scale(scheme="greenblue"),
                    legend=alt.Legend(title="Total Records"),
                ),
            )
        )

        circ = (
            rect.mark_point()
            .encode(
                alt.ColorValue("grey"),
                alt.Size(
                    "count()", legend=alt.Legend(title="Records in Selection")
                ),
            )
            .transform_filter(pts)
            .properties(width=300, height=250)
        )

        bar = (
            alt.Chart(data_source)
            .mark_bar()
            .encode(
                x="Major_Genre:N",
                y="count()",
                color=alt.condition(
                    pts, alt.ColorValue("steelblue"), alt.ColorValue("grey")
                ),
            )
            .properties(width=300, height=250)
            .add_params(pts)
        )

        return alt.hconcat(
            bar,
            rect + circ,
        ).resolve_legend(color="independent", size="independent")
    return make_movie_chart,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, make_movie_chart, pd):
    alt.data_transformers.enable("vegafusion")
    _source_data = pd.read_parquet(
        "https://vegafusion-datasets.s3.amazonaws.com/vega/movies_201k.parquet"
    )
    make_movie_chart(_source_data)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# Vega fusion mimes""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, vf):
    vf.enable(mimetype="html")
    alt.data_transformers.enable("vegafusion")
    alt.Chart(flights).mark_bar().encode(
        alt.X("delay", bin=alt.Bin(maxbins=30)), alt.Y("count()")
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, vf):
    vf.enable(mimetype="svg")
    alt.Chart(flights).mark_bar().encode(
        alt.X("delay", bin=alt.Bin(maxbins=30)), alt.Y("count()")
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, vf):
    vf.enable(mimetype="vega")
    alt.Chart(flights).mark_bar().encode(
        alt.X("delay", bin=alt.Bin(maxbins=30)), alt.Y("count()")
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, vf):
    vf.enable(mimetype="png")
    alt.Chart(flights).mark_bar().encode(
        alt.X("delay", bin=alt.Bin(maxbins=30)), alt.Y("count()")
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* anywidget_smoke_tests
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.anywidget_smoke_tests
:END:
** maplibre_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.anywidget_smoke_tests.maplibre_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/anywidget_smoke_tests/maplibre_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "maplibre",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import functools
    return functools, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from maplibre.controls import NavigationControl, ScaleControl
    from maplibre.ipywidget import MapOptions, MapWidget
    return MapOptions, MapWidget, NavigationControl, ScaleControl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    deck_grid_layer = {
        "@@type": "GridLayer",
        "id": "GridLayer",
        "data": "https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json",
        "extruded": True,
        "getPosition": "@@=COORDINATES",
        "getColorWeight": "@@=SPACES",
        "getElevationWeight": "@@=SPACES",
        "elevationScale": 4,
        "cellSize": 200,
        "pickable": True,
    }
    return deck_grid_layer,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(MapOptions):
    map_options = MapOptions(
        center=(-122.4, 37.74),
        zoom=12,
        hash=True,
        pitch=40,
    )
    return map_options,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(MapWidget, NavigationControl, deck_grid_layer, map_options, mo):
    m = MapWidget(map_options)
    m.use_message_queue(False)
    m.add_control(NavigationControl())
    m.add_deck_layers([deck_grid_layer])
    m = mo.ui.anywidget(m)
    m
    return m,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    add_control_button = mo.ui.run_button(label="add scale control")
    add_control_button
    return add_control_button,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ScaleControl, add_control_button, m):
    if add_control_button.value:
        m.add_control(ScaleControl())
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(m):
    m.clicked
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(m):
    m.zoom
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(m):
    m.center
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** mosaic_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.anywidget_smoke_tests.mosaic_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/anywidget_smoke_tests/mosaic_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "mosaic-widget",
#     "marimo",
#     "pyyaml",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.2"
#+BEGIN_SRC python
__generated_with = "0.7.2"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(__file__):
    import pandas as pd
    import marimo as mo
    import os
    import yaml

    dir_path = os.path.dirname(os.path.realpath(__file__))


    from mosaic_widget import MosaicWidget

    weather = pd.read_csv(
        "https://uwdata.github.io/mosaic-datasets/data/seattle-weather.csv",
        parse_dates=["date"],
    )

    # Load weather spec, remove data key to ensure load from Pandas
    with open(dir_path + "/weather.yaml") as f:
        spec = yaml.safe_load(f)
        spec.pop("data")

    w = mo.ui.anywidget(MosaicWidget(spec, data={"weather": weather}))
    return MosaicWidget, dir_path, f, mo, os, pd, spec, w, weather, yaml

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(w):
    w
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* appcomp
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp
:END:
** inner
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.inner
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/inner.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Innermost")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    x = mo.ui.number(1, 10)
    return x,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x):
    x
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    y = mo.ui.number(1, 10)
    return y,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(y):
    y
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x, y):
    x.value + y.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** main
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.main
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/main.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from inner import app
    return app,

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("## Render the same app multiple times")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(app):
    result = await app.embed()
    result.output
    return result,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(result):
    result.defs["x"].value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(result):
    result.defs["y"].value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("## Render an app inside tabs")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(app, mo):
    tabs = mo.ui.tabs({"🧮": (await app.embed()).output, "📝": mo.md("Hello world")})
    tabs
    return tabs,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(rf"## Render an app that uses function calls")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from make_table import app as table_app
    return table_app,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(table_app):
    table_app_results = await table_app.embed()
    return table_app_results,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(table_app_results):
    table_app_results.output
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(table_app_results):
    table_app_results.defs
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** make_table
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.make_table
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/make_table.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.22"
#+BEGIN_SRC python
__generated_with = "0.6.22"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    t = mo.ui.table({"a": [1, 2, 3], "b": [4, 5, 6]})
    return t,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(t):
    t
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** double_nested
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.double_nested
:END:
*** inner
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.double_nested.inner
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/double_nested/inner.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Innermost")
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    x = mo.ui.number(1, 10)
    return x,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x):
    x
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    y = mo.ui.number(1, 10)
    return y,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(y):
    y
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x, y):
    x.value + y.value
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
*** main
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.double_nested.main
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/double_nested/main.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from middle import app as middle
    return middle,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(middle):
    result = await middle.embed()
    result.output
    return result,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(result):
    result.defs["x_plus_y"]
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
*** middle
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.double_nested.middle
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/double_nested/middle.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from inner import app
    return app,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# middle")
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, result):
    x_plus_y = result.defs['x'].value + result.defs['y'].value
    mo.md(f"The middle app has calculated `x_plus_y` ... try retrieving it")
    return x_plus_y,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(app):
    result = await app.embed()
    result.output
    return result,

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** imperative_output
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.imperative_output
:END:
*** imperative_output
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.imperative_output.imperative_output
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/imperative_output/imperative_output.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# hello")
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, time):
    for i in mo.status.progress_bar(range(5)):
        time.sleep(0.5)
        print(i)
    return i,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    import time
    mo.output.replace(mo.md("# output"))
    time.sleep(0.5)
    mo.output.replace(mo.md("# replaced"))
    return time,

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
*** main
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.imperative_output.main
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/imperative_output/main.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from imperative_output import app
    return app,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(app):
    (await app.embed()).output
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** state
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.state
:END:
*** main
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.state.main
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/state/main.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from state import app
    return app,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __(app):
    (await app.embed()).output
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
*** state
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.appcomp.state.state
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/appcomp/state/state.py
:END:
**** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
**** Assignment __generated_with = "0.6.26"
#+BEGIN_SRC python
__generated_with = "0.6.26"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    get_state, set_state = mo.state(False)
    return get_state, set_state

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, set_state):
    b = mo.ui.button(on_change=lambda x: set_state(True))
    b
    return b,

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_state):
    "button was clicked" if get_state() else "button was not clicked"
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* charts
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.charts
:END:
** 1mil_flights
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.charts.1mil_flights
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/charts/1mil_flights.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "altair",
#     "pandas",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.1.39"
#+BEGIN_SRC python
__generated_with = "0.1.39"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    # Load some large data
    all_flights = pd.read_parquet(
        "https://vegafusion-datasets.s3.amazonaws.com/vega/flights_1m.parquet"
    )
    return all_flights,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    size = mo.ui.dropdown(
        label="Size",
        options=["100", "1000", "10000", "100000", "1000000"],
        value="100000",
    )
    size
    return size,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, mo):
    scatter = mo.ui.altair_chart(
        alt.Chart(flights).mark_point().encode(x="delay:Q", y="distance:Q")
    )
    scatter
    return scatter,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(scatter):
    scatter.value.head()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(all_flights, size):
    flights = all_flights.sample(int(size.value))
    return flights,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(flights):
    f"{len(flights):,} flights"
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, pd):
    # List available data transformers
    mo.ui.altair_chart(alt.Chart(pd.DataFrame({"a": [1]})).mark_point())
    mo.accordion(
        {
            "Debug": mo.md(
                f"""
    Available data transformers: **{", ".join(alt.data_transformers.names())}**

    Current data transformer: **{alt.data_transformers.active}**
    """
            )
        }
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flights, mo):
    flight_histogram = mo.ui.altair_chart(
        alt.Chart(flights).mark_bar().encode(alt.X("delay"), alt.Y("count()"))
    )
    flight_histogram
    return flight_histogram,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(flight_histogram, mo):
    mo.stop(len(flight_histogram.value) == 0, None)

    mo.md(f"Selected **{len(flight_histogram.value):,}** flights")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, flight_histogram, mo):
    mo.stop(len(flight_histogram.value) == 0, None)

    origin_chart = mo.ui.altair_chart(
        alt.Chart(flight_histogram.value)
        .mark_bar()
        .encode(alt.X("origin:O"), alt.Y("count()"))
    )
    destination_chart = mo.ui.altair_chart(
        alt.Chart(flight_histogram.value)
        .mark_bar()
        .encode(alt.X("destination:O"), alt.Y("count()"))
    )
    mo.hstack([origin_chart, destination_chart])
    return destination_chart, origin_chart

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(airports, alt, data, flight_histogram, mo):
    flights_airport = flight_histogram.value
    # flights_airport = data.flights_airport.url

    states = alt.topo_feature(data.us_10m.url, feature="states")

    # Create mouseover selection
    select_city = alt.selection_point(
        on="mouseover", nearest=True, fields=["origin"], empty=False
    )

    # Define which attributes to lookup from airports.csv
    lookup_data = alt.LookupData(
        airports, key="iata", fields=["state", "latitude", "longitude"]
    )

    background = (
        alt.Chart(states)
        .mark_geoshape(fill="lightgray", stroke="white")
        .properties(width=750, height=500)
        .project("albersUsa")
    )

    connections = (
        alt.Chart(flights_airport)
        .mark_rule(opacity=0.5, strokeWidth=0.04)
        .encode(
            latitude="latitude:Q",
            longitude="longitude:Q",
            latitude2="lat2:Q",
            longitude2="lon2:Q",
        )
        .transform_lookup(lookup="origin", from_=lookup_data)
        .transform_lookup(
            lookup="destination",
            from_=lookup_data,
            as_=["state", "lat2", "lon2"],
        )
        .transform_filter(select_city)
    )

    points = (
        alt.Chart(flights_airport)
        .mark_circle()
        .encode(
            latitude="latitude:Q",
            longitude="longitude:Q",
            size=alt.Size("routes:Q").legend(None).scale(range=[0, 1000]),
            order=alt.Order("routes:Q").sort("descending"),
            tooltip=["origin:N", "routes:Q"],
        )
        .transform_aggregate(routes="count()", groupby=["origin"])
        .transform_lookup(lookup="origin", from_=lookup_data)
        .transform_filter(
            (alt.datum.state != "PR") & (alt.datum.state != "VI")
        )
        .add_params(select_city)
    )

    mo.ui.altair_chart(
        (background + connections + points).configure_view(stroke=None)
    )
    return (
        background,
        connections,
        flights_airport,
        lookup_data,
        points,
        select_city,
        states,
    )

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(flight_histogram, mo):
    mo.stop(len(flight_histogram.value) == 0, None)

    mo.hstack(
        [
            mo.md(
                f"Top airport: **{flight_histogram.value['origin'].value_counts().index[0]}**"
            ),
            flight_histogram.value.describe(),
            mo.ui.table(flight_histogram.value),
        ]
    )
    return

#+END_SRC
*** @app.cell(disabled=True): Function __
#+BEGIN_SRC python
@app.cell(disabled=True)
def __(alt, brush, flights, mo):
    # Run the same chart with vegafusion
    with alt.data_transformers.enable("vegafusion"):
        million_histogram = (
            alt.Chart(flights)
            .mark_bar()
            .encode(alt.X("delay"), alt.Y("count()"))
            .add_params(brush)
        )
        mo.output.append(mo.ui.altair_chart(million_histogram))
    return million_histogram,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    import pandas as pd
    from vega_datasets import data

    import marimo as mo

    airports = data.airports.url

    None
    return airports, alt, data, mo, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* chat
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.chat
:END:
** chatbot
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.chat.chatbot
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/chat/chatbot.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "ell-ai==0.0.12",
#     "marimo",
#     "openai==1.50.1",
#     "pydantic==2.9.2",
#     "vega-datasets==0.9.0",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.14"
#+BEGIN_SRC python
__generated_with = "0.9.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""# Built-in chatbots""")
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""## OpenAI""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.chat(
        mo.ai.llm.openai(
            "gpt-4-turbo", system_message="You are a helpful data scientist"
        ),
        show_configuration_controls=True,
        prompts=[
            "Tell me a joke",
            "What is the meaning of life?",
            "What is 2 + {{number}}",
        ],
    )
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""## Anthropic""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.chat(
        mo.ai.llm.anthropic("claude-3-5-sonnet-20240620"),
        show_configuration_controls=True,
        prompts=[
            "Tell me a joke",
            "What is the meaning of life?",
            "What is 2 + {{number}}",
        ],
    )
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""## Google Gemini""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.chat(
        mo.ai.llm.google("gemini-1.5-pro-001"),
        show_configuration_controls=True,
        prompts=[
            "Tell me a joke",
            "What is the meaning of life?",
            "What is 2 + {{number}}",
        ],
    )
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""# Custom chatbots""")
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    import os

    os_key = os.environ.get("OPENAI_API_KEY")
    input_key = mo.ui.text(label="OpenAI API key", kind="password")
    input_key if not os_key else None
    return input_key, os, os_key

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(input_key, os_key):
    openai_key = os_key or input_key.value
    return (openai_key,)

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo, openai_key):
    # Initialize a client
    mo.stop(
        not openai_key,
        "Please set the OPENAI_API_KEY environment variable or provide it in the input field",
    )

    import ell
    import openai

    # Create an openai client
    client = openai.Client(api_key=openai_key)
    return client, ell, openai

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""## Simple""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(client, ell, mo):
    @ell.simple("gpt-4o-mini-2024-07-18", client=client)
    def _my_model(prompt):
        """You are an annoying little brother, whatever I say, be sassy with your response"""
        return prompt


    mo.ui.chat(mo.ai.llm.simple(_my_model))
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""## Complex""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # Grab a dataset for the chatbot conversation, we will use the cars dataset

    from vega_datasets import data

    cars = data.cars()
    return cars, data

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, client, ell):
    from pydantic import BaseModel, Field


    class PromptsResponse(BaseModel):
        prompts: list[str] = Field(
            description="A list of prompts to use for the chatbot"
        )


    @ell.complex(
        "gpt-4o-mini-2024-07-18", client=client, response_format=PromptsResponse
    )
    def get_sample_prompts(df):
        """You are a helpful data scientist"""
        return (
            "Given the following schema of this dataset, "
            f"what would be three interesting questions to ask? \n{df.dtypes}"
        )


    def my_complex_model(messages, config):
        schema = cars.dtypes

        # This doesn't need to be ell or any model provider
        # You can use your own model here.
        @ell.complex(model="gpt-4o", temperature=0.7)
        def chat_bot(message_history):
            return [
                ell.system(f"""
                You are a helpful data scientist chatbot.

                I would like you to analyze this dataset. You must only ask follow-up questions or return a single valid JSON of a vega-lite specification so that it can be charted.

                Here is the dataset schema {schema}.

                If you are returning JSON, only return the json without any explanation. And don't wrap in backquotes or code fences
                """),
            ] + message_history

        # History
        message_history = [
            ell.user(message.content)
            if message.role == "user"
            else ell.assistant(message.content)
            for message in messages
        ]
        # Prompt
        # message_history.append(ell.user(prompt))

        # Go!
        response = chat_bot(message_history).text
        if response.startswith("{"):
            import altair as alt
            import json

            as_dict = json.loads(response)
            # add our cars dataset
            print(as_dict)
            as_dict["data"] = {"values": cars.dropna().to_dict(orient="records")}
            if "datasets" in as_dict:
                del as_dict["datasets"]
            return alt.Chart.from_dict(as_dict)
        return response
    return (
        BaseModel,
        Field,
        PromptsResponse,
        get_sample_prompts,
        my_complex_model,
    )

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, get_sample_prompts, mo, my_complex_model):
    prompts = get_sample_prompts(cars).parsed.prompts
    mo.ui.chat(
        my_complex_model,
        prompts=prompts,
    )
    return (prompts,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* custom_server
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.custom_server
:END:
** my_server
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.custom_server.my_server
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/custom_server/my_server.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
from typing import Annotated, Callable, Coroutine
from fastapi.responses import HTMLResponse, RedirectResponse
import marimo
from fastapi import FastAPI, Form, Request, Response

#+END_SRC
*** Assignment server
#+BEGIN_SRC python
server = (
    marimo.create_asgi_app()
    # Mount the dataframe app at /dataframes
    .with_app(path="/dataframes", root="../dataframe.py")
    # Mount the ansi app at /ansi
    .with_app(path="/ansi", root="../ansi.py")
    # Mount the buttons app at the root
    .with_app(path="", root="../buttons.py")
)

#+END_SRC
*** Assignment app = FastAPI()
#+BEGIN_SRC python
# Create a FastAPI app
app = FastAPI()

#+END_SRC
*** @app.middleware("http"): Function auth_middleware
#+BEGIN_SRC python
# Super simple auth middleware
# If no token, redirect to login page with simple form
# Any password is valid for a token
@app.middleware("http")
async def auth_middleware(
    request: Request,
    call_next: Callable[[Request], Coroutine[None, None, Response]],
) -> Response:
    if request.url.path == "/login":
        response = await call_next(request)
        return response
    if "token" not in request.cookies:
        return RedirectResponse(url="/login")
    return await call_next(request)

#+END_SRC
*** @app.get("/login"): Function get_login
#+BEGIN_SRC python
@app.get("/login")
async def get_login():
    return HTMLResponse(
        """
        <form action="/login" method="post">
            <label for="token">Token</label>
            <input type="text" id="token" name="token">
            <button type="submit">Submit</button>
        </form>
        """
    )

#+END_SRC
*** @app.post("/login"): Function post_login
#+BEGIN_SRC python
@app.post("/login")
async def post_login(token: Annotated[str, Form()]):
    response = RedirectResponse(url="/")
    response.set_cookie(key="token", value=token)
    return response

#+END_SRC
*** @app.get("/ping"): Function root
#+BEGIN_SRC python
@app.get("/ping")
async def root():
    return {"message": "pong"}

#+END_SRC
*** Call app.mount("/", server.build())
#+BEGIN_SRC python
app.mount("/", server.build())

#+END_SRC
*** if_statement
#+BEGIN_SRC python
# Run the server
if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="localhost", port=8000, log_level="info")

#+END_SRC
* inputs
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.inputs
:END:
** numbers
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.inputs.numbers
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/inputs/numbers.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.20"
#+BEGIN_SRC python
__generated_with = "0.8.20"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Basic""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.number()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.number(-10, 10)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Edge cases""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    # Above max safe int
    BAD_INT = 999999999999999990
    v = mo.ui.number(
        value=BAD_INT, start=BAD_INT - 5, stop=BAD_INT + 5, full_width=True
    )
    v
    return BAD_INT, v

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(v):
    v.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    def on_change(new_value):
        print(new_value)


    mo.ui.number(start=-1e255, stop=1e255, value=5, on_change=on_change)
    return (on_change,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, on_change):
    import numpy as np

    # Cannot set infinity as range
    mo.ui.number(start=-np.inf, stop=np.inf, value=5, on_change=on_change)
    return (np,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* issues
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues
:END:
** 1033
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1033
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1033.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "arviz",
#     "marimo",
#     "xarray",
#     "matplotlib",
#     "scipy",
#     "numpy",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.15"
#+BEGIN_SRC python
__generated_with = "0.8.15"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('centered_eight')
    az.plot_autocorr(_data)
    # [az.plot_autocorr(_data), 
    # type(az.plot_autocorr(_data))]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np):
    _idata = az.from_dict(posterior={"a":np.random.normal(1, 0.5, 5000)},
        prior={"a":np.random.normal(0, 1, 5000)})
    az.plot_bf(_idata, var_name="a", ref_val=0)
    # [az.plot_bf(_idata, var_name="a", ref_val=0),
    # type(az.plot_bf(_idata, var_name="a", ref_val=0))]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np):
    _data = az.load_arviz_data("regression1d")
    # [az.plot_bpv(_data, kind="t_stat", t_stat=lambda x:np.percentile(x, q=50, axis=-1)), type(az.plot_bpv(_data, kind="t_stat", t_stat=lambda x:np.percentile(x, q=50, axis=-1)))]
    az.plot_bpv(_data, kind="t_stat", t_stat=lambda x:np.percentile(x, q=50, axis=-1))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _model_compare = az.compare({'Centered 8 schools': az.load_arviz_data('centered_eight'),
                     'Non-centered 8 schools': az.load_arviz_data('non_centered_eight')})
    # [az.plot_compare(_model_compare), type(az.plot_compare(_model_compare))]
    az.plot_compare(_model_compare)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _centered = az.load_arviz_data('centered_eight')
    _non_centered = az.load_arviz_data('non_centered_eight')
    # [az.plot_density([_centered, _non_centered]), type(az.plot_density([_centered, _non_centered]))]
    az.plot_density([_centered, _non_centered])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # az.clear_data_home()
    # _data = az.load_arviz_data('rugby')
    # [az.plot_dist_comparison(_data, var_names=["defs"], coords={"team" : ["Italy"]}), type(az.plot_dist_comparison(_data, var_names=["defs"], coords={"team" : ["Italy"]}))]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np):
    _values = np.random.normal(0, 1, 500)
    # [az.plot_dot(_values), type(az.plot_dot(_values))]
    az.plot_dot(_values)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, norm, np):
    _sample = norm(0,1).rvs(1000)
    _npoints = 100
    # [az.plot_ecdf(_sample, eval_points=np.linspace(_sample.min(), _sample.max(), _npoints)), type(az.plot_ecdf(_sample, eval_points=np.linspace(_sample.min(), _sample.max(), _npoints)))]
    az.plot_ecdf(_sample, eval_points=np.linspace(_sample.min(), _sample.max(), _npoints))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _idata1 = az.load_arviz_data("centered_eight")
    _idata2 = az.load_arviz_data("non_centered_eight")
    # [az.plot_elpd(
    #     {"centered model": _idata1, "non centered model": _idata2},
    #     xlabels=True
    # ), type(az.plot_elpd(
    #     {"centered model": _idata1, "non centered model": _idata2},
    #     xlabels=True
    # ))]
    az.plot_elpd(
        {"centered model": _idata1, "non centered model": _idata2},
        xlabels=True
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('centered_eight')
    # [az.plot_energy(_data), type(az.plot_energy(_data))]
    az.plot_energy(_data)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _idata = az.load_arviz_data("centered_eight")
    _coords = {"school": ["Choate", "Lawrenceville"]}
    az.plot_ess(
        _idata, kind="local", var_names=["mu", "theta"], coords=_coords
    )
    # [az.plot_ess(
    #     _idata, kind="local", var_names=["mu", "theta"], coords=_coords
    # ), type(az.plot_ess(
    #     _idata, kind="local", var_names=["mu", "theta"], coords=_coords
    # ))]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _non_centered_data = az.load_arviz_data('non_centered_eight')
    _axes = az.plot_forest(_non_centered_data,
                               kind='forestplot',
                               var_names=["^the"],
                               filter_vars="regex",
                               combined=True,
                               figsize=(9, 7))
    _axes[0].set_title('Estimated theta for 8 schools model')
    # [_axes, type(_axes)]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np):
    # time-steps random walk
    _x_data =np.arange(0,100)
    # Mean random walk
    _mu = np.zeros(100)
    for i in _x_data: _mu[i] = _mu[i-1] + np.random.normal(0, 1, 1)
    # Simulated pp samples form the random walk time series
    _y_data = np.random.normal(2 + _mu * 0.5, 0.5, size = (2, 50, 100))
    # [az.plot_hdi(_x_data, _y_data), type(az.plot_hdi(_x_data, _y_data))]
    az.plot_hdi(_x_data, _y_data)
    return i,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np):
    _non_centered = az.load_arviz_data('non_centered_eight')
    _mu_posterior = np.concatenate(_non_centered.posterior["mu"].values)
    _tau_posterior = np.concatenate(_non_centered.posterior["tau"].values)
    # [az.plot_kde(_mu_posterior), type(az.plot_kde(_mu_posterior))]
    az.plot_kde(_mu_posterior)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _radon = az.load_arviz_data("radon")
    _loo_radon = az.loo(_radon, pointwise=True)
    # [az.plot_khat(_loo_radon, show_bins=True), type(az.plot_khat(_loo_radon, show_bins=True))]
    az.plot_khat(_loo_radon, show_bins=True)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _idata = az.load_arviz_data("radon")
    # [az.plot_loo_pit(idata=_idata, y="y"), type(az.plot_loo_pit(idata=_idata, y="y"))]
    az.plot_loo_pit(idata=_idata, y="y")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np, xr):
    _idata = az.load_arviz_data('regression1d')
    _x = xr.DataArray(np.linspace(0, 1, 100))
    _idata.posterior["y_model"] = _idata.posterior["intercept"] + _idata.posterior["slope"]*_x

    # [az.plot_lm(idata=_idata, y="y", x=_x), type(az.plot_lm(idata=_idata, y="y", x=_x))]
    az.plot_lm(idata=_idata, y="y", x=_x)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _idata = az.load_arviz_data("centered_eight")
    _coords = {"school": ["Deerfield", "Lawrenceville"]}
    # [az.plot_mcse(
    #     _idata, var_names=["mu", "theta"], coords=_coords
    # ), type(az.plot_mcse(
    #     _idata, var_names=["mu", "theta"], coords=_coords
    # ))]
    az.plot_mcse(
        _idata, var_names=["mu", "theta"], coords=_coords
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _centered = az.load_arviz_data('centered_eight')
    _coords = {'school': ['Choate', 'Deerfield']}
    # [az.plot_pair(_centered,
    #             var_names=['theta', 'mu', 'tau'],
    #             kind='kde',
    #             coords=_coords,
    #             divergences=True,
    #             textsize=18), type(az.plot_pair(_centered,
    #             var_names=['theta', 'mu', 'tau'],
    #             kind='kde',
    #             coords=_coords,
    #             divergences=True,
    #             textsize=18))]
    az.plot_pair(_centered,
                var_names=['theta', 'mu', 'tau'],
                kind='kde',
                coords=_coords,
                divergences=True,
                textsize=18)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('centered_eight')
    # [az.plot_parallel(_data, var_names=["mu", "tau"]), type(az.plot_parallel(_data, var_names=["mu", "tau"]))]
    az.plot_parallel(_data, var_names=["mu", "tau"])
    # plt.show()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('centered_eight')
    # [az.plot_posterior(_data), type(az.plot_posterior(_data))]
    az.plot_posterior(_data)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('radon')
    # [az.plot_ppc(_data, data_pairs={"y":"y"}), type(az.plot_ppc(_data, data_pairs={"y":"y"}))]
    az.plot_ppc(_data, data_pairs={"y":"y"})
    # plt.gca()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, plt):
    _data = az.load_arviz_data('centered_eight')
    # [az.plot_rank(_data), type(az.plot_rank(_data))]
    az.plot_rank(_data)
    plt.gca()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _idata = az.load_arviz_data('classification10d')
    # [az.plot_separation(idata=_idata, y='outcome', y_hat='outcome', figsize=(8, 1)), type(az.plot_separation(idata=_idata, y='outcome', y_hat='outcome', figsize=(8, 1)))]
    az.plot_separation(idata=_idata, y='outcome', y_hat='outcome', figsize=(8, 1))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('non_centered_eight')
    _coords = {'school': ['Choate', 'Lawrenceville']}
    # [az.plot_trace(_data, var_names=('theta'), filter_vars="like", coords=_coords), type(az.plot_trace(_data, var_names=('theta'), filter_vars="like", coords=_coords))]
    az.plot_trace(_data, var_names=('theta'), filter_vars="like", coords=_coords)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az, np):
    _nchains, _ndraws = (4, 500)
    _obs_data = {
        "y": 2 * np.arange(1, 9) + 3,
        "z": 2 * np.arange(8, 12) + 3,
    }
    _posterior_predictive = {
        "y": np.random.normal(
            (_obs_data["y"] * 1.2) - 3, size=(_nchains, _ndraws, len(_obs_data["y"]))
        ),
        "z": np.random.normal(
            (_obs_data["z"] * 1.2) - 3, size=(_nchains, _ndraws, len(_obs_data["z"]))
        ),
     }
    _idata = az.from_dict(
        observed_data=_obs_data,
        posterior_predictive=_posterior_predictive,
        _coords={"obs_dim": np.arange(1, 9), "pred_dim": np.arange(8, 12)},
        dims={"y": ["obs_dim"], "z": ["pred_dim"]},
    )
    ax = az.plot_ts(idata=_idata, y="y", y_holdout="z")
    # [ax, type(ax)]
    ax
    return ax,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(az):
    _data = az.load_arviz_data('centered_eight')
    az.plot_violin(_data)
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    # import libraries
    import marimo as mo
    import numpy as np
    import arviz as az
    import matplotlib.pyplot as plt
    import xarray as xr
    from scipy.stats import uniform, norm
    return az, mo, norm, np, plt, uniform, xr

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1055
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1055
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1055.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.8"
#+BEGIN_SRC python
__generated_with = "0.3.8"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import manim_slides
    return manim_slides,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    print(1)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1064
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1064
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1064.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.8"
#+BEGIN_SRC python
__generated_with = "0.3.8"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import plotly.express as px
    return mo, px

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("# Issue 1064")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(px):
    plot1 = px.scatter(x=[0, 1, 4, 9, 16], y=[0, 1, 2, 3, 4])
    plot2 = px.scatter(x=[2, 3, 6, 11, 18], y=[2, 3, 4, 5, 6])
    return plot1, plot2

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    tabs = mo.ui.tabs(
        {
            "💾 Tab 1": "",
            "💾 Tab 2": "",
        }
    )
    return tabs,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plot1, plot2, tabs):
    def render_tab_content():
        if tabs.value == "💾 Tab 1":
            return plot1
        elif tabs.value == "💾 Tab 2":
            return plot2
        else:
            return ""


    mo.vstack([tabs.center(), render_tab_content()])
    return render_tab_content,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1072
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1072
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1072.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.9"
#+BEGIN_SRC python
__generated_with = "0.3.9"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    from sklearn.datasets import fetch_california_housing

    housing = fetch_california_housing()
    df = pl.DataFrame(
        data=housing.data, schema=housing.feature_names
    ).with_columns(Price=housing.target)

    df.plot.scatter(x="MedInc", y="Price")
    return df, fetch_california_housing, housing, pl

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1086
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1086
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1086.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.10"
#+BEGIN_SRC python
__generated_with = "0.3.10"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import matplotlib.pyplot as plt
    import numpy as np

    plt.plot(np.arange(52))

    # better to do plt.gca(), but discovered this translating script
    plt.show()
    return np, plt

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1107
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1107
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1107.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.12"
#+BEGIN_SRC python
__generated_with = "0.3.12"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    v = mo.ui.number(value=0, start=-10, stop=10)
    v
    return v,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(v):
    v.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1140
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1140
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1140.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.5"
#+BEGIN_SRC python
__generated_with = "0.4.5"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import numpy as np
    import marimo as mo
    return mo, np, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
    This highlights some of the differences between displaying data in different libraries: polars, pandas, pyarrow, and dictionaries.

    These differences are due to how each library prints their data as CSVs.
    """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np, pd):
    data = {
        "Integer": [1, 2, 3],
        "Float": [1.0, 2.5, 3.5],
        "String": ["apple", "banana", "cherry"],
        "Boolean": [True, False, True],
        "LargeInt": np.array([1e12, 2e12, 3e12], dtype=np.int64),
        "LargeFloat": np.array(
            [1.234567890123456789, 2.234567890123456789, 3.234567890123456789],
            dtype=np.float64,
        ),
        "DateTime": pd.to_datetime(["2021-01-01", "2021-06-01", "2021-09-01"]),
        "Timedelta": pd.to_timedelta(["1 days", "2 days", "3 days"]),
        "Categorical": pd.Categorical(["test", "train", "test"]),
        "NumpyArray": [
            np.array([1, 2, 3]),
            np.array([4, 5, 6]),
            np.array([7, 8, 9]),
        ],
        "Duration": pd.to_timedelta(["10:00:00", "15:30:00", "20:45:00"]),
        "Series": [
            pd.Series([1, 2, 3]),
            pd.Series([1, 2, 3]),
            pd.Series([1, 2, 3]),
        ],
        "Nested": [{"a": 1, "b": 2}, {"a": 3, "b": 4}, {"a": 5, "b": 6}],
        "Mixed": [1, 1.1, "1"],
        "Mixed 2": [True, np.array([1, 2, 3]), pd.to_datetime("2021-01-01")],
        "Null": [None, None, None],
        "NaN": [np.nan, np.nan, np.nan],
        "Infinity": [np.inf, np.inf, np.inf],
        "Negative Infinity": [-np.inf, -np.inf, -np.inf],
        "Zero": [0, 0, 0],
        "Empty": ["", "", ""],
        "Empty List": [[], [], []],
        "Empty Dict": [{}, {}, {}],
        "Set": [set(), set(["a", "b"]), set([1, 2])],
        "Empty Tuple": [(), (), ()],
    }
    return data,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df_with_date_index = pd.DataFrame(
        {
            "a": [1, 2, 3],
            "b": [4, 5, 6],
            "c": [7, 8, 9],
        },
        index=pd.to_datetime(["2021-01-01", "2021-06-01", "2021-09-01"]),
    )
    return df_with_date_index,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df_with_date_index, mo):
    mo.ui.table(df_with_date_index, label="Pandas with date index")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df_with_date_index):
    df_with_date_index
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df, label="Pandas")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, pd):
    df = pd.DataFrame(data)
    df
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.dataframe(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df.to_dict(orient="records"), label="List of dictionaries")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data_2, mo, pd):
    # Arrow
    import pyarrow as pa
    import pyarrow.parquet as pq

    table = pa.Table.from_pandas(pd.DataFrame(data_2))
    mo.ui.table(table, label="Pyarrow")
    return pa, pq, table

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np, pd):
    data_2 = {
        "Integer": [1, 2, 3],
        "Float": [1.0, 2.5, 3.5],
        "String": ["apple", "banana", "cherry"],
        "Boolean": [True, False, True],
        "LargeInt": np.array([1e12, 2e12, 3e12], dtype=np.int64),
        "LargeFloat": np.array(
            [1.234567890123456789, 2.234567890123456789, 3.234567890123456789],
            dtype=np.float64,
        ),
        "DateTime": pd.to_datetime(["2021-01-01", "2021-06-01", "2021-09-01"]),
        # Not support in polars
        # 'Timedelta': pd.to_timedelta(['1 days', '2 days', '3 days']),
        # 'Categorical': pd.Categorical(['test', 'train', 'test']),
        # CSV does not support nested data
        # 'NumpyArray': [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])],
        # 'Nested': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}, {'a': 5, 'b': 6}],
        # 'Duration': pd.to_timedelta(['10:00:00', '15:30:00', '20:45:00'])
        # 'Mixed': [1, 1.1, '1'],
        # Mixed 2 is not supported in polars
        # 'Mixed 2': [True, np.array([1, 2, 3]), pd.to_datetime('2021-01-01')],
        "Null": [None, None, None],
        "NaN": [np.nan, np.nan, np.nan],
        "Infinity": [np.inf, np.inf, np.inf],
        "Negative Infinity": [-np.inf, -np.inf, -np.inf],
        "Zero": [0, 0, 0],
        "Empty": ["", "", ""],
        # More nested not supported
        # 'Empty List': [[], [], []],
        # 'Empty Dict': [{}, {}, {}],
        # 'Empty Set': [set(), set(), set()],
        # 'Empty Tuple': [(), (), ()],
    }
    return data_2,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data_2, mo):
    # Polars
    import polars as pl

    pl_df = pl.DataFrame(data_2)
    mo.ui.table(pl_df, label="Polars")
    return pl, pl_df

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pl_df):
    pl_df
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1161
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1161
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1161.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.0"
#+BEGIN_SRC python
__generated_with = "0.4.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    slider = mo.ui.slider(1, 5)
    slider
    return slider,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, slider):
    import plotly.express as px
    x_data = [1,2,3,4,5,6][:slider.value]
    y_data = [1,2,3,2,3,4][:slider.value]
    fig = px.scatter(x=x_data, y=y_data)

    p = mo.ui.plotly(fig)
    p
    return fig, p, px, x_data, y_data

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(p):
    p.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1165
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1165
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1165.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.0"
#+BEGIN_SRC python
__generated_with = "0.4.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(css):
    import anywidget
    import marimo as mo


    class IGVWidget(anywidget.AnyWidget):
        _esm = """
        import igv from "https://cdn.jsdelivr.net/npm/igv@2.15.5/dist/igv.esm.min.js"

        function render({ model, el }) {
          var options = {
            genome: "hg38",
            locus: "chr8:127,736,588-127,739,371",
            tracks: [{
              "name": "HG00103",
              "url": "https://s3.amazonaws.com/1000genomes/data/HG00103/alignment/HG00103.alt_bwamem_GRCh38DH.20150718.GBR.low_coverage.cram",
              "indexURL": "https://s3.amazonaws.com/1000genomes/data/HG00103/alignment/HG00103.alt_bwamem_GRCh38DH.20150718.GBR.low_coverage.cram.crai",
              "format": "cram"
            }]};

            igv.createBrowser(el, options)
        }
        export default { render };
      """

        _css = ".igv-container {background-color: white};" + css


    IGVWidget()
    return IGVWidget, anywidget, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    css = """
    .igv-navbar {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
      box-sizing: border-box;
      width: 100%;
      color: #444;
      font-size: 12px;
      font-family: "Open Sans", sans-serif;
      font-weight: 400;
      line-height: 32px;
      padding-left: 8px;
      padding-right: 8px;
      margin-top: 2px;
      margin-bottom: 6px;
      height: 32px;
      border-style: solid;
      border-radius: 3px;
      border-width: thin;
      border-color: #bfbfbf;
      background-color: #f3f3f3;
    }
    .igv-navbar .igv-navbar-left-container {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
      height: 32px;
      line-height: 32px;
    }
    .igv-navbar .igv-navbar-left-container .igv-logo {
      width: 34px;
      height: 32px;
      margin-right: 8px;
    }
    .igv-navbar .igv-navbar-left-container .igv-current-genome {
      height: 32px;
      margin-left: 4px;
      margin-right: 4px;
      user-select: none;
      line-height: 32px;
      vertical-align: middle;
      text-align: center;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
      height: 100%;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-chromosome-select-widget-container {
      display: flex;
      flex-flow: column;
      flex-wrap: nowrap;
      justify-content: space-around;
      align-items: center;
      height: 100%;
      width: 125px;
      margin-right: 4px;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-chromosome-select-widget-container select {
      display: block;
      cursor: pointer;
      width: 100px;
      height: 75%;
      outline: none;
      font-size: 12px;
      font-family: "Open Sans", sans-serif;
      font-weight: 400;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
      margin-left: 8px;
      height: 22px;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
      width: 210px;
      height: 22px;
      line-height: 22px;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container input.igv-search-input {
      cursor: text;
      width: 85%;
      height: 22px;
      line-height: 22px;
      font-size: 12px;
      font-family: "Open Sans", sans-serif;
      font-weight: 400;
      text-align: left;
      padding-left: 8px;
      margin-right: 8px;
      outline: none;
      border-style: solid;
      border-radius: 3px;
      border-width: thin;
      border-color: #bfbfbf;
      background-color: white;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container .igv-search-icon-container {
      cursor: pointer;
      height: 16px;
      width: 16px;
    }
    .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-windowsize-panel-container {
      margin-left: 4px;
      user-select: none;
    }
    .igv-navbar .igv-navbar-right-container {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
      height: 32px;
      line-height: 32px;
    }
    .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
      height: 100%;
    }
    .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container div {
      margin-left: 0;
      margin-right: 4px;
    }
    .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container div:last-child {
      margin-left: 0;
      margin-right: 0;
    }
    .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container-750 {
      display: none;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget {
      color: #737373;
      font-size: 18px;
      height: 32px;
      line-height: 32px;
      margin-left: 8px;
      user-select: none;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-end;
      align-items: center;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget div {
      cursor: pointer;
      margin-left: unset;
      margin-right: unset;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget div:first-child {
      height: 24px;
      width: 24px;
      margin-left: unset;
      margin-right: 8px;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget div:last-child {
      height: 24px;
      width: 24px;
      margin-left: 8px;
      margin-right: unset;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget div:nth-child(even) {
      display: block;
      height: fit-content;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget input {
      display: block;
      width: 125px;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget svg {
      display: block;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 {
      color: #737373;
      font-size: 18px;
      height: 32px;
      line-height: 32px;
      margin-left: 8px;
      user-select: none;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-end;
      align-items: center;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div {
      cursor: pointer;
      margin-left: unset;
      margin-right: unset;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:first-child {
      height: 24px;
      width: 24px;
      margin-left: unset;
      margin-right: 8px;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:last-child {
      height: 24px;
      width: 24px;
      margin-left: 8px;
      margin-right: unset;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:nth-child(even) {
      width: 0;
      height: 0;
      display: none;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 input {
      width: 0;
      height: 0;
      display: none;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 svg {
      display: block;
    }
    .igv-navbar .igv-navbar-right-container .igv-zoom-widget-hidden {
      display: none;
    }

    .igv-navbar-button {
      display: block;
      box-sizing: unset;
      padding-left: 6px;
      padding-right: 6px;
      height: 18px;
      text-transform: capitalize;
      user-select: none;
      line-height: 18px;
      text-align: center;
      vertical-align: middle;
      font-family: "Open Sans", sans-serif;
      font-size: 11px;
      font-weight: 200;
      color: #737373;
      background-color: #f3f3f3;
      border-color: #737373;
      border-style: solid;
      border-width: thin;
      border-radius: 6px;
    }

    .igv-navbar-button-clicked {
      color: white;
      background-color: #737373;
    }

    .igv-navbar-button:hover {
      cursor: pointer;
    }

    .igv-zoom-in-notice-container {
      z-index: 1024;
      position: absolute;
      top: 8px;
      left: 50%;
      transform: translate(-50%, 0%);
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      justify-content: center;
      align-items: center;
      background-color: white;
    }
    .igv-zoom-in-notice-container > div {
      padding-left: 4px;
      padding-right: 4px;
      padding-top: 2px;
      padding-bottom: 2px;
      width: 100%;
      height: 100%;
      font-family: "Open Sans", sans-serif;
      font-size: 14px;
      font-weight: 400;
      color: #3f3f3f;
    }

    .igv-zoom-in-notice {
      position: absolute;
      top: 10px;
      left: 50%;
    }
    .igv-zoom-in-notice div {
      position: relative;
      left: -50%;
      font-family: "Open Sans", sans-serif;
      font-size: medium;
      font-weight: 400;
      color: #3f3f3f;
      background-color: rgba(255, 255, 255, 0.51);
      z-index: 64;
    }

    .igv-container-spinner {
      position: absolute;
      top: 90%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1024;
      width: 24px;
      height: 24px;
      pointer-events: none;
      color: #737373;
    }

    .igv-multi-locus-close-button {
      position: absolute;
      top: 2px;
      right: 0;
      padding-left: 2px;
      padding-right: 2px;
      width: 12px;
      height: 12px;
      color: #666666;
      background-color: white;
      z-index: 1000;
    }
    .igv-multi-locus-close-button > svg {
      vertical-align: top;
    }

    .igv-multi-locus-close-button:hover {
      cursor: pointer;
      color: #434343;
    }

    .igv-multi-locus-ruler-label {
      z-index: 64;
      position: absolute;
      top: 2px;
      left: 0;
      width: 100%;
      height: 12px;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: center;
      align-items: center;
    }
    .igv-multi-locus-ruler-label > div {
      font-family: "Open Sans", sans-serif;
      font-size: 12px;
      color: rgb(16, 16, 16);
      background-color: white;
    }
    .igv-multi-locus-ruler-label > div {
      cursor: pointer;
    }

    .igv-multi-locus-ruler-label-square-dot {
      z-index: 64;
      position: absolute;
      left: 50%;
      top: 5%;
      transform: translate(-50%, 0%);
      background-color: white;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-multi-locus-ruler-label-square-dot > div:first-child {
      width: 14px;
      height: 14px;
    }
    .igv-multi-locus-ruler-label-square-dot > div:last-child {
      margin-left: 16px;
      font-family: "Open Sans", sans-serif;
      font-size: 14px;
      font-weight: 400;
      color: rgb(16, 16, 16);
    }

    .igv-ruler-sweeper {
      display: none;
      pointer-events: none;
      position: absolute;
      top: 26px;
      bottom: 0;
      left: 0;
      width: 0;
      z-index: 99999;
      background-color: rgba(68, 134, 247, 0.25);
    }

    .igv-ruler-tooltip {
      pointer-events: none;
      z-index: 128;
      position: absolute;
      top: 0;
      left: 0;
      width: 1px;
      height: 32px;
      background-color: transparent;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-ruler-tooltip > div {
      pointer-events: none;
      width: 128px;
      height: auto;
      padding: 1px;
      color: #373737;
      font-size: 10px;
      font-family: "Open Sans", sans-serif;
      font-weight: 400;
      background-color: white;
      border-style: solid;
      border-width: thin;
      border-color: #373737;
    }

    .igv-track-label {
      position: absolute;
      left: 8px;
      top: 8px;
      width: auto;
      height: auto;
      max-width: 50%;
      padding-left: 4px;
      padding-right: 4px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-family: "Open Sans", sans-serif;
      font-size: small;
      font-weight: 400;
      text-align: center;
      user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      border-color: #444;
      border-radius: 2px;
      border-style: solid;
      border-width: thin;
      background-color: white;
      z-index: 128;
      cursor: pointer;
    }

    .igv-track-label:hover,
    .igv-track-label:focus,
    .igv-track-label:active {
      background-color: #e8e8e8;
    }

    .igv-track-label-popup-shim {
      padding-left: 8px;
      padding-right: 8px;
      padding-top: 4px;
    }

    .igv-center-line {
      display: none;
      pointer-events: none;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      z-index: 8;
      user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      border-left-style: dashed;
      border-left-width: thin;
      border-right-style: dashed;
      border-right-width: thin;
    }

    .igv-center-line-wide {
      background-color: rgba(0, 0, 0, 0);
      border-left-color: rgba(127, 127, 127, 0.51);
      border-right-color: rgba(127, 127, 127, 0.51);
    }

    .igv-center-line-thin {
      background-color: rgba(0, 0, 0, 0);
      border-left-color: rgba(127, 127, 127, 0.51);
      border-right-color: rgba(0, 0, 0, 0);
    }

    .igv-cursor-guide-horizontal {
      display: none;
      pointer-events: none;
      user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      position: absolute;
      left: 0;
      right: 0;
      top: 50%;
      height: 1px;
      z-index: 1;
      margin-left: 50px;
      margin-right: 54px;
      border-top-style: dotted;
      border-top-width: thin;
      border-top-color: rgba(127, 127, 127, 0.76);
    }

    .igv-cursor-guide-vertical {
      pointer-events: none;
      user-select: none;
      -moz-user-select: none;
      -webkit-user-select: none;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 50%;
      width: 1px;
      z-index: 1;
      border-left-style: dotted;
      border-left-width: thin;
      border-left-color: rgba(127, 127, 127, 0.76);
      display: none;
    }

    .igv-user-feedback {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 512px;
      height: 360px;
      z-index: 2048;
      background-color: white;
      border-color: #a2a2a2;
      border-style: solid;
      border-width: thin;
      font-family: "Open Sans", sans-serif;
      font-size: medium;
      font-weight: 400;
      color: #444;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-user-feedback div:first-child {
      position: relative;
      height: 24px;
      width: 100%;
      background-color: white;
      border-bottom-color: #a2a2a2;
      border-bottom-style: solid;
      border-bottom-width: thin;
    }
    .igv-user-feedback div:first-child div {
      position: absolute;
      top: 2px;
      width: 16px;
      height: 16px;
      background-color: transparent;
    }
    .igv-user-feedback div:first-child div:first-child {
      left: 8px;
    }
    .igv-user-feedback div:first-child div:last-child {
      cursor: pointer;
      right: 8px;
    }
    .igv-user-feedback div:last-child {
      width: 100%;
      height: calc(100% - 24px);
      border-width: 0;
    }
    .igv-user-feedback div:last-child div {
      width: auto;
      height: auto;
      margin: 8px;
    }

    .igv-generic-dialog-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 300px;
      height: 200px;
      border-color: #7F7F7F;
      border-radius: 4px;
      border-style: solid;
      border-width: thin;
      font-family: "Open Sans", sans-serif;
      font-size: medium;
      font-weight: 400;
      z-index: 2048;
      background-color: white;
      display: flex;
      flex-flow: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-generic-dialog-container .igv-generic-dialog-header {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-end;
      align-items: center;
      width: 100%;
      height: 24px;
      cursor: move;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-bottom-color: #7F7F7F;
      border-bottom-style: solid;
      border-bottom-width: thin;
      background-color: #eee;
    }
    .igv-generic-dialog-container .igv-generic-dialog-header div {
      margin-right: 4px;
      margin-bottom: 2px;
      height: 12px;
      width: 12px;
      color: #7F7F7F;
    }
    .igv-generic-dialog-container .igv-generic-dialog-header div:hover {
      cursor: pointer;
      color: #444;
    }
    .igv-generic-dialog-container .igv-generic-dialog-one-liner {
      color: #373737;
      width: 95%;
      height: 24px;
      line-height: 24px;
      text-align: left;
      margin-top: 8px;
      padding-left: 8px;
      overflow-wrap: break-word;
      background-color: white;
    }
    .igv-generic-dialog-container .igv-generic-dialog-label-input {
      margin-top: 8px;
      width: 95%;
      height: 24px;
      color: #373737;
      line-height: 24px;
      padding-left: 8px;
      background-color: white;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-generic-dialog-container .igv-generic-dialog-label-input div {
      width: 30%;
      height: 100%;
      font-size: 16px;
      text-align: right;
      padding-right: 8px;
      background-color: white;
    }
    .igv-generic-dialog-container .igv-generic-dialog-label-input input {
      display: block;
      height: 100%;
      width: 100%;
      padding-left: 4px;
      font-family: "Open Sans", sans-serif;
      font-weight: 400;
      color: #373737;
      text-align: left;
      outline: none;
      border-style: solid;
      border-width: thin;
      border-color: #7F7F7F;
      background-color: white;
    }
    .igv-generic-dialog-container .igv-generic-dialog-label-input input {
      width: 50%;
      font-size: 16px;
    }
    .igv-generic-dialog-container .igv-generic-dialog-input {
      margin-top: 8px;
      width: calc(100% - 16px);
      height: 24px;
      color: #373737;
      line-height: 24px;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-around;
      align-items: center;
    }
    .igv-generic-dialog-container .igv-generic-dialog-input input {
      display: block;
      height: 100%;
      width: 100%;
      padding-left: 4px;
      font-family: "Open Sans", sans-serif;
      font-weight: 400;
      color: #373737;
      text-align: left;
      outline: none;
      border-style: solid;
      border-width: thin;
      border-color: #7F7F7F;
      background-color: white;
    }
    .igv-generic-dialog-container .igv-generic-dialog-input input {
      font-size: 16px;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel {
      width: 100%;
      height: 28px;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-around;
      align-items: center;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div {
      margin-top: 32px;
      color: white;
      font-family: "Open Sans", sans-serif;
      font-size: 14px;
      font-weight: 400;
      width: 75px;
      height: 28px;
      line-height: 28px;
      text-align: center;
      border-color: transparent;
      border-style: solid;
      border-width: thin;
      border-radius: 2px;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child {
      margin-left: 32px;
      margin-right: 0;
      background-color: #5ea4e0;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child {
      margin-left: 0;
      margin-right: 32px;
      background-color: #c4c4c4;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child:hover {
      cursor: pointer;
      background-color: #3b5c7f;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child:hover {
      cursor: pointer;
      background-color: #7f7f7f;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok {
      width: 100%;
      height: 36px;
      margin-top: 32px;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-around;
      align-items: center;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok div {
      width: 98px;
      height: 36px;
      line-height: 36px;
      text-align: center;
      color: white;
      font-family: "Open Sans", sans-serif;
      font-size: medium;
      font-weight: 400;
      border-color: white;
      border-style: solid;
      border-width: thin;
      border-radius: 4px;
      background-color: #2B81AF;
    }
    .igv-generic-dialog-container .igv-generic-dialog-ok div:hover {
      cursor: pointer;
      background-color: #25597f;
    }

    .igv-generic-container {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 2048;
      background-color: white;
      cursor: pointer;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-generic-container div:first-child {
      cursor: move;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-end;
      align-items: center;
      height: 24px;
      width: 100%;
      background-color: #dddddd;
    }
    .igv-generic-container div:first-child i {
      display: block;
      color: #5f5f5f;
      cursor: pointer;
      width: 14px;
      height: 14px;
      margin-right: 8px;
      margin-bottom: 4px;
    }

    .igv-menu-popup {
      position: absolute;
      top: 0;
      left: 0;
      width: max-content;
      z-index: 4096;
      cursor: pointer;
      font-family: "Open Sans", sans-serif;
      font-size: small;
      font-weight: 400;
      color: #4b4b4b;
      background: white;
      border-radius: 4px;
      border-color: #7F7F7F;
      border-style: solid;
      border-width: thin;
      display: flex;
      flex-flow: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-end;
      text-align: left;
    }
    .igv-menu-popup > div:not(:first-child) {
      width: 100%;
    }
    .igv-menu-popup > div:not(:first-child) > div {
      background: white;
    }
    .igv-menu-popup > div:not(:first-child) > div.context-menu {
      padding-left: 4px;
      padding-right: 4px;
    }
    .igv-menu-popup > div:not(:first-child) > div:last-child {
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
      border-bottom-color: transparent;
      border-bottom-style: solid;
      border-bottom-width: thin;
    }
    .igv-menu-popup > div:not(:first-child) > div:hover {
      background: #efefef;
    }

    .igv-menu-popup-shim {
      padding-left: 8px;
      padding-right: 8px;
      padding-bottom: 1px;
      padding-top: 1px;
    }

    .igv-menu-popup-header {
      position: relative;
      width: 100%;
      height: 24px;
      cursor: move;
      border-top-color: transparent;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-bottom-color: #7F7F7F;
      border-bottom-style: solid;
      border-bottom-width: thin;
      background-color: #eee;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-end;
      align-items: center;
    }
    .igv-menu-popup-header div {
      margin-right: 4px;
      height: 12px;
      width: 12px;
      color: #7F7F7F;
    }
    .igv-menu-popup-header div:hover {
      cursor: pointer;
      color: #444;
    }

    .igv-menu-popup-check-container {
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
      width: 100%;
      height: 20px;
      margin-right: 4px;
      background-color: transparent;
    }
    .igv-menu-popup-check-container div {
      padding-top: 2px;
      padding-left: 8px;
    }
    .igv-menu-popup-check-container div:first-child {
      position: relative;
      width: 12px;
      height: 12px;
    }
    .igv-menu-popup-check-container div:first-child svg {
      position: absolute;
      width: 12px;
      height: 12px;
    }

    .igv-user-feedback {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 512px;
      height: 360px;
      z-index: 2048;
      background-color: white;
      border-color: #a2a2a2;
      border-style: solid;
      border-width: thin;
      font-family: "Open Sans", sans-serif;
      font-size: medium;
      font-weight: 400;
      color: #444;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
    }
    .igv-user-feedback div:first-child {
      position: relative;
      height: 24px;
      width: 100%;
      background-color: white;
      border-bottom-color: #a2a2a2;
      border-bottom-style: solid;
      border-bottom-width: thin;
    }
    .igv-user-feedback div:first-child div {
      position: absolute;
      top: 2px;
      width: 16px;
      height: 16px;
      background-color: transparent;
    }
    .igv-user-feedback div:first-child div:first-child {
      left: 8px;
    }
    .igv-user-feedback div:first-child div:last-child {
      cursor: pointer;
      right: 8px;
    }
    .igv-user-feedback div:last-child {
      width: 100%;
      height: calc(100% - 24px);
      border-width: 0;
    }
    .igv-user-feedback div:last-child div {
      width: auto;
      height: auto;
      margin: 8px;
    }

    .igv-loading-spinner-container {
      z-index: 1024;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 32px;
      height: 32px;
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      justify-content: center;
      align-items: center;
    }
    .igv-loading-spinner-container > div {
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      border: 4px solid rgba(128, 128, 128, 0.5);
      border-top-color: rgb(255, 255, 255);
      animation: spin 1s ease-in-out infinite;
      -webkit-animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      }
    }
    @-webkit-keyframes spin {
      to {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      }
    }
    .igv-roi-menu-next-gen {
      position: absolute;
      z-index: 512;
      font-family: "Open Sans", sans-serif;
      font-size: small;
      font-weight: 400;
      color: #4b4b4b;
      background-color: white;
      width: 192px;
      border-radius: 4px;
      border-color: #7F7F7F;
      border-style: solid;
      border-width: thin;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
    }
    .igv-roi-menu-next-gen > div:first-child {
      height: 24px;
      border-top-color: transparent;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-bottom-color: #7F7F7F;
      border-bottom-style: solid;
      border-bottom-width: thin;
      background-color: #eee;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: flex-end;
      align-items: center;
    }
    .igv-roi-menu-next-gen > div:first-child > div {
      margin-right: 4px;
      height: 12px;
      width: 12px;
      color: #7F7F7F;
    }
    .igv-roi-menu-next-gen > div:first-child > div:hover {
      cursor: pointer;
      color: #444;
    }
    .igv-roi-menu-next-gen > div:last-child {
      background-color: white;
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
      border-bottom-color: transparent;
      border-bottom-style: solid;
      border-bottom-width: 0;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
      text-align: start;
      vertical-align: middle;
    }
    .igv-roi-menu-next-gen > div:last-child > div {
      height: 24px;
      padding-left: 4px;
      border-bottom-style: solid;
      border-bottom-width: thin;
      border-bottom-color: #7f7f7f;
    }
    .igv-roi-menu-next-gen > div:last-child > div:not(:first-child):hover {
      background-color: rgba(127, 127, 127, 0.1);
    }
    .igv-roi-menu-next-gen > div:last-child div:first-child {
      font-style: italic;
      text-align: center;
      padding-right: 4px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .igv-roi-menu-next-gen > div:last-child > div:last-child {
      border-bottom-width: 0;
      border-bottom-color: transparent;
    }

    .igv-roi-placeholder {
      font-style: normal;
      color: rgba(75, 75, 75, 0.6);
    }

    .igv-roi-table {
      position: absolute;
      z-index: 1024;
      width: min-content;
      max-width: 1600px;
      border-color: #7f7f7f;
      border-radius: 4px;
      border-style: solid;
      border-width: thin;
      font-family: "Open Sans", sans-serif;
      font-size: 12px;
      font-weight: 400;
      background-color: white;
      display: flex;
      flex-flow: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
      cursor: default;
    }
    .igv-roi-table > div {
      height: 24px;
      font-size: 14px;
      text-align: start;
      vertical-align: middle;
      line-height: 24px;
    }
    .igv-roi-table > div:first-child {
      border-color: transparent;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-top-width: 0;
      border-bottom-color: #7f7f7f;
      border-bottom-style: solid;
      border-bottom-width: thin;
      background-color: #eee;
      cursor: move;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      align-items: center;
    }
    .igv-roi-table > div:first-child > div:first-child {
      text-align: center;
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
      margin-left: 4px;
      margin-right: 4px;
      width: calc(100% - 4px - 12px);
    }
    .igv-roi-table > div:first-child > div:last-child {
      margin-right: 4px;
      margin-bottom: 2px;
      height: 12px;
      width: 12px;
      color: #7f7f7f;
    }
    .igv-roi-table > div:first-child > div:last-child > svg {
      display: block;
    }
    .igv-roi-table > div:first-child > div:last-child:hover {
      cursor: pointer;
      color: #444;
    }
    .igv-roi-table > .igv-roi-table-description {
      padding: 4px;
      margin-left: 4px;
      word-break: break-all;
      overflow-y: auto;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      background-color: transparent;
    }
    .igv-roi-table > .igv-roi-table-goto-explainer {
      margin-top: 5px;
      margin-left: 4px;
      color: #7F7F7F;
      font-style: italic;
      height: 24px;
      border-top: solid lightgray;
      background-color: transparent;
    }
    .igv-roi-table > .igv-roi-table-column-titles {
      height: 24px;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: stretch;
      align-items: stretch;
      padding-right: 16px;
      background-color: white;
      border-top-color: #7f7f7f;
      border-top-style: solid;
      border-top-width: thin;
      border-bottom-color: #7f7f7f;
      border-bottom-style: solid;
      border-bottom-width: thin;
    }
    .igv-roi-table > .igv-roi-table-column-titles > div {
      font-size: 14px;
      vertical-align: middle;
      line-height: 24px;
      text-align: left;
      margin-left: 4px;
      height: 24px;
      overflow: hidden;
      text-overflow: ellipsis;
      border-right-color: #7f7f7f;
      border-right-style: solid;
      border-right-width: thin;
    }
    .igv-roi-table > .igv-roi-table-column-titles > div:last-child {
      border-right: unset;
    }
    .igv-roi-table > .igv-roi-table-row-container {
      overflow: auto;
      resize: both;
      max-width: 1600px;
      height: 360px;
      background-color: transparent;
      display: flex;
      flex-flow: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
    }
    .igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row {
      height: 24px;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: stretch;
      align-items: stretch;
    }
    .igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row > div {
      font-size: 14px;
      vertical-align: middle;
      line-height: 24px;
      text-align: left;
      margin-left: 4px;
      height: 24px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      border-right-color: transparent;
      border-right-style: solid;
      border-right-width: thin;
    }
    .igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row > div:last-child {
      border-right: unset;
    }
    .igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row-hover {
      background-color: rgba(0, 0, 0, 0.04);
    }
    .igv-roi-table > div:last-child {
      height: 32px;
      line-height: 32px;
      border-top-color: #7f7f7f;
      border-top-style: solid;
      border-top-width: thin;
      border-bottom-color: transparent;
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
      border-bottom-width: 0;
      background-color: #eee;
      display: flex;
      flex-flow: row;
      flex-wrap: nowrap;
      justify-content: space-around;
      align-items: center;
    }

    .igv-roi-table-row-selected {
      background-color: rgba(0, 0, 0, 0.125);
    }

    .igv-roi-table-button {
      cursor: pointer;
      height: 20px;
      user-select: none;
      line-height: 20px;
      text-align: center;
      vertical-align: middle;
      font-family: "Open Sans", sans-serif;
      font-size: 13px;
      font-weight: 400;
      color: black;
      padding-left: 6px;
      padding-right: 6px;
      background-color: rgb(239, 239, 239);
      border-color: black;
      border-style: solid;
      border-width: thin;
      border-radius: 3px;
    }

    .igv-roi-table-button:hover {
      font-weight: 400;
      background-color: rgba(0, 0, 0, 0.13);
    }

    .igv-roi-region {
      z-index: 64;
      position: absolute;
      top: 0;
      bottom: 0;
      pointer-events: none;
      overflow: visible;
      margin-top: 44px;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
    }
    .igv-roi-region > div {
      position: relative;
      width: 100%;
      height: 8px;
      pointer-events: auto;
    }

    .igv-roi-menu {
      position: absolute;
      z-index: 1024;
      width: 144px;
      border-color: #7f7f7f;
      border-radius: 4px;
      border-style: solid;
      border-width: thin;
      font-family: "Open Sans", sans-serif;
      background-color: white;
      display: flex;
      flex-flow: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
    }
    .igv-roi-menu > div:not(:last-child) {
      border-bottom-color: rgba(128, 128, 128, 0.5);
      border-bottom-style: solid;
      border-bottom-width: thin;
    }
    .igv-roi-menu > div:first-child {
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-top-color: transparent;
      border-top-style: solid;
      border-top-width: 0;
    }
    .igv-roi-menu > div:last-child {
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
      border-bottom-color: transparent;
      border-bottom-style: solid;
      border-bottom-width: 0;
    }

    .igv-roi-menu-row {
      height: 24px;
      padding-left: 8px;
      font-size: small;
      text-align: start;
      vertical-align: middle;
      line-height: 24px;
      background-color: white;
    }

    .igv-roi-menu-row-edit-description {
      width: -webkit-fill-available;
      font-size: small;
      text-align: start;
      vertical-align: middle;
      background-color: white;
      padding-left: 4px;
      padding-right: 4px;
      padding-bottom: 4px;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: stretch;
      align-items: stretch;
    }
    .igv-roi-menu-row-edit-description > label {
      margin-left: 2px;
      margin-bottom: 0;
      display: block;
      width: -webkit-fill-available;
    }
    .igv-roi-menu-row-edit-description > input {
      display: block;
      margin-left: 2px;
      margin-right: 2px;
      margin-bottom: 1px;
      width: -webkit-fill-available;
    }

    .igv-container {
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      padding-top: 4px;
      user-select: none;
      -webkit-user-select: none;
      -ms-user-select: none;
    }

    .igv-viewport {
      position: relative;
      margin-top: 5px;
      line-height: 1;
      overflow-x: hidden;
      overflow-y: hidden;
    }

    .igv-viewport-content {
      position: relative;
      width: 100%;
    }
    .igv-viewport-content > canvas {
      position: relative;
      display: block;
    }

    .igv-column-container {
      position: relative;
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: stretch;
      width: 100%;
    }

    .igv-column-shim {
      width: 1px;
      margin-left: 2px;
      margin-right: 2px;
      background-color: #545453;
    }

    .igv-column {
      position: relative;
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      box-sizing: border-box;
      height: 100%;
    }

    .igv-axis-column {
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      box-sizing: border-box;
      height: 100%;
      width: 50px;
    }
    .igv-axis-column > div {
      margin-top: 5px;
      width: 100%;
    }

    .igv-sample-name-column {
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      box-sizing: border-box;
      height: 100%;
    }

    .igv-scrollbar-column {
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      box-sizing: border-box;
      height: 100%;
      width: 14px;
    }
    .igv-scrollbar-column > div {
      position: relative;
      margin-top: 5px;
      width: 14px;
    }
    .igv-scrollbar-column > div > div {
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 2px;
      width: 8px;
      border-width: 1px;
      border-style: solid;
      border-color: #c4c4c4;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
    }
    .igv-scrollbar-column > div > div:hover {
      background-color: #c4c4c4;
    }

    .igv-track-drag-column {
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      box-sizing: border-box;
      height: 100%;
      width: 12px;
      background-color: white;
    }
    .igv-track-drag-column > .igv-track-drag-handle {
      z-index: 512;
      position: relative;
      cursor: pointer;
      margin-top: 5px;
      width: 100%;
      border-style: solid;
      border-width: 0;
      border-top-right-radius: 6px;
      border-bottom-right-radius: 6px;
      background-color: #c4c4c4;
    }
    .igv-track-drag-column .igv-track-drag-handle-hover {
      background-color: #787878;
    }
    .igv-track-drag-column > .igv-track-drag-shim {
      position: relative;
      margin-top: 5px;
      width: 100%;
      border-style: solid;
      border-width: 0;
    }

    .igv-gear-menu-column {
      position: relative;
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: flex-start;
      box-sizing: border-box;
      height: 100%;
      width: 28px;
    }
    .igv-gear-menu-column > div {
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
      justify-content: flex-start;
      align-items: center;
      margin-top: 5px;
      width: 100%;
      background: white;
    }
    .igv-gear-menu-column > div > div {
      position: relative;
      margin-top: 4px;
      width: 16px;
      height: 16px;
      color: #7F7F7F;
    }
    .igv-gear-menu-column > div > div:hover {
      cursor: pointer;
      color: #444;
    }
    """
    return css,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1241
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1241
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1241.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.5"
#+BEGIN_SRC python
__generated_with = "0.4.5"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import leafmap.foliumap as leafmap

    m = leafmap.Map(center=(40, -100), zoom=4)
    return leafmap, m, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(m):
    m  # Using our custom formatter
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(m, mo):
    mo.Html(m._repr_html_())  # Using the built-in ipython formatter
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1270
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1270
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1270.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.10"
#+BEGIN_SRC python
__generated_with = "0.4.10"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl

    pl.DataFrame(data=[{'num': [1], 'x': [2]}]).group_by('num').map_groups(lambda x: pl.DataFrame(data=123))
    return mo, pl

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1271
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1271
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1271.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.7"
#+BEGIN_SRC python
__generated_with = "0.4.7"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    with mo.status.spinner(remove_on_exit=False):
        pass
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    counter_button = mo.ui.button(
        value=0, on_click=lambda value: value + 1, label="increment"
    )
    counter_button
    return counter_button,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(counter_button, mo):
    mo.vstack([
        counter_button.value,
        mo.status.spinner(remove_on_exit=False) if counter_button.value < 3 else mo.md("Done!"),
    ])
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1273
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1273
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1273.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.7"
#+BEGIN_SRC python
__generated_with = "0.4.7"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import plotly.express as px
    return mo, px

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    s = mo.ui.range_slider(start=-5, stop=5, show_value=True, label='x range')
    x, y = list(range(10)), [i * i for i in range(-5, 5)]
    return s, x, y

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, px, s, x, y):
    # takes affect when using the slider
    mo.vstack([
        s,
        px.scatter(x=x, y=y, range_x=s.value, title=f'range_x: {s.value}')
    ])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, px, s, x, y):
    # takes affect when using the slider
    # also is zoom/range is persisted across app view, but reset when the slider changes the range
    plot = mo.ui.plotly(px.scatter(x=x, y=y, range_x=s.value, title=f'range_x: {s.value}'))
    plot
    return plot,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1274
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1274
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1274.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.


import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.7"
#+BEGIN_SRC python
__generated_with = "0.4.7"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
async def __():
    import asyncio
    print("hello")
    await asyncio.sleep(1)
    print("world")
    await asyncio.sleep(1)
    print("last one")
    return asyncio,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1279
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1279
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1279.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.7"
#+BEGIN_SRC python
__generated_with = "0.4.7"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    import polars as pl
    alt.data_transformers.enable("marimo_csv")

    counts = pl.DataFrame(
        {
            "category": ["A", "D", "E", "G", "M", "A1", "A2", "G1", "G2", "G3", "G4"],
            "count": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],
        }
    )

    (
        alt.Chart(counts.to_pandas())
        .encode(
            y="count",
            x=alt.X(
                "category",
            ),
        )
        .mark_bar()
    )
    return alt, counts, pl

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1291
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1291
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1291.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.9"
#+BEGIN_SRC python
__generated_with = "0.4.9"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import altair as alt
    import polars as pl

    counts = pl.DataFrame(
        {
            "category": ["C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11"],
            "count": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],
        }
    )

    chart1 = (
        alt.Chart(counts.to_pandas())
        .encode(
            y="count",
            x=alt.X(
                "category",
            ),
        )
        .mark_bar(color="blue")
    )

    chart2 = (
        alt.Chart(counts.to_pandas())
        .encode(
            y="count",
            x=alt.X(
                "category",
            ),
        )
        .mark_bar(color="red")
    )

    mo.vstack(
        [
            chart1,
            chart2
        ]
    )
    return alt, chart1, chart2, counts, mo, pl

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1311
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1311
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1311.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.11"
#+BEGIN_SRC python
__generated_with = "0.4.11"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    all_flights = pd.read_parquet(
    "https://vegafusion-datasets.s3.amazonaws.com/vega/flights_1m.parquet"
    )
    return all_flights,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(all_flights, mo):
    mo.ui.table(all_flights)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(all_flights, mo):
    mo.ui.table(all_flights[0:10])
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1312
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1312
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1312.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.11"
#+BEGIN_SRC python
__generated_with = "0.4.11"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.DataFrame({"a": [1, 2, 3], "b": [1, 2, 3], "c": [1, 2, 3]})
    renamed = df.rename({"b": "a"}, axis=1)
    renamed
    return df, renamed

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, renamed):
    mo.ui.table(renamed)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1319
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1319
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1319.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.11"
#+BEGIN_SRC python
__generated_with = "0.4.11"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    return pd,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import random


    def row(columns):
        return [
            "".join(random.choices("abcdefghikjlmnopqrstuvwxyz", k=8)),
            "".join(random.choices("abcdefghikjlmnopqrstuvwxyz", k=8)),
        ] + [random.randint(1000, 100000) for i in range(columns - 2)]
    return random, row

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd, row):
    df = pd.DataFrame([row(3) for _ in range(10)])
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    uidf = mo.ui.dataframe(df)
    uidf
    return uidf,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1351
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1351
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1351.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    themes = ["dark_minimal", "light_minimal", "contrast", "night_sky", "caliber"]
    selected_theme = mo.ui.radio(themes, label="Theme", value="dark_minimal")
    selected_theme
    return selected_theme, themes

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(selected_theme):
    import polars as pl
    import holoviews as hv
    import hvplot.polars

    hv.extension("bokeh")
    hvplot.extension("bokeh")
    hv.renderer("bokeh").theme = selected_theme.value
    return hv, hvplot, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pl):
    df = pl.DataFrame({"a": range(1, 10), "b": range(1, 10)})
    df.plot.line(
        x="a",
        y="b",
    )
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(selected_theme):
    from bokeh.plotting import curdoc, figure

    x = [1, 2, 3, 4, 5]
    y = [6, 7, 6, 4, 5]

    curdoc().theme = selected_theme.value

    p = figure(width=300, height=300)
    p.line(x, y)

    p
    return curdoc, figure, p, x, y

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1362
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1362
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1362.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.5.2"
#+BEGIN_SRC python
__generated_with = "0.5.2"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    """
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell

    """
    qwerty = 10
    return qwerty,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(qwerty):
    """
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell
    hello, this is a cell

    """
    a = f"{qwerty} 10"
    return a,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(a):
    a
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1510
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1510
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1510.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.11"
#+BEGIN_SRC python
__generated_with = "0.6.11"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import matplotlib.pyplot as plt
    plt.plot([1, 2])
    plt.legend(["asdf"], bbox_to_anchor=(1.2, 0.5))
    return plt,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(plt):
    plt.plot([1, 2])
    plt.legend(["asdf"], bbox_to_anchor=(1.2, 0.5))
    plt.show()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import matplotlib
    backend = matplotlib.get_backend()
    backend
    return backend, matplotlib

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1530
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1530
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1530.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.13"
#+BEGIN_SRC python
__generated_with = "0.6.13"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.DataFrame(
        {
            "col$special": [1, 2, 3],
            "col@char": [4, 5, 6],
            'col"quote"': [7, 8, 9],
            "col'singlequote'": [10, 11, 12],
            "col<angles>": [13, 14, 15],
            "col{brace}": [16, 17, 18],
            "col[brackets]": [16, 17, 18],
            "col&and": [19, 20, 21],
            "col.period": [19, 20, 21],
            "col\\backslash": [19, 20, 21],
            "col\\backslash.period": [19, 20, 21],
        }
    )
    df
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.dataframe(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.data_explorer(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    return alt,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1545
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1545
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1545.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.14"
#+BEGIN_SRC python
__generated_with = "0.6.14"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    import marimo as mo
    import pandas as pd
    return alt, mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.DataFrame(
        data={
            "annotation": ["w", "x", "y", "a", "b", "c", "d", "e", "f", "g"],
            "x": [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6],
            "y": pd.Series(
                [9, 4, 1, 0, 1, 4, 9, 16, 25, 36],
                index=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            ),
        },
        index=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    )
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df, pd):
    scatter = alt.Chart(df).mark_point().encode(x="x", y="y", tooltip="annotation")
    y_line = (
        alt.Chart(pd.DataFrame({"var1": [0, 0], "var2": [0, 40]}))
        .mark_line(color="grey")
        .encode(alt.X("var1"), alt.Y("var2"))
    )
    return scatter, y_line

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, mo, scatter, y_line):
    layer_plot = mo.ui.altair_chart(
        alt.layer(scatter, y_line)
        .configure_axis(grid=False)
        .configure_view(strokeWidth=0)
    )

    layer_plot
    return layer_plot,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(layer_plot):
    layer_plot.selections
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(layer_plot):
    print(layer_plot.value)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, layer_plot):
    print(layer_plot.apply_selection(df))
    # should return a table of selected points based on the scatter plot
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1586
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1586
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1586.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.17"
#+BEGIN_SRC python
__generated_with = "0.6.17"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import time
    import ibis

    start = time.time()
    df = ibis.read_csv(
        "https://raw.githubusercontent.com/elmoallistair/datasets/main/airlines.csv"
    )
    end = time.time()
    print(f"Time to read csv: {(end - start) * 1000}ms")
    start = time.time()
    from marimo._plugins.ui._impl.tables.utils import get_table_manager_or_none

    print("Columns:", df.__dataframe__().num_columns())
    manager = get_table_manager_or_none(df)
    print("Column types:", manager.get_field_types())
    # Print rows takes much longer
    # print(df.__dataframe__().num_rows())
    end = time.time()
    print(f"Time to read from datatable: {(end - start) * 1000}ms")
    return df, end, get_table_manager_or_none, ibis, manager, start, time

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1602
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1602
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1602.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.17"
#+BEGIN_SRC python
__generated_with = "0.6.17"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    class Boom:
        def __getattr__(self, _):
            return ...
    return Boom,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(Boom):
    b = Boom()
    return b,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(b):
    callable(b.__dataframe__)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1654-virtualize-multiselect
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1654-virtualize-multiselect
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1654-virtualize-multiselect.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.20"
#+BEGIN_SRC python
__generated_with = "0.8.20"

#+END_SRC
*** Assignment app = marimo.App(app_title="1654 - Virtualize Multiselect")
#+BEGIN_SRC python
app = marimo.App(app_title="1654 - Virtualize Multiselect")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    fuzzy_match_test = ["foo bar", "bar foo", "foob", "foobar", "barfoo"]
    mo.ui.multiselect(fuzzy_match_test, label="Fuzzy match test")
    return (fuzzy_match_test,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    (
        mo.ui.multiselect([], label="Empty"),
        mo.ui.multiselect(["1", "2"], label="2 items"),
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, xs_list):
    v = mo.ui.multiselect(xs_list, label="Extra small list with 10 items")
    v
    return (v,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(v):
    print(v.value)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, sm_list):
    mo.ui.multiselect(sm_list, label="Small list with 100 items")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(md_list, mo):
    mo.ui.multiselect(md_list, label="Medium list with 500 items")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(lg_list, mo):
    mo.ui.multiselect(lg_list, label="Large list with 1K items")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, xl_list):
    mo.ui.multiselect(xl_list, label="XL list with 10K items")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, xxl_list):
    mo.ui.multiselect(xxl_list, label="XXL list with 100K items")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, xxxl_list):
    try:
        mo.ui.multiselect(xxxl_list, label="XXXL list with 200K items")
    except ValueError as e:
        print(e)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    RANGE = 10000
    xs_list = [f"Row {i}" for i in range(RANGE // 1000)]
    sm_list = [f"Row {i}" for i in range(RANGE // 100)]
    md_list = [f"Row {i}" for i in range(RANGE // 20)]
    lg_list = [f"Row {i}" for i in range(RANGE // 10)]
    xl_list = [f"Row {i}" for i in range(RANGE)]
    xxl_list = [f"Row {i}" for i in range(RANGE * 10)]
    xxxl_list = [f"Row {i}" for i in range(RANGE * 20)]
    return (
        RANGE,
        lg_list,
        md_list,
        sm_list,
        xl_list,
        xs_list,
        xxl_list,
        xxxl_list,
    )

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1684
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1684
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1684.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.5"
#+BEGIN_SRC python
__generated_with = "0.7.5"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        $$
        \begin{align*}
        x &= 1 && \tag{Taylor} \\
        x &= 1123123123123123 && \tag{Taylor's rule} \\
        \end{align*}
        $$
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1689
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1689
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1689.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.23"
#+BEGIN_SRC python
__generated_with = "0.6.23"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd

    data = {"col3": range(3), "col1": [0, 1, 2], "col2": [6, 5, 4]}

    df = pd.DataFrame(data)
    df_with_index = pd.DataFrame(data, index=[0, 1, 2])
    df_with_named_index = pd.DataFrame(data)
    df_with_named_index.index.names = ["idx"]
    return data, df, df_with_index, df_with_named_index, mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    _data = pd.DataFrame(
        {
            "Animal": ["Falcon", "Falcon", "Parrot", "Parrot"],
            "Max Speed": [380.0, 370.0, 24.0, 26.0],
        }
    )
    agg_df = _data.groupby(["Animal"]).mean()
    return agg_df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, df_with_index, df_with_named_index):
    [
        df.index,
        df_with_index.index,
        df_with_named_index.index,
    ]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(agg_df, mo):
    mo.ui.table(agg_df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df_with_index, mo):
    mo.ui.table(df_with_index)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df_with_named_index, mo):
    mo.ui.table(df_with_named_index)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1706
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1706
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1706.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.25"
#+BEGIN_SRC python
__generated_with = "0.6.25"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl
    import numpy as np

    df = pl.DataFrame(
        {"a": [np.zeros(5) for i in range(5)]}, schema={"a": pl.Array(pl.Float64, 5)}
    )
    df
    return df, mo, np, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.plain(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    df.get_columns()[0].dtype
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1710
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1710
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1710.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.25"
#+BEGIN_SRC python
__generated_with = "0.6.25"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import os
    import keras
    model = keras.models.Sequential()
    model.add(keras.layers.Input(shape=(1,)))
    model.add(keras.layers.Dense(2, activation='relu'))
    model.add(keras.layers.Dense(1, activation='sigmoid'))
    keras.utils.plot_model(model)
    return keras, mo, model, os

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1711
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1711
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1711.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    import numpy as np

    d = pl.DataFrame({"a": [np.array(np.arange(5) + i) for i in range(5)]})
    res = d.select(
        pl.col("a").map_batches(
            lambda x: pl.Series(
                [{"filt_value": np.dot(x, x), "filt_phase": 5.0}], strict=False
            ),
            is_elementwise=True,
        ),
    )
    return d, np, pl, res

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(res):
    res
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1816
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1816
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1816.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.6"
#+BEGIN_SRC python
__generated_with = "0.7.6"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    dict1={"hello": mo.ui.text(label="world")}
    dict2=mo.ui.dictionary({k: v.form() for k, v in dict1.items()})
    dict2
    return dict1, dict2

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dict2):
    dict2.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1851
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1851
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1851.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.9"
#+BEGIN_SRC python
__generated_with = "0.7.9"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    raise ValueError("".join([str(i) for i in range(1000)]))
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1927
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1927
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1927.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.14"
#+BEGIN_SRC python
__generated_with = "0.7.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    breaker = []
    for i in range(5):
        breaker.append(breaker)
    breaker
    return breaker, i

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 1933
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.1933
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/1933.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.14"
#+BEGIN_SRC python
__generated_with = "0.7.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from vega_datasets import data
    return data,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    t = mo.ui.table(data.cars())
    return t,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, t):
    dictionary = mo.ui.dictionary({
        "cars": t
    })
    id(dictionary["cars"]), dictionary
    return dictionary,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(dictionary):
    dictionary.value["cars"]
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2000-explode-columns
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2000-explode-columns
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2000-explode-columns.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import polars as pl
    return mo, pd, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    list_data = [['meow1', 'meow2'], ['meow1', 'meow2', 'meow3'], ['meow'], ['a', 'b', 'c'], ['meow']]
    json_data = [
        {'acol': 'acol1', 'bcol': 'bcol1'},
        {'acol': 'acol2', 'bcol': 'bcol2'},
        {'acol': 'acol3', 'bcol': 'bcol3'},
        {'acol': 'acol4', 'bcol': 'bcol4'},
        {'acol': 'acol5', 'bcol': 'bcol5'}
    ]
    return json_data, list_data

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(json_data, list_data, pd, pl):
    df = pd.DataFrame()
    df['list_data'] = list_data
    df['json_data'] = json_data
    df2 = df.copy(deep=True)
    df4 = pl.DataFrame({
        "list_data": list_data,
        "json_data": json_data
    }, strict=True)
    df
    return df, df2, df4

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""### Transformations performed manually with pandas:""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, pd):
    df3 = df.copy(deep=True)
    df3 = df.join(pd.DataFrame(df.pop('json_data').values.tolist()))
    df3.explode('list_data')
    return df3,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""### Transformations on pandas dataframe using `mo.ui.dataframe`:""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df2, mo):
    mo.ui.dataframe(df2[['list_data', 'json_data']])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""### Transformations on polars dataframe using `mo.ui.dataframe`:""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df4, mo):
    mo.ui.dataframe(df4[['list_data', 'json_data']])
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2005
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2005
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2005.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.19"
#+BEGIN_SRC python
__generated_with = "0.7.19"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl
    import altair as alt

    alt.data_transformers.enable("marimo_csv")

    test_data = pl.DataFrame(
        {
            "name": ["Alice", "Bob", "Charlie", "David"],
            "salary": [50000, 60000, 75000, 55000],
        }
    )


    chart = (
        alt.Chart(test_data.to_pandas())
        .encode(
            y="salary",
            x="name",
        )
        .mark_point(color="red")
    )
    chart
    return alt, chart, mo, pl, test_data

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart, mo):
    mo.ui.altair_chart(chart)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2019-sql-refs
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2019-sql-refs
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2019-sql-refs.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.4"
#+BEGIN_SRC python
__generated_with = "0.8.4"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, my_table):
    _df = mo.sql(
        f"""
        SELECT * FROM my_table
        """
    )
    [mo.refs(), mo.defs()]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, my_view):
    _df = mo.sql(
        f"""
        SELECT * FROM my_view
        """
    )
    [mo.refs(), mo.defs()]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _df = mo.sql(
        f"""
        CREATE OR REPlACE TABLE my_table (a text);
        INSERT INTO my_table (VALUES ('foo'), ('bar'));
        """
    )
    [mo.refs(), mo.defs()]
    return my_table,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _df = mo.sql(
        f"""
        CREATE OR REPLACE VIEW my_view AS (SELECT * FROM my_table WHERE a LIKE 'f%o')
        """
    )
    [mo.refs(), mo.defs()]
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2070-latex-slides
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2070-latex-slides
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2070-latex-slides.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app
#+BEGIN_SRC python
app = marimo.App(
    width="medium",
    layout_file="layouts/2070-latex-slides.slides.json",
)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo

    mo.md("""
      ## Como detetar?

      - **Não existem testes estatísticos**
      - Alguns **indícios**
          - Coeficiente de correlação elevando entre pares de variáveis explicativas
          - A regressão de uma variável explicativas nas restantes produz um $R^2$ elevado
          - Acrescentar ou retirar observações provoca alterações significativa nos resultados
      - **Critério de diagnóstico:** VIF (*Variance Inflation Factor*)

      $$VIF \\equiv \frac{1}{(1-R^2_j)} > 10,\\quad j=1,\\dots,k$$

      em que $R^2_j$ é o $R^2$ da regressão da variável explicativa $j$ nas outras variáveis
    """)
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# 2""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# 3""")
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2137-realtime-markdown
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2137-realtime-markdown
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2137-realtime-markdown.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import time
    return mo, time

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(time):
    time.sleep(10)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        ### Realtime Markdown Editing
        Everything you type should update the cell output in realtime, which is pretty cool!

        | Feature           | Description                                            |
        |-------------------|--------------------------------------------------------|
        | Compact Size      | Small and versatile for display in various containers. |
        | Easy Maintenance  | Requires minimal care and indirect sunlight.           |
        | Unique Appearance | Spherical and soft, visually distinct.                 |
        | Oxygen Production | Helps oxygenate aquatic environments.                  |
        | Slow Growth       | Grows about 5 mm per year, keeping size manageable.    |
        | Longevity         | Can live for many years, even over a century.          |
        | Cultural Symbol   | In Japan, seen as good luck charms.                    |
        | Adaptable         | Thrives in various water conditions.                   |
        | Non-Invasive      | Won't overtake the environment like other plants.      |
        | Eco-Friendly      | Sustainable and environmentally safe.                  |

        ![](https://marimo.io/apple-touch-icon.png)
        """
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2146-admonitions
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2146-admonitions
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2146-admonitions.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.4"
#+BEGIN_SRC python
__generated_with = "0.8.4"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""
        Importa recordar as seguintes regras de diferenciação de matrizes:

        $$\frac{\partial\, u'v}{\partial\, v} = \frac{\partial\, v'u}{\partial\, v} = u$$

        sendo $u$ e $v$ dois vetores.

        $$\frac{\partial\, v'Av}{\partial\, v}=2Av=2v'A$$

        em que $A$ é uma matriz simétrica. No nosso caso, $A=X'X$ e $v=\hat{\boldsymbol{\beta}}$.
    """).center().callout()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        !!! tip ""

            Importa recordar as seguintes regras de diferenciação de matrizes:

            $$\frac{\partial\, u'v}{\partial\, v} = \frac{\partial\, v'u}{\partial\, v} = u$$

            sendo $u$ e $v$ dois vetores.

            $$\frac{\partial\, v'Av}{\partial\, v}=2Av=2v'A$$

            em que $A$ é uma matriz simétrica. No nosso caso, $A=X'X$ e $v=\hat{\boldsymbol{\beta}}$.
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion(
        {
            "Tip": mo.md(r"""
        Importa recordar as seguintes regras de diferenciação de matrizes:

        $$\frac{\partial\, u'v}{\partial\, v} = \frac{\partial\, v'u}{\partial\, v} = u$$

        sendo $u$ e $v$ dois vetores.

        $$\frac{\partial\, v'Av}{\partial\, v}=2Av=2v'A$$

        em que $A$ é uma matriz simétrica. No nosso caso, $A=X'X$ e $v=\hat{\boldsymbol{\beta}}$.
    """).center()
        }
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2173-accordion
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2173-accordion
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2173-accordion.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.7"
#+BEGIN_SRC python
__generated_with = "0.8.7"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion(
        {
            """**e)** Diria que o trabalho, a educação e a idade explicam muita da variação no sono? Que outros fatores poderiam afetar o tempo passado a dormir? Estarão esses fatores provavelmente correlacionados com o trabalho?""": """
        - Content
        """
        }
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2211-pandas-formatting
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2211-pandas-formatting
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2211-pandas-formatting.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.9"
#+BEGIN_SRC python
__generated_with = "0.8.9"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd

    # Need to set these settings to test if they get us in
    # a bad state
    pd.set_option("display.show_dimensions", "truncate")
    pd.set_option("display.max_rows", None)

    test_data = {
        "date_column": [
            "2015-11-02",
            "2015-11-05",
            "2015-11-06",
            "2015-11-19",
            "2015-11-23",
            "2015-11-27",
            "2015-12-01",
            "2015-12-08",
            "2015-12-09",
            "2015-12-18",
        ],
        "integer_column": [4, 1, 2, 3, 3, 1, 5, 4, 4, 1],
    }

    # Create the DataFrame
    df = pd.DataFrame(test_data)

    # Convert 'date_column' to datetime
    df["date_column"] = pd.to_datetime(df["date_column"])
    df.dtypes
    return df, pd, test_data

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2216-accordions
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2216-accordions
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2216-accordions.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.13"
#+BEGIN_SRC python
__generated_with = "0.8.13"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion(
        {
            """**e)** Diria que o trabalho, a educação e a idade explicam muita da variação no sono? Que outros fatores poderiam afetar o tempo passado a dormir? Estarão esses fatores provavelmente correlacionados com o trabalho?""": """
        - O $R^2 = 0.113$ é reduzido
        - Só 11.3% da variabilidade do sono é explicada pelas variáveis explicativas escolhidas para o modelo
        - Há fatores que ficaram de fora do modelo que podem influenciar o sono. Exemplos:
            - _Stress_
            - Idade dos filhos
            - Profissão
        """
        }
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion(
        {
            r"""**a)** Estime os coeficientes da regressão de $Y$ sobre $X_1$, bem como o error padrão da regressão e o $R^2$. O que pensa da estimativa de $\beta_1$?""": mo.md(
                """
                - Introduzindo o commando `regress Y X1` obtemos a estimação abaixo
                - A estimativa para $\beta_1$ é inesperada, pois contradiz a teoria económica de que existe uma relação negativa entre o preço e as vendas.
                """
            )
        }
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""**b)** Se o valor esperado de $X$ for a média dos seus dois valores referidos na alínea anterior, qual acha que será o valor esperado de $Y$? Confirme a sua resposta usando a lei das expectativas iteradas.""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.accordion(
        {
            """**b)** Se o valor esperado de $X$ for a média dos seus dois valores referidos na alínea anterior, qual acha que será o valor esperado de $Y$? Confirme a sua resposta usando a lei das expectativas iteradas.""": mo.md("""        
    		$$\\mathbb{{E}}\\left[Y \\middle| X = \\frac{{800 + 1400}}{{2}}\\right] = \\mathbb{{E}}\\left[Y | X = 1100\\right] = 0.7 + 0.002 \\times 1100$$

            Podemos confirmar a lei das expectativas iteradas:
            """)
        }
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2315
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2315
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2315.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "marimo",
#     "polars",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.15"
#+BEGIN_SRC python
__generated_with = "0.8.15"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    import altair as alt

    # https://github.com/vega/altair/blob/32990a597af7c09586904f40b3f5e6787f752fa5/doc/user_guide/encodings/index.rst#escaping-special-characters-in-column-names

    df1 = pl.DataFrame(
        {
            "a": [0.0, 0.0, 0.2, 0.2],
            "b": [True, False, False, False],
            "c": [True, False, False, False],
            "d": [True, False, False, False],
        }
    )
    df1
    return alt, df1, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pl):
    df2 = pl.DataFrame(
        {
            "i.a": [0.0, 0.0, 0.2, 0.2],
            "i.b": [True, False, False, False],
            "i[c]": [True, False, False, False],
            "i:d": [True, False, False, False],
        }
    )
    df2
    return df2,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2327_table_staleness
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2327_table_staleness
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2327_table_staleness.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import datetime
    return datetime, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    initial_data = [{"x": 1, "y": -1}]
    return initial_data,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(initial_data, mo):
    get_data, set_data = mo.state(initial_data)
    return get_data, set_data

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(datetime, get_data, mo, set_data):
    _data = get_data()
    print("Creating new table list", datetime.datetime.utcnow())
    def on_change_wrapper(i, k):    
        def on_change(value):
            print("setting")
            _data = get_data()
            _data[i][k] = value
            set_data(_data)
        return on_change

    table_list = [{k: mo.ui.number(value=v, start=-100, stop=100, on_change=on_change_wrapper(i, k)) for k, v in d.items()} for i, d in enumerate(_data)]
    return on_change_wrapper, table_list

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, table_list):
    table = mo.ui.table(table_list)
    return table,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_data, mo, set_data):
    def on_click(*value):
        rows = get_data()
        rows.append({"x": 0, "y": 0})
        set_data(rows)



    add_row = mo.ui.button(label="add row", on_click=on_click)
    return add_row, on_click

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(add_row, mo, table):
    mo.vstack([table, add_row])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_data):
    get_data()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(table_list):
    table_list[0]["x"].value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2357-table-ui-elements
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2357-table-ui-elements
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2357-table-ui-elements.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.17"
#+BEGIN_SRC python
__generated_with = "0.8.17"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    data = [{"x": 1, "y": "a", "c": mo.ui.button(label="hello")}, {"x": 2, "y": "b", "c": mo.ui.button(label="world")}]
    return (data,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    mo.ui.table(data)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2366-anywidget-binary
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2366-anywidget-binary
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2366-anywidget-binary.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.17"
#+BEGIN_SRC python
__generated_with = "0.8.17"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import anywidget
    import traitlets



    class Widget(anywidget.AnyWidget):
        _esm = """
        function render({ model, el }) {
          let arr = model.get("arr");
          el.innerText = arr.bytes instanceof DataView;
        }
        export default { render };
        """
        arr = traitlets.Dict().tag(sync=True)

    import numpy as np
    arr = np.array([1, 2, 3])
    Widget(
        arr={
            "bytes": arr.tobytes(),
            "shape": arr.shape,
            "dtype": str(arr.dtype),
        }
    )
    return Widget, anywidget, arr, np, traitlets

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2403_table_ui_staleness
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2403_table_ui_staleness
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2403_table_ui_staleness.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.20"
#+BEGIN_SRC python
__generated_with = "0.8.20"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    keys_1 = [f"123_{x}" for x in range(20)]
    keys_2 = [f"abc_{x}" for x in range(20)]
    return keys_1, keys_2

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    # Toggling this switch should change the keys in the tables and the initial value in the text inputs
    switch = mo.ui.switch()
    switch
    return (switch,)

#+END_SRC
*** @app.cell: Function button
#+BEGIN_SRC python
@app.cell
def button(keys_1, keys_2, switch):
    keys = keys_1 if switch.value else keys_2
    return (keys,)

#+END_SRC
*** @app.cell: Function display
#+BEGIN_SRC python
@app.cell
def display(keys, mo):
    table = mo.ui.table({str(k): mo.ui.text(value=k) for k in keys})
    table
    return (table,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2457-plotly-section
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2457-plotly-section
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2457-plotly-section.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.22"
#+BEGIN_SRC python
__generated_with = "0.8.22"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import plotly.express as px

    df = px.data.tips()
    mo.md("# Plotly Selection")
    return df, mo, px

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    df
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo, px):
    _fig = px.treemap(df, path=[px.Constant("all"), 'day', 'time', 'sex'], values='total_bill')
    plot = mo.ui.plotly(_fig)
    return (plot,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plot):
    mo.vstack([plot], align="stretch")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(plot):
    plot.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, px):
    _data = dict(
        character=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
        parent=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
        value=[10, 14, 12, 10, 2, 6, 6, 4, 4])

    sunburst = mo.ui.plotly(px.sunburst(
        _data,
        names='character',
        parents='parent',
        values='value',
    ))

    sunburst
    return (sunburst,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(sunburst):
    sunburst.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2506_anywidget_buffer_paths
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2506_anywidget_buffer_paths
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2506_anywidget_buffer_paths.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.4"
#+BEGIN_SRC python
__generated_with = "0.9.4"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # binary data is a png image of a small purple square
    CONTENT = b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x14\x00\x00\x00\x14\x08\x02\x00\x00\x00\x02\xeb\x8aZ\x00\x00\x00\tpHYs\x00\x00.#\x00\x00.#\x01x\xa5?v\x00\x00\x00\x1dIDAT8\xcbc\xac\x11\xa9g \x1701P\x00F5\x8fj\x1e\xd5<\xaa\x99r\xcd\x00m\xba\x017\xd3\x00\xdf\xcb\x00\x00\x00\x00IEND\xaeB`\x82"
    return (CONTENT,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(CONTENT):
    import anywidget
    import traitlets


    class BytesWidget(anywidget.AnyWidget):
        _esm = """
        function render({ model, el }) {
            let value = model.get("value");
            const isDataView = document.createElement("div");
            isDataView.innerText = `Is  DataView: ${value instanceof DataView}`;
            el.appendChild(isDataView);

            const image = document.createElement("img");
            image.src = URL.createObjectURL(new Blob([value]));
            el.appendChild(image);
        }
        export default { render };
        """
        value = traitlets.Bytes().tag(sync=True)


    # binary data is a png image of a small purple square
    BytesWidget(value=CONTENT)
    return BytesWidget, anywidget, traitlets

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(CONTENT, mo):
    # Not lossy
    mo.image(CONTENT.decode("latin1").encode("latin1"))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(CONTENT, mo):
    # Is lossy
    mo.image(CONTENT.decode("utf-8", errors="replace").encode("utf-8"))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(CONTENT, anywidget, traitlets):
    import numpy as np
    from pathlib import Path


    class BytesWritesWidget(anywidget.AnyWidget):
        _esm = """
        function render({ model, el }) {
          model.set("other_value", 42)
          model.save_changes()
          const isDataView = document.createElement("div");
          const value = model.get("value")
          isDataView.innerText = `Is  DataView: ${value instanceof DataView}`;
          el.appendChild(isDataView);
        }
        export default { render };
        """
        value = traitlets.Bytes().tag(sync=True)
        other_value = traitlets.Integer(0).tag(sync=True)


    # raises a TraitError
    BytesWritesWidget(value=CONTENT)
    return BytesWritesWidget, Path, np

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2526-plotly-refresh-on-data-change
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2526-plotly-refresh-on-data-change
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2526-plotly-refresh-on-data-change.py
:END:
*** Import statements
#+BEGIN_SRC python
#uvx --with plotly --with pandas --with 'marimo==0.9' marimo edit plotly_marimo.py

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.1"
#+BEGIN_SRC python
__generated_with = "0.9.1"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    a = mo.ui.checkbox(label="toggle to change data")
    a
    return (a,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(a, np, px):
    x = np.array([1, 2, 3, 4]) if a.value else np.arange(3, 20)
    y = np.sin(x / 5)
    px.scatter(x=x, y=y)
    return x, y

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(a):
    a
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, px, x, y):
    plot = mo.ui.plotly(px.scatter(x=x, y=y)); plot
    return (plot,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(plot):
    plot.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import plotly.express as px
    import marimo as mo
    import numpy as np
    return mo, np, px

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2550-search-polars
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2550-search-polars
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2550-search-polars.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.4"
#+BEGIN_SRC python
__generated_with = "0.9.4"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl
    import pandas

    data = pl.DataFrame(
        {
            "A": [1, 2, 3],
            "B": ["foo", "bar", "baz"],
            "C": [True, False, True],
            "D": [["zz", "yyy"], [], []],
            "E": [1.1, 2.2, 3.3],
            "F": [[12, 34], [], []],
        }
    )
    return data, mo, pandas, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    data.to_pandas()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    data
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2648_file_browser_reset
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2648_file_browser_reset
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2648_file_browser_reset.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.9"
#+BEGIN_SRC python
__generated_with = "0.9.9"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    source = mo.ui.text()
    source
    return (source,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, source):
    mo.ui.file_browser(initial_path=source.value)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    from vega_datasets import data

    df = data.cars()
    columns = df.columns.tolist()
    slider = mo.ui.slider(0, len(columns), label="frozen columns")
    slider
    return columns, data, df, slider

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, df, mo, slider):
    frozen = columns[: slider.value]
    mo.ui.table(df, freeze_columns_left=frozen)
    return (frozen,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2702-altair-deserialization
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2702-altair-deserialization
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2702-altair-deserialization.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.12"
#+BEGIN_SRC python
__generated_with = "0.9.12"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from datetime import date
    import marimo as mo
    import polars as pl
    import altair as alt

    df = pl.DataFrame(
        {
            "date": [date(2020, 1, 2), date(2020, 1, 3), date(2020, 1, 4)] * 2,
            "price": [1, 4, 6, 1, 5, 2],
            "stock": ["a", "a", "a", "b", "b", "b"],
        }
    )
    return alt, date, df, mo, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df):
    alt.data_transformers.enable("marimo_csv")
    df.plot.line(x="date", y="price", color="stock")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df):
    alt.data_transformers.enable("marimo_json")
    df.plot.line(x="date", y="price", color="stock")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, df):
    alt.data_transformers.enable("default")
    df.plot.line(x="date", y="price", color="stock")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.altair_chart(df.plot.line(x="date", y="price", color="stock"))
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2817_timezones
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2817_timezones
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2817_timezones.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.19"
#+BEGIN_SRC python
__generated_with = "0.9.19"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    from datetime import datetime, date

    d = datetime(2010, 10, 7, 13, 15)

    pl.DataFrame({"timestamp": [d], "date": [d.date()]})
    return d, date, datetime, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(d):
    [d, d.date()]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(date, pl):
    import altair as alt

    data = pl.DataFrame(
        {
            "Date": [
                date(2021, 1, 1),
                date(2021, 1, 2),
                date(2021, 1, 3),
            ],
            "Value": [23, 45, 67],
        }
    )
    alt.Chart(data).mark_line().encode(x="Date:T", y="Value:Q").interactive()
    return alt, data

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 2991-df-columns
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.2991-df-columns
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/2991-df-columns.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "marimo",
#     "numpy==2.1.3",
#     "pandas==2.2.3",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.27"
#+BEGIN_SRC python
__generated_with = "0.9.27"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import marimo as mo
    import numpy as np
    return mo, np, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Lots of columns""")
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md("""Set cols to 10000 to crash the frontend. Number of rows appears to have no effect.""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    rows = mo.ui.number(start=1, value=10, label="rows")
    columns = mo.ui.number(start=1, value=50, label="cols")

    mo.hstack([rows, columns], justify="start")
    return columns, rows

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(columns, np, rows):
    data = np.zeros((rows.value, columns.value))
    return (data,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, pd):
    df = pd.DataFrame(data, columns=[str(i) for i in range(1, data.shape[1] + 1)])
    return (df,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    df
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        ## 20k rows, 40 columns 

        This is the default max to show column summaries
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np, pd):
    _data = np.random.rand(20000, 40)
    column_names = [f"col{i}" for i in range(40)]
    large_df = pd.DataFrame(
        {col: _data[:, i] for i, col in enumerate(column_names)}
    )
    large_df
    return column_names, large_df

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # mo.ui.table(df, max_columns=None)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 643
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.643
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/643.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.13"
#+BEGIN_SRC python
__generated_with = "0.6.13"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    get_v, set_v = mo.state(True)
    get_v2, set_v2 = mo.state(True)
    return get_v, get_v2, set_v, set_v2

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_v, get_v2):
    [get_v(), get_v2()]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_v, mo, set_v):
    x = mo.ui.checkbox(get_v(), on_change=set_v)
    x
    return x,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_v, mo, set_v):
    y = mo.ui.checkbox(get_v(), on_change=set_v)
    y
    return y,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_v2, mo, set_v2):
    mo.ui.checkbox(get_v2(), on_change=set_v2)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(get_v2, mo, set_v2):
    mo.ui.checkbox(get_v2(), on_change=set_v2)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 846
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.846
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/846.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.4.0"
#+BEGIN_SRC python
__generated_with = "0.4.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        "This notebook covers a couple different cases for rendering plotly under different configs and with different renderers."
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import plotly.io as pio

    pio.renderers.default = "notebook"
    pio.renderers["notebook"].config["scrollZoom"] = True
    pio.renderers["notebook"].config["editable"] = True
    return mo, pio

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pio):
    pio.renderers.default
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pio):
    pio.renderers[pio.renderers.default].config
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, pio):
    keys = list(pio.renderers.keys())


    def get_config(renderer):
        try:
            return str(renderer.config)
        except:
            return "none"


    printed_configs = [
        {"name": key, "config": get_config(pio.renderers[key])} for key in keys
    ]
    mo.ui.table(printed_configs)
    return get_config, keys, printed_configs

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pio):
    pio.renderers
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import plotly.express as px

    x_data = [1, 2, 3, 4, 5, 6]
    y_data = [1, 2, 3, 2, 3, 4]
    fig = px.scatter(x=x_data, y=y_data)
    return fig, px, x_data, y_data

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(fig):
    fig  # Uses the default renderer "notebook"
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(fig, mo):
    mo.ui.plotly(fig)  # Uses the default renderer "notebook"
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(fig, mo):
    mo.ui.plotly(fig, config={})  # Uses the empty config
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(fig, mo):
    mo.ui.plotly(fig, config={"staticPlot": True})  # Uses the passed config
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(fig, mo):
    mo.ui.plotly(fig, renderer_name="browser")  # Uses a pre-defined rendererer
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 852
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.852
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/852.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.2.9"
#+BEGIN_SRC python
__generated_with = "0.2.9"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
    # Bug 852

    Explanation: The table was rendering incorrectly due to javascript number precision.
    """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    df = pd.DataFrame({"data": [912312851340981241284, None, "abc"]})
    df
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    table = mo.ui.table(df)
    table
    return table,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 877
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.877
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/877.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.2.12"
#+BEGIN_SRC python
__generated_with = "0.2.12"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt

    alt.data_transformers.enable("marimo_csv")
    return alt,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 881
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.881
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/881.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.2.12"
#+BEGIN_SRC python
__generated_with = "0.2.12"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import marimo as mo
    df = pd.DataFrame({"data": [2.0]})
    mo.ui.table(df)
    return df, mo, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 924
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.924
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/924.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.2"
#+BEGIN_SRC python
__generated_with = "0.3.2"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
    # Scrollbar issue with iframed altair

    There should be no vertical scrollbar within the iframed container.
          
    """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import micropip
    import altair as alt

    import marimo as mo
    import numpy as np
    import pandas as pd

    np.random.seed(11)
    N = 100
    x = np.linspace(0, 300, num=N)
    y = np.linspace(0, 300, num=N)

    df = pd.DataFrame({"x": x, "y": y})

    graph = (
        alt.Chart(df)
        .mark_circle()
        .encode(
            x="x:Q",
            y="y:Q",
        )
        .properties(width=1820, height=780)
    )
    graph
    return N, alt, df, graph, micropip, mo, np, pd, x, y

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** 970-freeze-columns
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.970-freeze-columns
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/970-freeze-columns.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(happiness_index, mo, pd):
    df = pd.read_csv(happiness_index)
    mo.ui.table(
        df, 
        freeze_columns_left=["Country name", "Ladder score"], 
        freeze_columns_right=["Standard error of ladder score"]
    )
    return df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.table(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    happiness_index = 'https://raw.githubusercontent.com/MainakRepositor/Datasets/master/World%20Happiness%20Data/2020.csv'
    return happiness_index, mo, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** altair_bug
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.altair_bug
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/altair_bug.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.1"
#+BEGIN_SRC python
__generated_with = "0.3.1"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import altair as alt
    from vega_datasets import data
    return alt, data, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, data, mo):
    source = data.seattle_weather()

    bar = (
        alt.Chart(source)
        .mark_bar(cornerRadius=10, height=10)
        .encode(
            x=alt.X("min(temp_min):Q")
            .scale(domain=[-15, 45])
            .title("Temperature (°C)"),
            x2="max(temp_max):Q",
            y=alt.Y("month(date):O").title(None),
        )
    )

    text_min = (
        alt.Chart(source)
        .mark_text(align="right", dx=-5)
        .encode(
            x="min(temp_min):Q", y=alt.Y("month(date):O"), text="min(temp_min):Q"
        )
    )

    text_max = (
        alt.Chart(source)
        .mark_text(align="left", dx=5)
        .encode(
            x="max(temp_max):Q", y=alt.Y("month(date):O"), text="max(temp_max):Q"
        )
    )

    _chart = (bar + text_min + text_max).properties(
        title=alt.Title(
            text="Temperature variation by month",
            subtitle="Seatle weather, 2012-2015",
        )
    )
    # Bug: chart_selection does not work when not false
    # This is due to month(date) being an aggregatation that we cannot back out.
    chart = mo.ui.altair_chart(_chart, chart_selection=False)
    return bar, chart, source, text_max, text_min

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.selections
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(chart):
    chart.dataframe
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** df-conversion
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.df-conversion
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/df-conversion.py
:END:
*** Import statements
#+BEGIN_SRC python
from __future__ import annotations

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.4"
#+BEGIN_SRC python
__generated_with = "0.8.4"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd

    import marimo as mo

    return mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    data = [
        {
            "block_number": 8021365,
            "blockNumber": 2216021,
            "txnHash": "0x991923a4d6979630dd6be2f81e8adda2cb5ed1c7be8912c6c8636c48be40b990",
        }
    ]
    return (data,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo, pd):
    mo.ui.table(pd.DataFrame(data))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo, pd):
    mo.ui.dataframe(pd.DataFrame(data))
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** key_with_period
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.key_with_period
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/issues/key_with_period.py
:END:
*** Import statements
#+BEGIN_SRC python
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.6.0"
#+BEGIN_SRC python
__generated_with = "0.6.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    json_list = [{"key.with.period": "value"} for _ in range(10)]
    return json_list,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(json_list, mo):
    mo.ui.table(json_list)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(json_list, mo, pd):
    mo.ui.data_explorer(pd.DataFrame(json_list))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(json_list, mo, pd):
    mo.ui.dataframe(pd.DataFrame(json_list))
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** layouts
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.issues.layouts
:END:
* layouts
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.layouts
:END:
* markdown
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.markdown
:END:
** sane_lists
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.markdown.sane_lists
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/markdown/sane_lists.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.27"
#+BEGIN_SRC python
__generated_with = "0.9.27"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        2. hey
        2. hey
        2. hey
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        1. hey
        1. hey
        1. hey
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        1. hey
        2. hey
        2. hey
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* mpl
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.mpl
:END:
** basic_image
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.mpl.basic_image
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/mpl/basic_image.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.27"
#+BEGIN_SRC python
__generated_with = "0.9.27"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import matplotlib.pyplot as plt
    import numpy as np

    x = np.linspace(0, 1, 100)
    y = np.sin(x)

    plt.plot(x, y)
    plt.title("Sine Wave")
    plt.xlabel("x")
    plt.ylabel("sin(x)")

    plt.gca()
    return np, plt, x, y

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* sandbox
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sandbox
:END:
** git_source
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sandbox.git_source
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/sandbox/git_source.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "marimo",
#     "python-gcode==0.1.0",
# ]
#
# [tool.uv.sources]
# python-gcode = { git = "https://github.com/fetlab/python_gcode", rev = "new" }
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.3"
#+BEGIN_SRC python
__generated_with = "0.9.3"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function foo
#+BEGIN_SRC python
@app.cell
def foo():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import python_gcode
    help(python_gcode)
    return (python_gcode,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* sql
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sql
:END:
** duckdb_tokenize
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sql.duckdb_tokenize
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/sql/duckdb_tokenize.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "duckdb",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.20"
#+BEGIN_SRC python
__generated_with = "0.7.20"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import duckdb
    import re
    return duckdb, mo, re

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    default_code = """
    CREATE TABLE
            -- This is a comment
            IF NOT EXISTS
            -- This is another comment
            table1 (id INT)
    """
    code = mo.ui.code_editor(language="sql", value=default_code.strip())
    code
    return code, default_code

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(code, duckdb):
    statements = duckdb.extract_statements(code.value)
    print("Number of statements: " + str(len(statements)))

    print(duckdb.tokenize(code.value))
    return statements,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(code, find_created_tables):
    find_created_tables(code.value)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(re):
    def find_created_tables(sql_statement: str) -> list[str]:
        """
        Find the tables created in a SQL statement.

        This function uses the DuckDB tokenizer to find the tables created
        in a SQL statement. It returns a list of the table names created
        in the statement.

        Args:
            sql_statement: The SQL statement to parse.

        Returns:
            A list of the table names created in the statement.
        """

        import duckdb

        def remove_comments(sql):
            # Function to replace comments with spaces, preserving newlines
            def replace_with_spaces(match):
                return " " * len(match.group())

            # Split the SQL into strings and non-strings
            parts = re.split(r'(\'(?:\'\'|[^\'])*\'|"(?:""|[^"])*")', sql)

            for i in range(0, len(parts), 2):
                # Remove single-line comments
                parts[i] = re.sub(
                    r"--.*$", replace_with_spaces, parts[i], flags=re.MULTILINE
                )

                # Remove multi-line comments
                parts[i] = re.sub(r"/\*[\s\S]*?\*/", replace_with_spaces, parts[i])

            # Join the parts back together
            return "".join(parts)

        sql_statement = remove_comments(sql_statement)

        tokens = duckdb.tokenize(sql_statement)
        created_tables: list[str] = []
        i = 0

        def token_str(i: int) -> str:
            token = tokens[i]
            start = token[0]
            end = len(sql_statement) - 1
            if i + 1 < len(tokens):
                end = tokens[i + 1][0]
            return sql_statement[start:end].strip()

        def keyword_token_str(i: int) -> str:
            return token_str(i).lower()

        def token_type(i: int) -> str:
            return tokens[i][1]

        while i < len(tokens):
            if (
                keyword_token_str(i) == "create"
                and token_type(i) == duckdb.token_type.keyword
            ):
                i += 1
                if i < len(tokens) and keyword_token_str(i) == "or":
                    i += 2  # Skip 'OR REPLACE'
                if i < len(tokens) and keyword_token_str(i) in (
                    "temporary",
                    "temp",
                ):
                    i += 1  # Skip 'TEMPORARY' or 'TEMP'
                if i < len(tokens) and keyword_token_str(i) == "table":
                    i += 1
                    if i < len(tokens) and keyword_token_str(i) == "if":
                        i += 3  # Skip 'IF NOT EXISTS'
                    if i < len(tokens):
                        created_tables.append(token_str(i))
            i += 1

        return created_tables
    return find_created_tables,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** limits
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sql.limits
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/sql/limits.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.7.11"
#+BEGIN_SRC python
__generated_with = "0.7.11"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Small table""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _df = mo.sql(
        f"""
        CREATE OR REPLACE TABLE small_table AS SELECT * FROM range(1000)
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, small_table):
    _df = mo.sql(
        f"""
        SELECT * FROM small_table;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, small_table):
    _df = mo.sql(
        f"""
        SELECT * FROM small_table LIMIT 10;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, small_table):
    _df = mo.sql(
        f"""
        SELECT * FROM small_table LIMIT 1000;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, small_table):
    _df = mo.sql(
        f"""
        SELECT * FROM small_table LIMIT 300;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, small_table):
    _df = mo.sql(
        f"""
        SELECT * FROM small_table LIMIT 301;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, small_table):
    _df = mo.sql(
        f"""
        SELECT * FROM small_table LIMIT 1100;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Large table""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _df = mo.sql(
        f"""
        CREATE OR REPLACE TABLE large_table AS SELECT * FROM range(30_000);
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(large_table, mo):
    _df = mo.sql(
        f"""
        SELECT * FROM large_table;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(large_table, mo):
    _df = mo.sql(
        f"""
        SELECT * FROM large_table LIMIT 25_000;
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(large_table, mo):
    _df = mo.sql(
        f"""
        SELECT * FROM large_table LIMIT 20_000;
        """
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** local_db_deps
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.sql.local_db_deps
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/sql/local_db_deps.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.16"
#+BEGIN_SRC python
__generated_with = "0.9.16"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _df = mo.sql(
        f"""
        ATTACH 'my_db.db' as my_db;
        """
    )
    return (my_db,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    _df = mo.sql(
        f"""
        CREATE OR REPLACE TABLE my_db.my_table as (SELECT 42);
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, my_db, my_table):
    _df = mo.sql(
        f"""
        SELECT * FROM my_db.main.my_table LIMIT 100
        """
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* tables
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables
:END:
** booleans
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.booleans
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/booleans.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "pandas",
#     "polars",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.14"
#+BEGIN_SRC python
__generated_with = "0.8.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import polars as pl
    return mo, pd, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    data = {
        "A": [True, True, True],
        "B": [False, False, False],
        "C": [True, True, False],
    }

    pd.DataFrame(data)
    return data,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, pl):
    pl.DataFrame(data)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    mo.ui.table(data)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** complex_types
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.complex_types
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/complex_types.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.14"
#+BEGIN_SRC python
__generated_with = "0.9.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import polars as pl
    from datetime import datetime, date, time
    import marimo as mo

    df = pl.DataFrame(
        {
            # Numeric
            "integers": pl.Series("integers", [1, 2, 3], dtype=pl.Int32),
            "floats": pl.Series("floats", [1.0, 2.0, 3.0], dtype=pl.Float64),
            # String
            "strings": pl.Series("strings", ["a", "b", "c"], dtype=pl.Utf8),
            "categories": pl.Series(
                "categories", ["a", "b", "c"], dtype=pl.Categorical
            ),
            # Boolean
            "bools": pl.Series("bools", [True, False, True], dtype=pl.Boolean),
            # Temporal
            "dates": pl.Series("dates", [date(2021, 1, 1)] * 3, dtype=pl.Date),
            "times": pl.Series("times", [time(12, 0, 0)] * 3, dtype=pl.Time),
            "datetimes": pl.Series(
                "datetimes", [datetime.now()] * 3, dtype=pl.Datetime
            ),
            "durations": pl.Series(
                "durations", ["1d", "2d", "3d"], dtype=pl.Duration
            ),
            # Lists
            "lists": pl.Series(
                "lists", [[1, 2], [3, 4], [5, 6]], dtype=pl.List(pl.Int64)
            ),
            "arrays": pl.Series(
                "arrays",
                [[1, 2], [3, 4], [5, 6]],
                dtype=pl.Array(pl.Int64, shape=(2,)),
            ),
            # Objects
            "sets": pl.Series(
                "sets", [set([1, 2]), set([3, 4]), set([5, 6])], dtype=pl.Object
            ),
            "dicts": pl.Series(
                "dicts",
                [{"a": 1, "b": 2}, {"c": 3, "d": 4}, {"e": 5, "f": 6}],
                dtype=pl.Object,
            ),
            # Structs
            "structs": pl.Series(
                [{"a": 1, "b": 2}, {"c": 3, "d": 4}, {"e": 5, "f": 6}],
                dtype=pl.Struct,
            ),
            # Nulls
            "nulls": pl.Series("nulls", [None, None, None], dtype=pl.Utf8),
            # Complex
            "complex": pl.Series(
                "complex",
                [1 + 2j, 3 + 4j, 5 + 6j],
                dtype=pl.Object,
            ),
        }
    )
    mo.ui.table(df)
    return date, datetime, df, mo, pl, time

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    pandas = df.to_pandas()
    pandas
    return (pandas,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    arrow = df.to_arrow()
    arrow
    return (arrow,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, mo):
    mo.ui.dataframe(df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    import pandas as pd

    pandas_with_timestamp = pd.DataFrame(
        {
            "timestamp": [
                pd.Timestamp("2021-01-01"),
                pd.Timestamp("2021-01-02"),
                pd.Timestamp("2021-01-03"),
            ]
        }
    )
    mo.ui.dataframe(pandas_with_timestamp)
    return pandas_with_timestamp, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** dictionary_table
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.dictionary_table
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/dictionary_table.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.2"
#+BEGIN_SRC python
__generated_with = "0.8.2"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import os
    import marimo as mo
    return mo, os

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, os):
    v = mo.ui.table(dict(os.environ))
    v
    return v,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.ui.table(
        {
            "a": 1,
            "b": 2,
        },
        format_mapping={
            "value": lambda x: x + 1,
        },
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(v):
    v.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** ibis_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.ibis_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/ibis_example.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.10"
#+BEGIN_SRC python
__generated_with = "0.9.10"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    import ibis

    memtable = ibis.memtable(
        {
            "rowid": range(3000),
            "a": [1, 2, 3] * 1000,
            "b": [4, 5, 6] * 1000,
            "c": [4, 5, 6] * 1000,
            "d": [4, 5, 6] * 1000,
            "e": [4, 5, 6] * 1000,
        }
    )

    table = mo.ui.table(memtable, page_size=5)
    return ibis, memtable, table

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(table):
    table
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, table):
    mo.ui.table(table.value)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(table):
    table.value
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** ibis_interactive
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.ibis_interactive
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/ibis_interactive.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.15"
#+BEGIN_SRC python
__generated_with = "0.8.15"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl
    import numpy as np
    return mo, np, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    interactive = mo.ui.checkbox(label="Interactive", value=False)
    interactive
    return interactive,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(interactive):
    import ibis

    ibis.options.interactive = interactive.value
    f"interactive: {ibis.options.interactive}"
    return ibis,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis):
    # This should be 200-300ms (lazy)
    with execution_timer("ibis.read_parquet"):
        ibis_table = ibis.read_parquet(
            "s3://gbif-open-data-us-east-1/occurrence/2023-04-01/occurrence.parquet/000000",
        )
    return ibis_table,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis_table):
    # Takes a while, loads data into memory when `ibis.options.interactive = True`
    with execution_timer("ibis_table"):
        print(ibis_table)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis_table):
    # Takes a while, loads data into memory when `ibis.options.interactive = True`
    ibis_table
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis_table):
    # This should be fast (lazy)
    with execution_timer("t.head(10)"):
        ibis_head = ibis_table.head(10)
    return ibis_head,

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import time


    class execution_timer:
        def __init__(self, name):
            self.name = name

        def __enter__(self):
            self.start_time = time.time()
            return self

        def __exit__(self, exc_type, exc_value, traceback):
            self.end_time = time.time()
            duration = self.end_time - self.start_time
            if duration < 0.050:  # 50ms
                print(
                    f"\033[92m[FAST]\033[0m {self.name} time: {duration} seconds"
                )
            else:
                print(
                    f"\033[91m[SLOW]\033[0m {self.name} time: {duration} seconds"
                )
    return execution_timer, time

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** lazy
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.lazy
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/lazy.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.15"
#+BEGIN_SRC python
__generated_with = "0.8.15"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import polars as pl
    import numpy as np
    return mo, np, pl

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# Lazy polars""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, np, pl):
    lazy_df = pl.LazyFrame(
        {
            "A": np.random.randint(0, 100, size=100000000),
            "B": np.random.rand(100000000),
        }
    )
    with execution_timer("print(lazy_df)"):
        print(lazy_df)
    lazy_df
    return lazy_df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(lazy_df):
    polars_df = lazy_df.collect()
    polars_df
    return polars_df,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# Lazy ibis""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import ibis
    return ibis,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis):
    # This should be 200-300ms (lazy)
    with execution_timer("ibis.read_parquet"):
        ibis_table = ibis.read_parquet(
            "s3://gbif-open-data-us-east-1/occurrence/2023-04-01/occurrence.parquet/000000",
        )
    return ibis_table,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis, ibis_table, mo):
    # This should be slow, needs to load to print
    ibis.options.interactive = False
    with execution_timer("as_html, interactive = False"):
        mo.output.replace(ibis_table)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis, ibis_table, mo):
    # This should be slow, needs to load to print
    ibis.options.interactive = True
    with execution_timer("as_html, interactive = True"):
        mo.output.replace(ibis_table)
    ibis.options.interactive = False
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis_table):
    # This should be fast (lazy)
    with execution_timer("t.head(10)"):
        _private_var = ibis_table.head(10)

    # This should be fast (lazy)
    with execution_timer("t.head(10)"):
        ibis_head = ibis_table.head(10)

    # This should be ~300-500ms
    with execution_timer("t.count().execute()"):
        count = ibis_table.count().execute()
    return count, ibis_head

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis):
    def time_things(data):
        # This should be fast
        with execution_timer("type"):
            print(type(data))

        from marimo._plugins.ui._impl.tables.utils import get_table_manager

        with execution_timer("get_table_manager"):
            tm = get_table_manager(data)
            print(tm)

        with execution_timer("get_num_rows(force=False)"):
            _res = tm.get_num_rows(force=False)

        with execution_timer("get_num_rows(force=True)"):
            _res = tm.get_num_rows(force=True)

        with execution_timer("get_column_names"):
            _res = tm.get_column_names()

        with execution_timer("get_field_types"):
            _res = tm.get_field_types()

        with execution_timer("take"):
            _res = tm.take(100000, 0)

        with execution_timer("to_sql"):
            if "ibis" in str(type(tm)).lower():
                ibis.to_sql(tm.take(100, 0).take(10, 0).data.count())
    return time_things,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(ibis_table, time_things):
    # Ibis
    time_things(ibis_table)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(polars_df, time_things):
    # Polars
    time_things(polars_df)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis_table, mo):
    # This takes a while (runs a count(*) with no limit)
    with execution_timer("mo.ui.dataframe"):
        _df_viewer = mo.ui.dataframe(ibis_table)
    _df_viewer
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(execution_timer, ibis_table, mo):
    # This takes a while (runs a count(*) with no limit)
    with execution_timer("mo.ui.dataframe(limit=10)"):
        _df_viewer = mo.ui.dataframe(ibis_table, limit=10)
    _df_viewer
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import time


    class execution_timer:
        def __init__(self, name):
            self.name = name

        def __enter__(self):
            self.start_time = time.time()
            return self

        def __exit__(self, exc_type, exc_value, traceback):
            self.end_time = time.time()
            duration = self.end_time - self.start_time
            if duration < 0.050:  # 50ms
                print(
                    f"\033[92m[FAST]\033[0m {self.name} time: {duration} seconds"
                )
            else:
                print(
                    f"\033[91m[SLOW]\033[0m {self.name} time: {duration} seconds"
                )
    return execution_timer, time

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** pandas_nan
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.pandas_nan
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/pandas_nan.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "marimo",
#     "numpy",
#     "pandas",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.11"
#+BEGIN_SRC python
__generated_with = "0.8.11"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    import numpy as np

    # This shouldn't print a runtime warning
    df = pd.DataFrame({"a": [1,2,3], "b": [np.nan, np.nan, np.nan]})
    df
    return df, mo, np, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** server_pagination
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.server_pagination
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/server_pagination.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    return data, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    cars = data.cars()
    return cars,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    # Default cars (406)
    default = mo.ui.table(cars)
    default
    return default,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(default):
    default._value_frontend
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    # JSON
    mo.ui.table(cars.to_dict(orient="records"))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    # No pagination
    mo.ui.table(cars[0:20], pagination=False)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    # Trimmed, no pagination
    mo.ui.table(cars[0:9])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    # 21k cars, above DEFAULT_SUMMARY_CHARTS_ROW_LIMIT
    _more_cars = cars.sample(n=21_000, replace=True)
    more_cars = mo.ui.table(_more_cars)
    more_cars
    return more_cars,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(more_cars):
    more_cars.value
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars):
    # 1m cars, above DEFAULT_SUMMARY_STATS_ROW_LIMIT
    one_mil_cars = cars.sample(1_000_000 + 1, replace=True)
    # mo.ui.table(one_mil_cars)
    return one_mil_cars,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    mo.ui.dataframe(cars)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** subseconds
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.tables.subseconds
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/tables/subseconds.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.27"
#+BEGIN_SRC python
__generated_with = "0.9.27"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import datetime

    import marimo as mo
    import pandas as pd
    return datetime, mo, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Datetime""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(datetime, pd):
    _start = datetime.datetime(2024, 11, 27, 16)
    _slice = datetime.timedelta(days=1)
    pd.DataFrame(
        data={
            "timestamp": [_start + n * _slice for n in range(5)],
        }
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Seconds""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(datetime, pd):
    _start = datetime.datetime(2024, 11, 27, 16, 17, 7)
    _slice = datetime.timedelta(seconds=1)
    pd.DataFrame(
        data={
            "timestamp": [_start + n * _slice for n in range(5)],
        }
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Milliseconds""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(datetime, pd):
    _start = datetime.datetime(2024, 11, 27, 16, 17, 7, 742951)
    _slice = datetime.timedelta(microseconds=123456)
    test_df = pd.DataFrame(
        data={
            "timestamp": [_start + n * _slice for n in range(5)],
        }
    )
    return (test_df,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, test_df):
    # Nanoseconds are still missing, because JavaScript (browsers) don't support nanoseconds.
    mo.hstack([mo.plain(test_df), test_df])
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""## Nanoseconds""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(test_df):
    nano_df = test_df.copy()
    nano_df["timestamp"] = nano_df["timestamp"].astype(str)
    nano_df
    return (nano_df,)

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* theming
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming
:END:
** altair_theme
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.altair_theme
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/altair_theme.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "altair",
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import altair as alt

    alt.themes
    return alt, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** apply_theme
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.apply_theme
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/apply_theme.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "seaborn",
#     "matplotlib",
#     "holoviews",
#     "bokeh",
#     "vega-datasets",
#     "altair",
#     "plotly",
#     "marimo",
#     "pandas",
#     "numpy",
# ]
# ///
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.app_meta().theme
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# Seaborn""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df, plt):
    import seaborn as sns

    plt.figure(figsize=(10, 6))
    sns.lineplot(x="x", y="y", data=df)
    plt.title("Seaborn: Sine Wave")
    return (sns,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(r"""# Matplotlib""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x, y):
    import matplotlib.pyplot as plt

    plt.figure(figsize=(10, 6))
    plt.plot(x, y)
    plt.title("Matplotlib: Sine Wave")
    return (plt,)

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""# Holoviews""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    import holoviews as hv

    hv.extension("bokeh")
    curve = hv.Curve(df, "x", "y")
    hv.render(curve.opts(title="Holoviews: Sine Wave", width=800, height=400))
    return curve, hv

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""# Bokeh""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(x, y):
    # Bokeh
    from bokeh.plotting import figure, show

    p = figure(
        title="Bokeh: Sine Wave",
        x_axis_label="x",
        y_axis_label="y",
        width=800,
        height=400,
    )
    p.line(x, y, line_width=2)
    p
    return figure, p, show

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""# Altair""")
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    import altair as alt
    from vega_datasets import data

    chart = (
        alt.Chart(data.cars())
        .mark_point()
        .encode(
            x="Horsepower",
            y="Miles_per_Gallon",
            color="Origin",
        )
    )

    chart = mo.ui.altair_chart(chart)
    chart
    return alt, chart, data

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(mo):
    mo.md(r"""# Plotly""")
    return

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __(df):
    # Plotly
    import plotly.express as px

    px.line(df, x="x", y="y", title="Plotly: Sine Wave")
    return (px,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np, pd):
    # Sample data
    x = np.linspace(0, 10, 100)
    y = np.sin(x)
    df = pd.DataFrame({"x": x, "y": y})
    return df, x, y

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo

    return (mo,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import numpy as np
    import pandas as pd

    return np, pd

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** bokeh_theme
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.bokeh_theme
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/bokeh_theme.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "bokeh",
# ]
# ///
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    from bokeh.plotting import figure, show
    from bokeh.io import curdoc
    return curdoc, figure, show

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(curdoc, figure):
    fruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']
    counts = [5, 3, 4, 2, 4, 6]

    curdoc().theme = None

    p = figure(x_range=fruits, height=350, title="Fruit Counts",
               toolbar_location=None, tools="")

    p.vbar(x=fruits, top=counts, width=0.9)

    p.xgrid.grid_line_color = None
    p.y_range.start = 0
    p
    return counts, fruits, p

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(counts, curdoc, figure, fruits):
    curdoc().theme = "light_minimal"

    p3 = figure(x_range=fruits, height=350, title="Fruit Counts",
               toolbar_location=None, tools="")

    p3.vbar(x=fruits, top=counts, width=0.9)

    p3.xgrid.grid_line_color = None
    p3.y_range.start = 0
    p3
    return p3,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(counts, curdoc, figure, fruits):
    curdoc().theme = "dark_minimal"

    p2 = figure(x_range=fruits, height=350, title="Fruit Counts",
               toolbar_location=None, tools="")

    p2.vbar(x=fruits, top=counts, width=0.9)

    p2.xgrid.grid_line_color = None
    p2.y_range.start = 0
    p2
    return p2,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** custom_css
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.custom_css
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/custom_css.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "marimo",
# ]
# ///
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium", css_file="custom.css")
#+BEGIN_SRC python
app = marimo.App(width="medium", css_file="custom.css")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    return data, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    data.cars()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.callout(mo.md("""
    ## Callout

    This font should be styled
    """))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        # heading

        Here is a paragraph
        """
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** custom_head
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.custom_head
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/custom_head.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "vega-datasets",
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.21"
#+BEGIN_SRC python
__generated_with = "0.9.21"

#+END_SRC
*** Assignment app = marimo.App(width="medium", html_head_file="head.html")
#+BEGIN_SRC python
app = marimo.App(width="medium", html_head_file="head.html")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    from vega_datasets import data
    return data, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    data.cars()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.callout(
        mo.md("""
    ## Callout

    This font should be styled
    """)
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        r"""
        # heading

        Here is a paragraph
        """
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** matplotlib_theme
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.matplotlib_theme
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/matplotlib_theme.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "matplotlib",
#     "numpy",
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import matplotlib.pyplot as plt
    import numpy as np
    import marimo as mo

    return mo, np, plt

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plt):
    mo.ui.table(plt.style.available, selection=None, page_size=2)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(create_plot, plt):
    plt.style.use('default')
    create_plot().gca()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(create_plot, plt):
    plt.style.use('dark_background')
    create_plot().gca()
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np, plt):
    def create_plot():    
        # Create sample data
        x = np.linspace(0, 10, 100)
        y1 = np.sin(x)
        y2 = np.cos(x)
        y3 = np.tan(x)
        y4 = x**2
        
        # Create the plot
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Plot multiple lines without specifying colors
        ax.plot(x, y1, label='Sin')
        ax.plot(x, y2, label='Cos')
        ax.plot(x, y3, label='Tan')
        ax.plot(x, y4, label='x^2')
        
        # Customize the plot
        ax.set_title('Dark Mode Plot with Auto Colors')
        ax.set_xlabel('X-axis')
        ax.set_ylabel('Y-axis')
        ax.legend()
        
        # Add a grid
        ax.grid(True, linestyle='--', alpha=0.7)
        
        return plt
    return create_plot,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** plotly_theme
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.theming.plotly_theme
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/theming/plotly_theme.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "plotly",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.3"
#+BEGIN_SRC python
__generated_with = "0.8.3"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import plotly.io as pio
    import plotly.graph_objects as go

    print("default theme:", pio.templates.default)
    return go, mo, pio

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(go, pio):
    pio.templates.default = "plotly_white"

    go.Figure(
        data=[go.Bar(y=[2, 1, 3])],
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(go, pio):
    pio.templates.default = "plotly"

    go.Figure(
        data=[go.Bar(y=[2, 1, 3])],
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(go, pio):
    pio.templates.default = "plotly_dark"

    go.Figure(
        data=[go.Bar(y=[2, 1, 3])],
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* third_party
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party
:END:
** altair_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.altair_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/altair_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "vega-datasets",
#     "altair",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data):
    cars = data.cars()
    stocks = data.stocks.url
    source = data.windvectors()
    return cars, source, stocks

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, source):
    alt.Chart(source).mark_point(shape="wedge", filled=True).encode(
        latitude="latitude",
        longitude="longitude",
        color=alt.Color(
            "dir",
            scale=alt.Scale(domain=[0, 360], scheme="rainbow"),
            legend=None,
        ),
        angle=alt.Angle("dir", scale=alt.Scale(domain=[0, 360], range=[180, 540])),
        size=alt.Size("speed", scale=alt.Scale(rangeMax=500)),
    ).project("equalEarth")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, cars, mo):
    cars_scatter_plot = (
        alt.Chart(cars)
        .mark_circle(size=60)
        .encode(
            x="Horsepower",
            y="Miles_per_Gallon",
            color="Origin",
            tooltip=["Name", "Origin", "Horsepower", "Miles_per_Gallon"],
        )
        .interactive()
    )

    mo.md(
        f"""# hello, world

        {mo.as_html(cars_scatter_plot)}

        that was an altair plot
        """
    )
    return cars_scatter_plot,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(alt, stocks):
    base = (
        alt.Chart(stocks)
        .encode(x="date:T", y="price:Q", color="symbol:N")
        .transform_filter(alt.datum.symbol == "GOOG")
    )

    (base.mark_line() + base.mark_point())
    return base,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import altair as alt
    from vega_datasets import data
    return alt, data

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** holoviews_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.holoviews_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/holoviews_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "numpy",
#     "holoviews",
#     "pandas",
#     "marimo",
#     "hvplot",
#     "bokeh",
#     "polars",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.0"
#+BEGIN_SRC python
__generated_with = "0.8.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md(
        """
        # HoloViews in marimo
        ```
        pip install holoviews
        ```
        """
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pandas as pd
    import numpy as np
    import holoviews as hv
    from holoviews import opts
    import marimo as mo

    hv.extension("bokeh", "plotly", "matplotlib")
    return hv, mo, np, opts, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    station_info = pd.read_csv(
        "https://raw.githubusercontent.com/holoviz/holoviews/main/examples/assets/station_info.csv"
    )
    return station_info,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(hv, mo):
    backend = mo.ui.dropdown(
        options=list(hv.extension._backends.keys()),
        label="Choose your backend",
        full_width=True,
    )
    return backend,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(backend, hv, mo, station_info):
    scatter = hv.Scatter(station_info, "services", "ridership")
    if backend.value:
        hv.extension(backend.value)
    mo.hstack([backend, scatter], align="center")
    return scatter,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""## Area chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(hv, np):
    xs = np.linspace(0, np.pi * 4, 40)
    hv.Area((xs, np.sin(xs)))
    return xs,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""## Scatter chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(scatter):
    scatter
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# HV Plot""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import hvplot.pandas
    from bokeh.sampledata.penguins import data as df

    df.hvplot.scatter(x="bill_length_mm", y="bill_depth_mm", by="species")
    return df, hvplot

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Composed Views""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import polars as pl
    from hvplot import polars

    df3 = pl.DataFrame({"x": [1, 2, 3], "y": [1, 2, 3]}, strict=False)
    df4 = pl.DataFrame({"x": [1, 2, 3], "y": [3, 2.5, 3]}, strict=False)
    return df3, df4, pl, polars

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df3, df4):
    df3.hvplot.line("x", "y") * df4.hvplot.line("x", "y")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df3, df4):
    df3.hvplot.line("x", "y") + df4.hvplot.line("x", "y")
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** ipython_display
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.ipython_display
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/ipython_display.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "ipython",
#     "marimo",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.
import marimo

#+END_SRC
*** Assignment __generated_with = "0.3.1"
#+BEGIN_SRC python
__generated_with = "0.3.1"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import IPython
    import marimo as mo

    url = IPython.display.HTML("https://marimo.io")
    url
    return IPython, mo, url

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(IPython):
    html = IPython.display.HTML("<em>hello world</em>")
    html
    return html,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(IPython, html, url):
    IPython.display.display(html, url)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # not on PyPI
    # installation instructions here https://github.com/allefeld/pytikz
    import tikz
    return tikz,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(tikz):
    # define coordinates as a list of tuples
    coords = [(0, 0), (0, 2), (1, 3.25), (2, 2), (2, 0), (0, 2), (2, 2), (0, 0), (2, 0)]

    # create `Picture` object
    pic = tikz.Picture()
    # draw a line following the coordinates
    pic.draw(tikz.line(coords), thick=True, rounded_corners='4pt')
    return coords, pic

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pic):
    pic.demo(dpi=300)
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** mohtml_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.mohtml_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/mohtml_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "mohtml==0.1.2",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.21"
#+BEGIN_SRC python
__generated_with = "0.9.21"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # You can import any HTML element this way
    from mohtml import a, p, div, script, h1

    div(
        script(src="https://cdn.tailwindcss.com"),
        h1(
            "Testing",
            klass="font-bold text-xl border-yellow-600 border-2 px-2 border-dashed",
        ),
    )
    return a, div, h1, p, script

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** pandas_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.pandas_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/pandas_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pandas",
#     "numpy",
# ]
# ///
import marimo

#+END_SRC
*** Assignment __generated_with = "0.1.0"
#+BEGIN_SRC python
__generated_with = "0.1.0"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(np):
    import pandas as pd

    df = pd.DataFrame([np.random.randn(20)]*10, columns=np.arange(20))
    df
    return df, pd

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(df):
    # Series
    df[0]
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import numpy as np
    return np,

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** panel_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.panel_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/panel_example.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.14"
#+BEGIN_SRC python
__generated_with = "0.9.14"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import panel as pn

    pn.extension("vega")
    return mo, pn

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pn):
    slider = pn.widgets.IntSlider(start=0, end=10, value=5)

    slider.rx() * "🚀"
    return (slider,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pn, slider):
    pn.Column(slider, pn.pane.Markdown("🚀"))
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pn):
    [
        pn.widgets.FloatSlider(value=3.14),
        pn.widgets.Select(
            options=[
                {"label": "Option 1", "value": 1},
                {"label": "Option 2", "value": 2},
            ]
        ),
        pn.widgets.Checkbox(name="Check me"),
        pn.widgets.DatePicker(),
        pn.widgets.FileInput(multiple=True),
    ]
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** plotly_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.plotly_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/plotly_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "plotly==5.24.1",
#     "pandas==2.2.3",
#     "marimo",
# ]
# ///

import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.18"
#+BEGIN_SRC python
__generated_with = "0.8.18"

#+END_SRC
*** Assignment app = marimo.App(width="full")
#+BEGIN_SRC python
app = marimo.App(width="full")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Plotly Express Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import plotly.express as px

    px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])
    return (px,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, px):
    plot = mo.ui.plotly(
        px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16], width=600)
    )
    mo.vstack(
        [
            mo.md("# Fixed width"),
            plot,
        ]
    )
    return (plot,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plot):
    mo.vstack(
        [
            mo.hstack(
                [
                    mo.ui.table(plot.value, label="Points", selection=None),
                    mo.ui.table(
                        [
                            {"start": r[0], "end": r[1], "axis": key}
                            for key, r in plot.ranges.items()
                        ],
                        selection=None,
                        label="Ranges",
                    ),
                ],
                widths="equal",
            ),
            plot.indices,
        ]
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Plotly Graph Objects Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    import pandas as pd
    import plotly.graph_objects as go

    df = pd.DataFrame(
        {
            "Fruit": [
                "Apples",
                "Oranges",
                "Bananas",
                "Apples",
                "Oranges",
                "Bananas",
            ],
            "Contestant": [
                "Alex",
                "Alex",
                "Alex",
                "Jordan",
                "Jordan",
                "Jordan",
            ],
            "Number Eaten": [2, 1, 3, 1, 3, 2],
        }
    )

    fig = go.Figure()
    for contestant, group in df.groupby("Contestant"):
        fig.add_trace(
            go.Bar(
                x=group["Fruit"],
                y=group["Number Eaten"],
                name=contestant,
                hovertemplate=(
                    "Contestant=%s<br>Fruit=%%{x}<br>"
                    "Number Eaten=%%{y}<extra></extra>"
                )
                % contestant,
            )
        )
    fig.update_layout(legend_title_text="Contestant")
    fig.update_xaxes(title_text="Fruit")
    fig.update_yaxes(title_text="Number Eaten")

    plot2 = mo.ui.plotly(fig)
    plot2
    return contestant, df, fig, go, group, pd, plot2

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plot2):
    mo.ui.table(plot2.value, selection=None)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# Re-rendering Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import vega_datasets as datasets
    import marimo as mo

    cars = datasets.data.cars()
    return cars, datasets, mo

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo):
    sample_size = mo.ui.slider(label="Sample", start=100, stop=len(cars), step=100)
    sample_size
    return (sample_size,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(cars, mo, px, sample_size):
    _fig = px.scatter(
        cars.sample(sample_size.value),
        x="Horsepower",
        y="Miles_per_Gallon",
        color="Origin",
        size="Weight_in_lbs",
        hover_data=["Name", "Origin"],
    )

    _fig
    plot3 = mo.ui.plotly(_fig)
    plot3
    return (plot3,)

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo, plot3):
    mo.ui.table(plot3.value, selection=None)
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(mo):
    mo.md("""# 3D Chart""")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(go, pd):
    # load dataset
    _df = pd.read_csv(
        "https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv"
    )

    # create figure
    _fig = go.Figure()

    # Add surface trace
    _fig.add_trace(go.Surface(z=_df.values.tolist(), colorscale="Viridis"))

    # Update plot sizing
    _fig.update_layout(
        width=800,
        height=900,
        autosize=False,
        margin=dict(t=0, b=0, l=0, r=0),
        template="plotly_white",
    )

    # Update 3D scene options
    _fig.update_scenes(aspectratio=dict(x=1, y=1, z=0.7), aspectmode="manual")

    # Add dropdown
    _fig.update_layout(
        updatemenus=[
            dict(
                type="buttons",
                direction="left",
                buttons=list(
                    [
                        dict(
                            args=["type", "surface"],
                            label="3D Surface",
                            method="restyle",
                        ),
                        dict(
                            args=["type", "heatmap"],
                            label="Heatmap",
                            method="restyle",
                        ),
                    ]
                ),
                pad={"r": 10, "t": 10},
                showactive=True,
                x=0.11,
                xanchor="left",
                y=1.1,
                yanchor="top",
            ),
        ]
    )

    # Add annotation
    _fig.update_layout(
        annotations=[
            dict(
                text="Trace type:",
                showarrow=False,
                x=0,
                y=1.08,
                yref="paper",
                align="left",
            )
        ]
    )

    _fig
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** pyeacharts_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.pyeacharts_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/pyeacharts_example.py
:END:
*** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
*** Assignment __generated_with = "0.8.18"
#+BEGIN_SRC python
__generated_with = "0.8.18"

#+END_SRC
*** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import pyecharts.options as opts
    from pyecharts.charts import Bar

    bar = (
        Bar()
        .add_xaxis(["shirt", "cardigan", "chiffon", "pants", "heels", "socks"])
        .add_yaxis("Merchant A", [5, 20, 36, 10, 75, 90])
        .add_yaxis("Merchant B", [15, 6, 45, 20, 35, 66])
        .set_global_opts(
            title_opts=opts.TitleOpts(title="Main Title", subtitle="Subtitle")
        )
    )

    bar
    return Bar, bar, opts

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** rich_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.rich_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/rich_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "marimo",
#     "rich",
# ]
# ///
import marimo

#+END_SRC
*** Assignment __generated_with = "0.1.88"
#+BEGIN_SRC python
__generated_with = "0.1.88"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return mo,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    # pip install rich
    from rich import print as pprint
    return pprint,

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pprint):
    pprint("[bold red]Error:[/bold red] Something went wrong!")
    pprint("[green]Success:[/green] Operation completed.")
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** seaborn_example
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.seaborn_example
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/seaborn_example.py
:END:
*** Import statements
#+BEGIN_SRC python
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "seaborn",
# ]
# ///
# Copyright 2024 Marimo. All rights reserved.

import marimo

#+END_SRC
*** Assignment __generated_with = "0.9.17"
#+BEGIN_SRC python
__generated_with = "0.9.17"

#+END_SRC
*** Assignment app = marimo.App()
#+BEGIN_SRC python
app = marimo.App()

#+END_SRC
*** @app.cell(hide_code=True): Function __
#+BEGIN_SRC python
@app.cell(hide_code=True)
def __():
    import seaborn as sns

    penguins = sns.load_dataset("penguins")
    tips = sns.load_dataset("tips")
    return penguins, sns, tips

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(sns):
    sns.color_palette("pastel")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(penguins, sns):
    sns.jointplot(
        data=penguins,
        x="flipper_length_mm",
        y="bill_length_mm",
        hue="species",
    )
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(penguins, sns):
    sns.pairplot(data=penguins, hue="species")
    return

#+END_SRC
*** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(sns, tips):
    sns.relplot(
        data=tips,
        x="total_bill",
        y="tip",
        col="time",
        hue="smoker",
        style="smoker",
        size="size",
    )
    return

#+END_SRC
*** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** leafmap
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.leafmap
:END:
*** backends
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.leafmap.backends
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/leafmap/backends.py
:END:
**** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
**** Assignment __generated_with = "0.9.17"
#+BEGIN_SRC python
__generated_with = "0.9.17"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    return (mo,)

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import leafmap as default_leamap
    import leafmap.leafmap as leafmap
    import leafmap.foliumap as leafmap_folium
    import leafmap.plotlymap as leafmap_plotly
    return default_leamap, leafmap, leafmap_folium, leafmap_plotly

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import keplergl
    import leafmap.kepler as leafmap_kepler
    return keplergl, leafmap_kepler

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(default_leamap):
    default_leamap.Map
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(leafmap):
    data = leafmap.examples.datasets.countries_geojson
    return (data,)

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, leafmap):
    _m = leafmap.Map()
    _m.add_data(
        data,
        column="POP_EST",
        scheme="Quantiles",
        cmap="Blues",
        legend_title="Population",
    )
    _m
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(leafmap_plotly):
    _m = leafmap_plotly.Map(center=(40, -100), zoom=3, height=500)
    _m
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, leafmap_folium):
    _m = leafmap_folium.Map()
    _m.add_data(
        data,
        column="POP_EST",
        scheme="Quantiles",
        cmap="Blues",
        legend_title="Population",
    )
    _m
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(leafmap_kepler):
    _m = leafmap_kepler.Map(
        center=[40, -100], zoom=2, height=600, widescreen=False
    )
    _m
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
** pandas
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.pandas
:END:
*** int_column_names
:PROPERTIES:
:LITERATE_ORG_MODULE: marimo._smoke_tests.third_party.pandas.int_column_names
:header-args: :tangle /Users/jingtao/projects/marimo/marimo/_smoke_tests/third_party/pandas/int_column_names.py
:END:
**** Import statements
#+BEGIN_SRC python
import marimo

#+END_SRC
**** Assignment __generated_with = "0.9.27"
#+BEGIN_SRC python
__generated_with = "0.9.27"

#+END_SRC
**** Assignment app = marimo.App(width="medium")
#+BEGIN_SRC python
app = marimo.App(width="medium")

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __():
    import marimo as mo
    import pandas as pd
    return mo, pd

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    pd.DataFrame([1, 2, 3])
    return

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(pd):
    data = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=[0, 1, 2])
    data
    return (data,)

#+END_SRC
**** @app.cell: Function __
#+BEGIN_SRC python
@app.cell
def __(data, mo):
    mo.ui.table(data)
    return

#+END_SRC
**** if_statement
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
